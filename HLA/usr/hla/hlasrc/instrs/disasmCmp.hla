/*
** 
** disasmCmp-
**
** This program compares the disassembled output of two HLA compilations.
** It returns exit status zero if the two files are identical.  
** It returns a non-zero exit code if the files are not equal.
**
** Note, however, that it skips the first eight lines of the file
** and the last several lines of the file (Up to the line containing 
** "  Summary" as this action eliminates those lines that are different
** on files that are effectively identical.
*/

program disasmCmp;

#include( "stdlib.hhf" );

const
	fsize1	:text := "(type dword filesize1)";
	fsize2	:text := "(type dword filesize2)";

static
	file1		:dword;
	filename1	:string;
	filesize1	:qword;
	buffer1		:string;
	
	file2		:dword;
	filename2	:string;
	filesize2	:qword;
	buffer2		:string;			
	
	DelFromHere	:dword;
	
	ReturnVal	:uns32 := 0;
	line		:str.strvar( 256 );	



begin disasmCmp;

	// Verify command line syntax:
	
	
	if( arg.c() <> 3 ) then

		stdout.put( "Usage: disasmCmp disasmFile1 disasmFile2" nl );
		arg.c();
		stdout.put( "Arguments: ", (type uns32 eax ), nl );
		arg.cmdLn();
		stdout.put( "Current command line: '", (type string eax ), "'", nl );
		os.exitProcess( 1 );

	endif;
	
	// Get the filenames:
	
	arg.v(1);
	mov( eax, filename1 );
	arg.v(2);
	mov( eax, filename2 );
	stdout.put( "Comparing ", filename1, " and ", filename2, "...", nl );
	
	// Get the file sizes:
	
	filesys.size( filename1 );
	mov( edx:eax, filesize1 );
	
	filesys.size( filename2 );
	mov( edx:eax, filesize2 );
				
	// Allocate storage to hold the two files
	// (note: for testing, file sizes never exceed 2GB):
	
	assert( (type dword filesize1[4]) = 0 );
	assert( (type dword filesize2[4]) = 0 );
	
	str.alloc( fsize1 );
	mov( eax, buffer1 );

	str.alloc( fsize2 );
	mov( eax, buffer2 );
	

	// Open the files:
	
	fileio.open( filename1, fileio.r );
	mov( eax, file1 );
	
	// Skip the first 8 lines of file1:
	
	for( mov( 0, ecx ); ecx < 8; inc( ecx )) do
	
		fileio.gets( file1, line );
		
	endfor;
	
	// Read the remainder of the file into buffer1.
	// Note that fsize1 is too big at this point, but that
	// isn't a problem.
	
	fileio.read( file1, val buffer1, fsize1 );
	mov( buffer1, ebx );
	mov( eax, (type str.strRec [ebx]).length );		// Actual bytes read
	mov( eax, fsize1 );
	fileio.close( file1 );
	
	
	// Do the same for the second filename:
	
	fileio.open( filename2, fileio.r );
	mov( eax, file2 );
	for( mov( 0, ecx ); ecx < 8; inc( ecx )) do
	
		fileio.gets( file2, line );
		
	endfor;
	fileio.read( eax, val buffer2, fsize2 );
	mov( buffer2, ebx );
	mov( eax, (type str.strRec [ebx]).length );		// Actual bytes read
	mov( eax, fsize2 );
	fileio.close( file2 );
	
	
	str.rindex( buffer1, "endCode:" );
	if( @c ) then
	
		str.delete3( buffer1, eax, fsize1 );
		
	endif;

	str.rindex( buffer2, "endCode:" );
	if( @c ) then
	
		str.delete3( buffer2, eax, fsize2 );
		
	endif;
	str.eq( buffer1, buffer2 );	
	if( @c ) then
	
		stdout.put( "Files compare OK" nl nl );
		os.exitProcess(0);
		
	endif;
	stdout.put( "Files do not match!" nl nl );
	os.exitProcess( 1 );	

end disasmCmp;
