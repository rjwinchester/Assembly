program fileio_test;
#include( "stdlib.hhf" )
#include( "mac.hhf" )

const
	HelloWorld		:string := "Hello world...." #$a;
	str1st			:string := "..............." #$a;
	HelloWorldLen	:uns32 := @length( HelloWorld );
	
static
	fd			:dword;
	wStr		:string := HelloWorld;
	s1st		:string := str1st;
	buffer		:byte[256];
	readStr		:str.strvar(256);
	
readonly
	filename 	:string	:= "mac_fileio_test.data";


begin fileio_test;

	mac.open3
	( 
		filename, 
		mac.O_WRONLY | mac.O_CREAT, 
		mac.S_IRWXU | mac.S_IRWXG | mac.S_IRWXO 
	);
	if( @c ) then
	
		stdout.put( "Error (", (type uns32 eax), ") opening file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;

	// The first string we write will be overwritten after an lseek later on:
	
	mov( eax, fd );
	mac.write( fd, val s1st, HelloWorldLen );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") writing file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	
	// The second string we write will be deleted by an ftruncate operation later on:
	
	mac.write( fd, val wStr, HelloWorldLen );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") writing file(2): ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	
	mac.fsync( fd );	// Just to see if the call is successful
	if( @c ) then
			
		stdout.put( "Error(", (type uns32 eax), ") fsync'ing file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	
	// Overwrite the first string:
	
	mac.lseek( fd, 0, mac.SEEK_SET );	
	mac.write( fd, val wStr, HelloWorldLen );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") writing file(2): ", filename, nl );
		os.exitProcess( 1 );
		
	endif;

	// Delete the second string:
	
	mac.ftruncate( fd, HelloWorldLen );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") truncating file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;

	mac.close( fd );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") closing file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;

	mac.open2( filename, mac.O_RDONLY );
	if( @c ) then
	
		stdout.put( "Error (", (type uns32 eax), ") opening file(2): ", filename, nl );
		os.exitProcess( 1 );
		
	endif;	
	mov( eax, fd );


	// Check out pread before doing a read:
	
	mac.pread( fd, buffer, HelloWorldLen, 0 );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") p-reading file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	if( eax <> HelloWorldLen ) then
			
		stdout.put
		( 
			"Error, length = ", 
			(type uns32 eax), 
			" during pread, expected ",
			HelloWorldLen,
			nl
		);
		os.exitProcess( 1 );
		
	endif;
	mov( 0, (type byte buffer[eax]));
	str.cpyz( &buffer, readStr );
	if( str.ne( readStr, wStr )) then
				
		stdout.put
		( 
			"Error, data pread did not match" nl
			"Data read:", nl,
			readStr, "<<<<<<<" nl
			"Should be ", nl,
			wStr, "<<<<<<<",
			nl
		);
		os.exitProcess( 1 );
		
	endif;

	// Now do a normal read:
	
	mac.read( fd, buffer, HelloWorldLen );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") reading file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	if( eax <> HelloWorldLen ) then
			
		stdout.put
		( 
			"Error, length = ", 
			(type uns32 eax), 
			" during read, expected ",
			HelloWorldLen,
			nl
		);
		os.exitProcess( 1 );
		
	endif;
	mov( 0, (type byte buffer[eax]));
	str.cpyz( &buffer, readStr );
	if( str.ne( readStr, wStr )) then
				
		stdout.put
		( 
			"Error, data read did not match" nl
			"Data read:", nl,
			readStr, "<<<<<<<" nl
			"Should be ", nl,
			wStr, "<<<<<<<",
			nl
		);
		os.exitProcess( 1 );
		
	endif;

	mac.close( fd );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") closing file (2): ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	mac.unlink( filename );
	if( @c ) then
		
		stdout.put( "Error(", (type uns32 eax), ") deleting file: ", filename, nl );
		os.exitProcess( 1 );
		
	endif;
	if( filesys.exists( filename )) then
	
		stdout.put( "Error -- unlink did not delete file!" nl );
		os.exitProcess( 1 );
		
	endif;
	stdout.put( "fileio test succeeded!" nl );
	
end fileio_test;

													