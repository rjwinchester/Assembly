program cathex_test;
#include( "stdlib.hhf" )

var
	Handle		:string;
	i			:int32;

static
	tbVal		:tbyte;
	tbVal2		:tbyte;
	
begin cathex_test;

	str.alloc( 512*1024 ); 
	mov( eax, Handle );

	mov( $1234_5678, eax );
	mov( eax, (type dword tbVal ));
	mov( eax, (type dword tbVal[4] ));
	mov( $90ab, (type word tbVal[8] ));
	
	mov( eax, (type dword tbVal2));
	mov( 0, (type dword tbVal2[4]));
	mov( 0, (type word tbVal2[8]));
		 

	conv.setUnderscores( false );

	str.cattb( Handle, tbVal );	
	str.cats( Handle, nl  );
	str.cattb( Handle, tbVal2 );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	str.cattbSize( Handle, tbVal, 30, '.' );	
	str.cats( Handle, nl  );
	str.cattbSize( Handle, tbVal, -30, '.' );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	str.cattbSize( Handle, tbVal2, 12, '.' );	
	str.cats( Handle, nl  );
	str.cattbSize( Handle, tbVal2, -12, '.' );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	conv.setUnderscores( true );
	
	str.cattb( Handle, tbVal );	
	str.cats( Handle, nl  );
	str.cattb( Handle, tbVal2 );	
	str.cats( Handle, nl  );
	str.cattbSize( Handle, tbVal, 30, '.' );	
	str.cats( Handle, nl  );
	str.cattbSize( Handle, tbVal, -30, '.' );	
	str.cats( Handle, nl  );
	str.cattbSize( Handle, tbVal2, 12, '.' );	
	str.cats( Handle, nl  );
	str.cattbSize( Handle, tbVal2, -12, '.' );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	str.catb( Handle, 0 );
	str.cats( Handle, nl  );
	str.catb( Handle, 1 );
	str.cats( Handle, nl  );
	str.catb( Handle, $7f );
	str.cats( Handle, nl  );
	str.catb( Handle, $80 );
	str.cats( Handle, nl  );
	str.catb( Handle, $FF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.catbSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catbSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.catw( Handle, 0 );
	str.cats( Handle, nl  );
	str.catw( Handle, $10 );
	str.cats( Handle, nl  );
	str.catw( Handle, $200 );
	str.cats( Handle, nl  );
	str.catw( Handle, $7fff );
	str.cats( Handle, nl  );
	str.catw( Handle, $8000 );
	str.cats( Handle, nl  );
	str.catw( Handle, $FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.catwSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catwSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catwSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catwSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.catd( Handle, 0 );
	str.cats( Handle, nl  );
	str.catd( Handle, $10 );
	str.cats( Handle, nl  );
	str.catd( Handle, $200 );
	str.cats( Handle, nl  );
	str.catd( Handle, $3000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $4_0000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $50_0000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $600_0000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $7000_0000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $7fff_ffff );
	str.cats( Handle, nl  );
	str.catd( Handle, $8000_0000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );
	for( mov( -10, i); i<=10; inc(i)) do

		str.catdSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.catq( Handle, 0 );
	str.cats( Handle, nl  );
	str.catq( Handle, $10 );
	str.cats( Handle, nl  );
	str.catq( Handle, $200 );
	str.cats( Handle, nl  );
	str.catq( Handle, $3000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $4_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $50_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $600_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $7000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $8_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $90_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $A00_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $B000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $C_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $D0_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $E00_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $F000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $7fff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.catq( Handle, $8000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -20, i); i<=20; inc(i)) do

		str.catqSize( Handle, 1, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.catl( Handle, 0 );
	str.cats( Handle, nl  );
	str.catl( Handle, $10 );
	str.cats( Handle, nl  );
	str.catl( Handle, $200 );
	str.cats( Handle, nl  );
	str.catl( Handle, $3000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $4_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $50_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $600_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $7000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $8_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $90_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $A00_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $B000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $C_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $D0_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $E00_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $F000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $1_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $20_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $300_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $4000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $5_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $60_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $700_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $8000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $9_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $A0_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $B00_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $C000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $D_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $E0_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $F00_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $1000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.catl( Handle, $8000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -40, i); i<=40; inc(i)) do

		str.catlSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	conv.setUnderscores( false );


	str.catb( Handle, 0 );
	str.cats( Handle, nl  );
	str.catb( Handle, $7f );
	str.cats( Handle, nl  );
	str.catb( Handle, $80 );
	str.cats( Handle, nl  );
	str.catb( Handle, $FF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.catbSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catbSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;

	str.catw( Handle, 0 );
	str.cats( Handle, nl  );
	str.catw( Handle, $7fff );
	str.cats( Handle, nl  );
	str.catw( Handle, $8000 );
	str.cats( Handle, nl  );
	str.catw( Handle, $FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.catwSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catwSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catwSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catwSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;

	str.catd( Handle, 0 );
	str.cats( Handle, nl  );
	str.catd( Handle, $7fff_ffff );
	str.cats( Handle, nl  );
	str.catd( Handle, $8000_0000 );
	str.cats( Handle, nl  );
	str.catd( Handle, $FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.catdSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catdSize( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.catq( Handle, 0 );
	str.cats( Handle, nl  );
	str.catq( Handle, $7fff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.catq( Handle, $8000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catq( Handle, $FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -20, i); i<=20; inc(i)) do

		str.catqSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catqSize( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.catl( Handle, 0 );
	str.cats( Handle, nl  );
	str.catl( Handle, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.catl( Handle, $8000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.catl( Handle, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );

	for( mov( -40, i); i<=40; inc(i)) do

		str.catlSize( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.catlSize( Handle, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );
	
	
	
	

	conv.setUnderscores( false );

	str.cath80( Handle, tbVal );	
	str.cats( Handle, nl  );
	str.cath80( Handle, tbVal2 );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	str.cath80Size( Handle, tbVal, 30, '.' );	
	str.cats( Handle, nl  );
	str.cath80Size( Handle, tbVal, -30, '.' );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	str.cath80Size( Handle, tbVal2, 12, '.' );	
	str.cats( Handle, nl  );
	str.cath80Size( Handle, tbVal2, -12, '.' );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	conv.setUnderscores( true );
	
	str.cath80( Handle, tbVal );	
	str.cats( Handle, nl  );
	str.cath80( Handle, tbVal2 );	
	str.cats( Handle, nl  );
	str.cath80Size( Handle, tbVal, 30, '.' );	
	str.cats( Handle, nl  );
	str.cath80Size( Handle, tbVal, -30, '.' );	
	str.cats( Handle, nl  );
	str.cath80Size( Handle, tbVal2, 12, '.' );	
	str.cats( Handle, nl  );
	str.cath80Size( Handle, tbVal2, -12, '.' );	
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	str.cath8( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath8( Handle, 1 );
	str.cats( Handle, nl  );
	str.cath8( Handle, $7f );
	str.cats( Handle, nl  );
	str.cath8( Handle, $80 );
	str.cats( Handle, nl  );
	str.cath8( Handle, $FF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.cath8Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath8Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.cath16( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath16( Handle, $10 );
	str.cats( Handle, nl  );
	str.cath16( Handle, $200 );
	str.cats( Handle, nl  );
	str.cath16( Handle, $7fff );
	str.cats( Handle, nl  );
	str.cath16( Handle, $8000 );
	str.cats( Handle, nl  );
	str.cath16( Handle, $FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.cath16Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath16Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath16Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath16Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.cath32( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $10 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $200 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $3000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $4_0000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $50_0000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $600_0000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $7000_0000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $7fff_ffff );
	str.cats( Handle, nl  );
	str.cath32( Handle, $8000_0000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );
	for( mov( -10, i); i<=10; inc(i)) do

		str.cath32Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.cath64( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $10 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $200 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $3000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $4_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $50_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $600_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $7000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $8_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $90_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $A00_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $B000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $C_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $D0_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $E00_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $F000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $7fff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.cath64( Handle, $8000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -20, i); i<=20; inc(i)) do

		str.cath64Size( Handle, 1, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.cath128( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $10 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $200 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $3000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $4_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $50_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $600_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $7000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $8_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $90_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $A00_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $B000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $C_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $D0_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $E00_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $F000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $1_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $20_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $300_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $4000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $5_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $60_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $700_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $8000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $9_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $A0_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $B00_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $C000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $D_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $E0_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $F00_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $1000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.cath128( Handle, $8000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -40, i); i<=40; inc(i)) do

		str.cath128Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	conv.setUnderscores( false );


	str.cath8( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath8( Handle, $7f );
	str.cats( Handle, nl  );
	str.cath8( Handle, $80 );
	str.cats( Handle, nl  );
	str.cath8( Handle, $FF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.cath8Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath8Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;

	str.cath16( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath16( Handle, $7fff );
	str.cats( Handle, nl  );
	str.cath16( Handle, $8000 );
	str.cats( Handle, nl  );
	str.cath16( Handle, $FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.cath16Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath16Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath16Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath16Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;

	str.cath32( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $7fff_ffff );
	str.cats( Handle, nl  );
	str.cath32( Handle, $8000_0000 );
	str.cats( Handle, nl  );
	str.cath32( Handle, $FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -10, i); i<=10; inc(i)) do

		str.cath32Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath32Size( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.cath64( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $7fff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.cath64( Handle, $8000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath64( Handle, $FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	for( mov( -20, i); i<=20; inc(i)) do

		str.cath64Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath64Size( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );

	str.cath128( Handle, 0 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	str.cats( Handle, nl  );
	str.cath128( Handle, $8000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl  );
	str.cath128( Handle, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl  );

	for( mov( -40, i); i<=40; inc(i)) do

		str.cath128Size( Handle, 0, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cath128Size( Handle, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		str.cats( Handle, nl  );
		str.cats( Handle, nl  );

	endfor;
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );
	str.cats( Handle, nl  );

	mov( Handle, ebx );
	mov( (type str.strRec [ebx]).length, ecx );
	while( ecx > 4096 ) do
	
		stdout.write( [ebx], 4096 );
		sub( 4096, ecx );
		add( 4096, ebx );
		
	endwhile;
	if( ecx > 0 ) then
	
		stdout.write( [ebx], ecx );
		
	endif;
	


end cathex_test;

													