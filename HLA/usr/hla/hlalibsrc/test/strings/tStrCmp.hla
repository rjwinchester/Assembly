program strcmp_test;
#include( "stdlib.hhf" )
												 
val
	baseItems	:string[] := [""];
	baseCmps	:boolean[] := [false];
	
const		
	exStr	:= $8000;
	
	strChrs	:= { #$1f..' ', '0'..'1', 'A'..'B', '`'..'b', #127};
						
	#macro makeItems(k);
		?baseItems :string[] :=
		[
			#for( j in strChrs  )
				k + j,
			#endfor
		];
	#endmacro
	
	base_c	:string[] :=
					[
						"",
						#for( i in strChrs )
							char(i),
						#endfor
						#for( i in strChrs )
							makeItems(i)
							baseItems,
						#endfor
						"AAA",
						"AAB",
						"AAC",
						"BBB",
						"ccc",
						"    ",
						"Hello World",
						"Hello",
						"hello",
						"hello world"
					];
					
	
	#macro oneRow( str1, chCase, theOp ):tempVal;
		?tempVal :boolean[] :=
		[ 
			#for( j := 0 to @elements( base_c )-1 )
				str1 theOp 
					#if( chCase )
						@uppercase( base_c[j], 0 ),
					#else
						base_c[j],
					#endif
			#endfor
		];
		tempVal
	#endmacro
	
	#macro results( theName, chCase, theOp );
		?theName	:boolean[] :=
		[
			#for( i := 0 to @elements( base_c )-1 )
				#if( chCase )
				
					oneRow( @uppercase( base_c[i], 0), true, theOp ),
					
				#else
				
					oneRow(base_c[i], false, theOp ),
					
				#endif
				
			#endfor
		]
		
	#endmacro
	
	results( eqResults_c, false, =  );				
	results( neResults_c, false, <> );				
	results( leResults_c, false, <= );				
	results( geResults_c, false, >= );				
	results( ltResults_c, false, <  );				
	results( gtResults_c, false, >  );
					
	results( ieqResults_c, true, =  );				
	results( ineResults_c, true, <> );				
	results( ileResults_c, true, <= );				
	results( igeResults_c, true, >= );				
	results( iltResults_c, true, <  );				
	results( igtResults_c, true, >  );				
				
				
static
	index		:int32;
	index2		:int32;
	index3		:int32;
	index4		:int32;
	length		:int32;
	rslt		:int32;
	boolrslt	:boolean;
	intrslt		:int32;
	shortStr	:str.strvar(2);
	rsltStr		:str.strvar(256);
	rsltPtr		:string;
	
	base		:string[ @elements( base_c ) ] := base_c;
	
	eqResults	:boolean[ @elements( eqResults_c ) ] := eqResults_c;
	neResults	:boolean[ @elements( neResults_c ) ] := neResults_c;
	leResults	:boolean[ @elements( leResults_c ) ] := leResults_c;
	geResults	:boolean[ @elements( geResults_c ) ] := geResults_c;
	ltResults	:boolean[ @elements( ltResults_c ) ] := ltResults_c;
	gtResults	:boolean[ @elements( gtResults_c ) ] := gtResults_c;

	ieqResults	:boolean[ @elements( ieqResults_c ) ] := ieqResults_c;
	ineResults	:boolean[ @elements( ineResults_c ) ] := ineResults_c;
	ileResults	:boolean[ @elements( ileResults_c ) ] := ileResults_c;
	igeResults	:boolean[ @elements( igeResults_c ) ] := igeResults_c;
	iltResults	:boolean[ @elements( iltResults_c ) ] := iltResults_c;
	igtResults	:boolean[ @elements( igtResults_c ) ] := igtResults_c;


begin strcmp_test;

	str.ile( "ccc", "Hello World" );
	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.eq( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, eqResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.eq(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", eqResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.eq(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.eq( NULL, "" );
		str.eq( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.eq(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.eq(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.eq succeeded!" nl );

	
	
	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ne( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, neResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ne(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", neResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ne(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ne( NULL, "" );
		str.ne( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ne(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ne(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ne succeeded!" nl );

	
	
	////////


	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.le( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, leResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.le(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", leResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.le(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.le( NULL, "" );
		str.le( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.le(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.le(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.le succeeded!" nl );

	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ge( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, geResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ge(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", geResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ge(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ge( NULL, "" );
		str.ge( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ge(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ge(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ge succeeded!" nl );

	
	
	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.lt( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, ltResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.lt(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", ltResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.lt(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.lt( NULL, "" );
		str.lt( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.lt(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.lt(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.lt succeeded!" nl );

	
	
	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.gt( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, gtResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.gt(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", gtResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.gt(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.gt( NULL, "" );
		str.gt( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.gt(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.gt(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.gt succeeded!" nl );

	
	
	
	
	////////





	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ieq( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, ieqResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ieq(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", ieqResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ieq(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ieq( NULL, "" );
		str.ieq( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ieq(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ieq(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ieq succeeded!" nl );

	
	
	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ine( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, ineResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ine(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", ineResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ine(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ine( NULL, "" );
		str.ine( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ine(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ine(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ine succeeded!" nl );

	
	
	////////


	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ile( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, ileResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ile(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", ileResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ile(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ile( NULL, "" );
		str.ile( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ile(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ile(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ile succeeded!" nl );

	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ige( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, igeResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ige(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", igeResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ige(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ige( NULL, "" );
		str.ige( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ige(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ige(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ige succeeded!" nl );

	
	
	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.ilt( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, iltResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.ilt(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", iltResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ilt(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.ilt( NULL, "" );
		str.ilt( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.ilt(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.ilt(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.ilt succeeded!" nl );

	
	
	
	
	////////

	try
	
		for( mov( 0, ecx ); ecx < @elements( base_c ); inc( ecx )) do
		
			mov( ecx, index );
			for( mov( 0, edx ); edx < @elements( base_c ); inc( edx )) do
			
				mov( edx, index2 );
				str.igt( base[ecx*4], base[edx*4] );
				mov( 0, eax );
				adc( 0, al );
				mov( al, boolrslt );
				
				intmul( @elements( base_c ), ecx, ebx );
				add( edx, ebx );
				mov( ebx, index3 );
				
				cmp( al, igtResults[ebx] );
				if( @ne ) then
				
					raise( exStr );
					
				endif; 
			
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		mov( index3, ebx );
	  	stderr.put
		(
			"*************************************************" nl
			"str.igt(1) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"base[index] = '", base[ecx*4], "'" nl
			"base[index2]= '", base[edx*4], "'" nl
			"Expected ", igtResults[ebx], nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.igt(1) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	try
	
		str.igt( NULL, "" );
		str.igt( "", NULL );
	
	  	stderr.put
		(
			"*************************************************" nl
			"str.igt(2) failed! Expected ex.AttemptToDerefNULL" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is expected
		
	  anyexception
	  
	  	stderr.put
		(
			"*************************************************" nl
			"str.igt(2) failed! Unexpected exception, eax = $", eax, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
			  
	endtry;
	stderr.put( "str.igt succeeded!" nl );

	
	
	
	
end strcmp_test;

													