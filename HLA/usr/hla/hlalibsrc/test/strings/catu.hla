program fputu_test;
#include( "stdlib.hhf" )

var
	Handle		:string;
	i			:int32;
	
begin fputu_test;

	
	str.alloc( 512*1024 );
	mov( eax, Handle );
	
	conv.setUnderscores( true );
	str.catu128Size( Handle, 10_000_000_000_000_000_000, 0, '.' );
	str.cats( Handle, nl );
	

	conv.setUnderscores( true );

	str.catu8( Handle, 0 );
	str.cats( Handle, nl );
	str.catu8( Handle, 10 );
	str.cats( Handle, nl );
	str.catu8( Handle, 200 );
	str.cats( Handle, nl );
	str.catu8( Handle, $7f );
	str.cats( Handle, nl );
	str.catu8( Handle, $80 );
	str.cats( Handle, nl );
	str.catu8( Handle, $FF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );

	for( mov( -20, i); i<=20; inc(i)) do

		str.catu8Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu8Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu8Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu8Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );

	str.catu16( Handle, 0 );
	str.cats( Handle, nl );
	str.catu16( Handle, $7fff );
	str.cats( Handle, nl );
	str.catu16( Handle, $8000 );
	str.cats( Handle, nl );
	str.catu16( Handle, $FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );
	
	for( mov( -20, i); i<=20; inc(i)) do

		str.catu16Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 1000, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 10000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );


	str.catu32( Handle, 0 );
	str.cats( Handle, nl );
	str.catu32( Handle, $7fff_ffff );
	str.cats( Handle, nl );
	str.catu32( Handle, $8000_0000 );
	str.cats( Handle, nl );
	str.catu32( Handle, $FFFF_FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );
	
	for( mov( -20, i); i<=20; inc(i)) do

		str.catu32Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 10_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 100_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 10_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 100_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );


	str.catu64( Handle, 0 );
	str.cats( Handle, nl );
	str.catu64( Handle, $7fff_ffff_ffff_ffff );
	str.cats( Handle, nl );
	str.catu64( Handle, $8000_0000_0000_0000 );
	str.cats( Handle, nl );
	str.catu64( Handle, $FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );

	for( mov( -28, i); i<=28; inc(i)) do

		str.catu64Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );

	str.catu128( Handle, 0 );
	str.cats( Handle, nl );
	str.catu128( Handle, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	str.cats( Handle, nl );
	str.catu128( Handle, $8000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl );
	str.catu128( Handle, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );


	for( mov( -44, i); i<=44; inc(i)) do

		str.catu128Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );



	conv.setUnderscores( false );

	str.catu8( Handle, 0 );
	str.cats( Handle, nl );
	str.catu8( Handle, $7f );
	str.cats( Handle, nl );
	str.catu8( Handle, $80 );
	str.cats( Handle, nl );
	str.catu8( Handle, $FF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );

	for( mov( -20, i); i<=20; inc(i)) do

		str.catu8Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu8Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu8Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu8Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );

	str.catu16( Handle, 0 );
	str.cats( Handle, nl );
	str.catu16( Handle, $7fff );
	str.cats( Handle, nl );
	str.catu16( Handle, $8000 );
	str.cats( Handle, nl );
	str.catu16( Handle, $FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );
	
	for( mov( -20, i); i<=20; inc(i)) do

		str.catu16Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 1000, i, '.' );
		str.cats( Handle, nl );
		str.catu16Size( Handle, 10000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );


	str.catu32( Handle, 0 );
	str.cats( Handle, nl );
	str.catu32( Handle, $7fff_ffff );
	str.cats( Handle, nl );
	str.catu32( Handle, $8000_0000 );
	str.cats( Handle, nl );
	str.catu32( Handle, $FFFF_FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );

	
	for( mov( -20, i); i<=20; inc(i)) do

		str.catu32Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 10_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 100_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 10_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 100_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu32Size( Handle, 1_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );


	str.catu64( Handle, 0 );
	str.cats( Handle, nl );
	str.catu64( Handle, $7fff_ffff_ffff_ffff );
	str.cats( Handle, nl );
	str.catu64( Handle, $8000_0000_0000_0000 );
	str.cats( Handle, nl );
	str.catu64( Handle, $FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl );
	str.cats( Handle, nl );

	for( mov( -24, i); i<=24; inc(i)) do

		str.catu64Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 10_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 100_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu64Size( Handle, 1_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );

	str.catu128( Handle, 0 );
	str.cats( Handle, nl );
	str.catu128( Handle, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	str.cats( Handle, nl );
	str.catu128( Handle, $8000_0000_0000_0000_0000_0000_0000_0000 );
	str.cats( Handle, nl );
	str.catu128( Handle, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	str.cats( Handle, nl );

	for( mov( -44, i); i<=44; inc(i)) do

		str.catu128Size( Handle, 0, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.catu128Size( Handle, 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		str.cats( Handle, nl );
		str.cats( Handle, nl );

	endfor;
	str.cats( Handle, nl );

	mov( Handle, ebx );
	mov( (type str.strRec [ebx]).length, ecx );
	while( ecx > 4096 ) do
	
		stdout.write( [ebx], 4096 );
		sub( 4096, ecx );
		add( 4096, ebx );
		
	endwhile;
	if( ecx > 0 ) then
	
		stdout.write( [ebx], ecx );
		
	endif;

end fputu_test;

													