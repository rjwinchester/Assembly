program strcset_test;
#include( "stdlib.hhf" )
												 
	
const		
	exStr	:= $8000;
	
				
	insertions_c	:string[32] :=
			[
				#for( i:=0 to 31 )
					@strset( '*', i ),
				#endfor
			];
			
	insertees_c	:string[32] :=
				[
					#for( i := 0 to 31 )
						@strset( '#', i ),
					#endfor
				];
	
	insertResults_c :string[32,32] :=
				[
					#for( i := 0 to 31 )
						#for( j := 0 to 31 )
							@insert( insertees_c[i], j, insertions_c[j] ),
						#endfor
					#endfor
				];
				
				
			
	deleteees_c	:string[32] :=
				[
					#for( i := 0 to 31 )
						@strset( '#', i ),
					#endfor
				];
	
	deleteResults_c :string[32,32] :=
				[
					#for( i := 0 to 31 )
						#for( j := 0 to 31 )
							@delete( deleteees_c[i], i, j ),
						#endfor
					#endfor
				];
				
static
	dynPtr	:dword;
	freePtr	:dword;
	index	:int32;
	index2	:int32;
	rslt	:int32;
	length	:int32;
	rsltStr	:str.strvar(256);
	rsltPtr	:string;
				
	insertions		:string[32] := insertions_c;
	insertees		:string[32] := insertees_c;
	insertResults	:string[ 32,32 ] := insertResults_c;	
	
	deleteees		:string[32] := deleteees_c;
	deleteResults	:string[ 32,32 ] := deleteResults_c;	
	

	
begin strcset_test;

	///////////////////////////////////////////////////////////////////////////////
	//
	// Test str.insert here
	
	try
	
		for( mov( 0, ecx ); ecx < 32; inc( ecx )) do
		
			for( mov( 0, edx ); edx < 32; inc( edx )) do
		
				mov( ecx, index );
				mov( edx, index2 );
				
				str.cpy( insertees[ecx*4], rsltStr );
				str.insert3( insertions[edx*4], edx, rsltStr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( insertResults[eax*4], rsltStr );
				je insertOk3;
					raise( exStr );
				insertOk3:
				
				
				str.cpy( insertees[ecx*4], rsltStr );
				str.insert( insertions[edx*4], edx, rsltStr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( insertResults[eax*4], rsltStr );
				je insertOk3a;
					raise( exStr );
				insertOk3a:
				
				
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		intmul( 32, ecx, eax );
		add( edx, eax );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert3(a) failed!" nl
			"Index = ", index, nl 
			"Index2 = ", index2, nl 
			"Insertee = ", insertees[ecx*4], nl
			"Insertion= ", insertions[edx*4], nl
			"Should be= ", insertResults[eax*4], nl
			"Was      = ", rsltStr, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert3(a), unexpected exception! EAX=", EAX, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.insert3( NULL, 0, rsltStr );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert3(b) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert3(b), unexpected exception!, EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.insert3( rsltStr, 0, NULL );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert3(c) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
						  
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert3(c), unexpected exception! EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	stdout.put( "str.insert3 succeeded!" nl );		
	
	
	
	
	try
	
		for( mov( 2, ecx ); ecx < 32; inc( ecx )) do
		
			for( mov( 1, edx ); edx < 32; inc( edx )) do
		
				mov( ecx, index );
				mov( edx, index2 );
				str.insert4( insertions[edx*4], edx, insertees[ecx*4], rsltStr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( insertResults[eax*4], rsltStr );
				je insertOk4;
					raise( exStr );
				insertOk4:
				
				
				str.insert( insertions[edx*4], edx, insertees[ecx*4], rsltStr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( insertResults[eax*4], rsltStr );
				je insertOk4a;
					raise( exStr );
				insertOk4a:
				
				
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		intmul( 32, ecx, eax );
		add( edx, eax );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(a) failed!" nl
			"Index = ", index, nl 
			"Index2 = ", index2, nl 
			"Insertee = ", insertees[ecx*4], nl
			"Insertion= ", insertions[edx*4], nl
			"Should be= ", insertResults[eax*4], nl
			"Was      = ", rsltStr, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(a), unexpected exception! EAX=", EAX, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.insert4( NULL, 0, rsltStr, rsltStr );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(b) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(b), unexpected exception!, EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.insert4( rsltStr, 0, NULL, rsltStr );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(c) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(c), unexpected exception! EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	
	try
	
		str.insert4( rsltStr, 0, rsltStr, NULL );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(d) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.insert4(d), unexpected exception! EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	stdout.put( "str.insert4 succeeded!" nl );		
	
	
	
	
	try
	
		for( mov( 0, ecx ); ecx < 32; inc( ecx )) do
		
			for( mov( 0, edx ); edx < 32; inc( edx )) do
		
				mov( ecx, index );
				mov( edx, index2 );
				
				str.a_insert( insertions[edx*4], edx, insertees[ecx*4] );
				mov( eax, freePtr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( insertResults[eax*4], freePtr );
				je insertOka;
					raise( exStr );
				insertOka:
				str.free( freePtr );
				
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		intmul( 32, ecx, eax );
		add( edx, eax );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_insert(a) failed!" nl
			"Index = ", index, nl 
			"Index2 = ", index2, nl 
			"Insertee = ", insertees[ecx*4], nl
			"Insertion= ", insertions[edx*4], nl
			"Should be= ", insertResults[eax*4], nl
			"Was      = ", rsltStr, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_insert(a), unexpected exception! EAX=", EAX, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	

	try
	
		str.a_insert( NULL, 0, rsltStr );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_insert(d) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_insert(d), unexpected exception!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.a_insert( rsltStr, 0, NULL );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_insert(e) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_insert(e), unexpected exception!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	stdout.put( "str.a_insert succeeded!" nl );		
			

			
			

	///////////////////////////////////////////////////////////////////////////////
	//
	// Test str.delete here
	
	try
	
		for( mov( 0, ecx ); ecx < 32; inc( ecx )) do
		
			for( mov( 0, edx ); edx < 32; inc( edx )) do
		
		
				mov( ecx, index );
				
				str.cpy( deleteees[ecx*4], rsltStr );
				str.delete( rsltStr, ecx, edx );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( deleteResults[eax*4], rsltStr );
				je deleteOk3;
					raise( exStr );
				deleteOk3:
								
				str.cpy( deleteees[ecx*4], rsltStr );
				str.delete3( rsltStr, ecx, edx );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( deleteResults[eax*4], rsltStr );
				je deleteOk3a;
					raise( exStr );
				deleteOk3a:
				
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		intmul( 32, ecx, eax );
		add( edx, eax );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete3(a) failed!" nl
			"Index = ", index, nl 
			"deleteee = ", deleteees[ecx*4], nl
			"Should be= ", deleteResults[eax*4], nl
			"Was      = ", rsltStr, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete3(a), unexpected exception! EAX=", EAX, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	
	try
	
		str.delete3( NULL, 0, 0 );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete3(b) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete3(b), unexpected exception!, EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	stdout.put( "str.delete3 succeeded!" nl );		


	try
	
		for( mov( 0, ecx ); ecx < 32; inc( ecx )) do
		
			for( mov( 0, edx ); edx < 32; inc( edx )) do
		
		
				mov( ecx, index );
				mov( edx, index2 );
				str.delete( deleteees[ecx*4], ecx, edx, rsltStr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( deleteResults[eax*4], rsltStr );
				je deleteOk4;
					raise( exStr );
				deleteOk4:
								
				str.delete4( deleteees[ecx*4], ecx, edx, rsltStr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( deleteResults[eax*4], rsltStr );
				je deleteOk4a;
					raise( exStr );
				deleteOk4a:
								
				
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		intmul( 32, ecx, eax );
		add( edx, eax );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete4(a) failed!" nl
			"Index = ", index, nl 
			"Index2= ", index2, nl
			"deleteee = ", deleteees[ecx*4], nl
			"Should be= ", deleteResults[eax*4], nl
			"Was      = ", rsltStr, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete4(a), unexpected exception! EAX=", EAX, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.delete4( rsltStr, 0, 0, NULL );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete4(c) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete4(c), unexpected exception! EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	stdout.put( "str.delete4 succeeded!" nl );		

	try
	
		for( mov( 0, ecx ); ecx < 32; inc( ecx )) do
		
			for( mov( 0, edx ); edx < 32; inc( edx )) do
		
				mov( ecx, index );				
				mov( edx, index2 );
				str.a_delete( deleteees[ecx*4], ecx, edx );
				mov( eax, freePtr );
				intmul( 32, ecx, eax );
				add( edx, eax );
				str.eq( deleteResults[eax*4], freePtr );
				je deleteOk2;
					raise( exStr );
				deleteOk2:
				str.free( freePtr );
				
			endfor;
			
		endfor;
		
	  exception( exStr )

		mov( index, ecx );
		mov( index2, edx );
		intmul( 32, ecx, eax );
		add( edx, eax );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_delete(a) failed!" nl
			"Index = ", index, nl
			"Index2= ", index2, nl 
			"deleteee = ", deleteees[ecx*4], nl
			"Should be= '", deleteResults[eax*4], "'" nl
			"Was      = '", (type string freePtr), "'" nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_delete(a), unexpected exception! EAX=", EAX, nl
			"Index1 = ", index, nl 
			"Index2 = ", index2, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.delete4( NULL, 0, 0, rsltStr );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete4(b) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.delete4(b), unexpected exception!, EAX=", eax, nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;

	try
	
		str.a_delete( NULL, 0, 0 );
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_delete(d) did not catch NULL reference!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  exception( ex.AttemptToDerefNULL )
	  
	  	// This is the case we expect
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"str.a_delete(d), unexpected exception!" nl 
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endtry;
	stdout.put( "str.a_delete succeeded!" nl );		
			

			
			
			
end strcset_test;

													