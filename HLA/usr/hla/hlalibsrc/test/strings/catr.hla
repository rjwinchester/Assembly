program catr_test;
#include( "stdlib.hhf" )

static
	handle	:string;
	r32		:real32 := 0.0;
	r64		:real64 := 0.0;
	r80		:real80 := 0.0;
	r32a	:real32 := 1.0;
	r64a	:real64 := 1.0;
	r80a	:real80 := 1.0;
	r32b	:real32 := 1.0e-6;
	r64b	:real64 := 1.0e-15;
	r80b	:real80 := 1.0e-18;
	r80c	:real80 := 1.0e-18;
	r80d	:real80 := 1.0e-18;
	r80pi	:real80;


	
begin catr_test;


	str.alloc( 16 * 1024 ); 
	mov( eax, handle );

	str.cats( handle, "Outputting zeros:" nl nl );
	str.catr32( handle, r32, 6, 2 );
	str.cats( handle, nl );

	str.catr64( handle, r64, 8, 4 );
	str.cats( handle, nl );

	str.catr80( handle, r80, 10, 6 );
	str.cats( handle, nl );
	str.cats( handle, nl );
	str.cats( handle, nl );

	str.cats( handle, "Real32 Powers of Ten: " nl nl );
	for( mov( -6, ecx ); (type int32 ecx) < 0; inc( ecx )) do

		str.catr32( handle, r32b, 11, 6 );
		str.cats( handle, nl );

		fld( r32b );
		fld( 10.0 );
		fmulp();
		fstp( r32b );

	endfor;

	fld1();
	fstp( r32b );
	for( mov( 0, ecx ); ecx < 10; inc( ecx )) do

		str.catr32( handle, r32b, 14, 2 );
		str.cats( handle, nl );

		fld( r32b );
		fld( 10.0 );
		fmulp();
		fstp( r32b );

	endfor;
	str.cats( handle, nl );
	str.cats( handle, nl );
	str.cats( handle, nl );


	str.cats( handle, "Real64 Powers of Ten: " nl nl );
	for( mov( -15, ecx ); (type int32 ecx) < 0; inc( ecx )) do

		str.catr64( handle, r64b, 18, 15 );
		str.cats( handle, nl );

		fld( r64b );
		fld( 10.0 );
		fmulp();
		fstp( r64b );

	endfor;

	fld1();
	fstp( r64b );
	for( mov( 0, ecx ); ecx < 15; inc( ecx )) do

		str.catr64( handle, r64b, 32, 15 );
		str.cats( handle, nl );

		fld( r64b );
		fld( 10.0 );
		fmulp();
		fstp( r64b );

	endfor;
	str.cats( handle, nl );
	str.cats( handle, nl );
	str.cats( handle, nl );


	str.cats( handle, "Real80 Powers of Ten: " nl nl );
	for( mov( -18, ecx ); (type int32 ecx) < 0; inc( ecx )) do

		str.catr80( handle, r80b, 21, 14 );
		str.cats( handle, nl );

		fld( r80b );
		fld( 10.0 );
		fmulp();
		fstp( r80b );

	endfor;

	fld1();
	fstp( r80b );
	for( mov( 0, ecx ); ecx < 18; inc( ecx )) do

		str.catr80( handle, r80b, 21, 1 );
		str.cats( handle, nl );

		fld( r80b );
		fld( 10.0 );
		fmulp();
		fstp( r80b );

	endfor;
	str.cats( handle, nl );
	str.cats( handle, nl );
	str.cats( handle, nl );



	str.cats( handle, "Real80 Digit Sums: " nl nl );
	fld( r80c );
	fstp( r80b );
	for( mov( 0, ecx ); ecx < 18; inc( ecx )) do

		str.catr80( handle, r80b, 21, 14 );
		str.cats( handle, nl );

		fld( r80b );
		fld( 10.0 );
		fmulp();

		fld( r80c );
		fld( r80d );
		faddp();
		fld( st0 );
		fstp( r80d );
		faddp();
		fstp( r80b );

	endfor;
	str.cats( handle, nl );
	str.cats( handle, nl );
	str.cats( handle, nl );




	// Output values in a field width that is too small so
	// we can test the "####" output:

	str.catr32( handle, 123456789.0, 10, 4 );
	str.cats( handle, nl );
	str.catr64( handle, 123456789.0, 10, 4 );
	str.cats( handle, nl );
	str.catr80( handle, 123456789.0, 10, 4 );
	str.cats( handle, nl );

	stdout.put( handle );

end catr_test;

													