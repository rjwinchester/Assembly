program cat_test;
#include( "stdlib.hhf" )

const
	endl	:text := "#$0d #$0a";
	
static
	s	:string;
	s2	:string := "string";
	s3	:str.strvar(64);
	
	bool1	:boolean := true;
	bool0	:boolean := false;
	
	u8		:uns8 := 8;
	u16		:uns16 := 16;
	u32		:uns32 := 32;
	u64		:uns64 := 64;
	u128	:uns128 := 128;
	
	b		:byte := $b;
	w		:word := $c;
	d		:dword := $d;
	q		:qword := $e;
	tb		:tbyte := $f;
	l		:lword := $10;
	
	i8		:int8   := -8;
	i16		:int16  := -16;
	i32		:int32  := -32;
	i64		:int64  := -64;
	i128	:int128 := -128;
	
	_char	:char	:= 'c';
	
	r32		:real32	:= 32.0;
	r64		:real64 := 64.0;
	r80		:real80 := 80.0;
	
	zs		:zstring := "zstring";
	
	cst		:cset := {'a'..'z'};
		

begin cat_test;


	str.alloc( 256 * 1024 ); 
	mov( eax, s );

 	for( mov(1, ch); ch < 128; inc(ch)) do
	
		str.catc( s, ch );
		str.cats( s, endl );
		
	endfor;
	
	for( mov( -16, edx ); (type int32 edx) < 16; inc( edx )) do
	
		for( mov('A', ch); ch <= 'C'; inc(ch)) do
		
			str.catcSize( s, ch, edx, '.' );
			str.cats( s, endl );
			
		endfor;
		
	endfor;
	
	for( mov(1, ch); ch < 128; inc(ch)) do
	
		str.catc( s, ch );
		
	endfor;
	str.cats( s, endl );
	str.cats( s, endl );
	
	str.cats( s, s2 );
	str.cats( s, endl );
	str.cats( s, endl );
	
	for( mov( -16, edx ); (type int32 edx) < 16; inc( edx )) do
	
		str.catsSize( s, s2, edx, '.' );
		str.cats( s, endl );
		
	endfor;
	str.cats( s, endl );
	
	str.catzs( s, zs );
	str.cats( s, endl );
	str.cats( s, endl );
	for( mov( -16, edx ); (type int32 edx) < 16; inc( edx )) do
	
		str.catzsSize( s, zs, edx, '.' );
		str.cats( s, endl );
		
	endfor;
	str.cats( s, endl );
	
	str.put( s3, "Testing str.put" endl );
	str.cats( s, s3 );
	str.cats( s, endl );
	
	str.put2
	(
		s,
		bool1, ',' endl
	);
	str.put2
	(
		s,
		bool0, ',' endl
	);
	str.put2
	(
		s,
		u8, ',' endl
	);
	str.put2
	(
		s,
		u16, ',' endl
	);
	str.put2
	(
		s,
		u32, ',' endl
	);
	str.put2
	(
		s,
		u64, ',' endl
	);
	str.put2
	(
		s,
		u128, ',' endl
	);
	str.put2
	(
		s,
		i8, ',' endl
	);
	str.put2
	(
		s,
		i16, ',' endl
	);
	str.put2
	(
		s,
		i32, ',' endl
	);
	str.put2
	(
		s,
		i64, ',' endl
	);
	str.put2
	(
		s,
		i128, ',' endl
	);
	str.put2
	(
		s,
		b, ',' endl
	);
	str.put2
	(
		s,
		w, ',' endl
	);
	str.put2
	(
		s,
		d, ',' endl
	);
	str.put2
	(
		s,
		q, ',' endl
	);
	str.put2
	(
		s,
		tb, ',' endl
	);
	str.put2
	(
		s,
		l, ',' endl
	);
	str.put2
	(
		s,
		_char, ',' endl
	);
	str.put2
	(
		s,
		s2, ',' endl
	);
	str.put2
	(
		s,
		zs, ',' endl
	);
	str.put2
	(
		s,
		cst, ',' endl endl
	);

	for( mov( -16, edx ); (type int32 edx) < 16; inc( edx )) do
	
		str.put2
		(
			s,
			u8:edx, ',' endl
		);
		str.put2
		(
			s,
			u16:edx, ',' endl
		);
		str.put2
		(
			s,
			u32:edx, ',' endl
		);
		str.put2
		(
			s,
			u64:edx, ',' endl
		);
		str.put2
		(
			s,
			u128:edx, ',' endl
		);
		str.put2
		(
			s,
			i8:edx, ',' endl
		);
		str.put2
		(
			s,
			i16:edx, ',' endl
		);
		str.put2
		(
			s,
			i32:edx, ',' endl
		);
		str.put2
		(
			s,
			i64:edx, ',' endl
		);
		str.put2
		(
			s,
			i128:edx, ',' endl
		);
		str.put2
		(
			s,
			b:edx, ',' endl
		);
		str.put2
		(
			s,
			w:edx, ',' endl
		);
		str.put2
		(
			s,
			d:edx, ',' endl
		);
		str.put2
		(
			s,
			q:edx, ',' endl
		);
		str.put2
		(
			s,
			tb:edx, ',' endl
		);
		str.put2
		(
			s,
			l:edx, ',' endl
		);
		str.put2
		(
			s,
			_char:edx, ',' endl
		);
		str.put2
		(
			s,
			s2:edx, ',' endl
		);
		str.put2
		(
			s,
			zs:edx, ',' endl endl
		);
		
	endfor;
	str.put2( s, endl );

	// Negative field widths for real numbers are illegal (and don't make sense)
	// so test real output down here.
	
	for( mov( 1, edx ); edx < 20; inc( edx )) do
	
		str.put2
		(
			s,
			
			r32, ',' endl
		);
		str.put2
		(
			s,
			r32:edx, ',' endl
		);
		str.put2
		(
			s,
			r32:edx:2, ',' endl
		);
		str.put2
		(
			s,
			r64, ',' endl
		);
		str.put2
		(
			s,
			r64:edx, ',' endl
		);
		str.put2
		(
			s,
			r64:edx:3, ',' endl
		);
		str.put2
		(
			s,
			r80, ',' endl
		);
		str.put2
		(
			s,
			r80:edx, ',' endl
		);
		str.put2
		(
			s,
			r80:edx:4, ',' endl
		);
	
	endfor;
	str.put2( s, endl );

	stdout.put( s );
	

end cat_test;

													