program subSecs_test;
#include( "stdlib.hhf" )

static
	baseTime	:time.timerec;
	subTime		:time.timerec;
	curTime		:time.timerec;
	hours		:uns16;
	mins		:uns8;
	secs		:uns8;
	seconds		:uns32;
	seconds2	:uns32;
	days		:int32;
	days2		:int32;
	
		
begin subSecs_test;
	
	for( mov( 0, hours ); hours < 24; add( 8, hours )) do
	
		for( mov( 0, mins ); mins < 60; add( 6, mins )) do
		
			for( mov( 0, secs ); secs < 60; add( 5, secs )) do
			
				mov( secs, al );
				mov( al, baseTime.secs );
				mov( mins, al );
				mov( al, baseTime.mins );
				mov( hours, ax );
				mov( ax, baseTime.hours );
				
				movzx( hours, eax );
				movzx( mins, ebx );
				intmul( 60, eax );
				add( ebx, eax );
				movzx( secs, ebx );
				intmul( 60, eax );
				add( ebx, eax );
				mov( eax, seconds2 );
				
				for( mov( 0, seconds ); seconds < 60*60*24*4; inc( seconds )) do
				
					mov( 0, days );
					mov( seconds2, eax );
					sub( seconds, eax );
					if( @s ) then
					
						neg( eax );
						xor( edx, edx );
						div( 24*60*60, edx:eax );
						inc( eax );
						mov( eax, days );
						
					endif;
					mov( baseTime, ebx );
					mov( ebx, subTime );
					time.subSecs( seconds, subTime );
					mov( eax, days2 );
					
					cmp( eax, days );
					jne timeSubSecsFailed1;
					
					// Compute the expected time
					
					movzx( hours, eax );
					intmul( 60, eax );
					movzx( mins, edx );
					add( edx, eax );
					intmul( 60, eax );
					movzx( secs, edx );
					add( edx, eax );
					
					sub( seconds, eax );
					if( @ns ) then
					
						xor( edx, edx );
						div( 60, edx:eax );
						mov( dl, curTime.secs );
						xor( edx, edx );
						div( 60, edx:eax );
						mov( dl, curTime.mins );
						xor( edx, edx );
						div( 24, edx:eax );
						mov( dx, curTime.hours );
						
					else
					
						// Compute [seconds mod (24*60*60)]:
						
						neg( eax );
						xor( edx, edx );
						div( 24*60*60, edx:eax );
						
						neg( edx );
						mov( 60*60*24, eax );
						add( edx, eax );
						
						// Compute the number of seconds (mod)
						// and the number of minutes (quotient):
						
						xor( edx, edx );
						div( 60, edx:eax );
						mov( dl, curTime.secs );
						
						// Compute the number of minutes (mod)
						// and the number of hours (quotient):
						
						xor( edx, edx );
						div( 60, edx:eax );
						mov( dl, curTime.mins );
						mov( ax, curTime.hours );
						
					endif;

					mov( subTime, eax );
					cmp( eax, curTime );
					jne timeSubSecsFailed2;
					
				endfor;
				
			endfor;
			
		endfor;
		
	endfor;
			
	stderr.put( "time.subSecs succeeded!" nl );
	os.exitProcess(0);
	
timeSubSecsFailed2:
	mov( 2, bl );
	jmp timeSubSecsFailed;
	
timeSubSecsFailed1:
	mov( 1, bl );
	
timeSubSecsFailed:
	stderr.put
	( 
		nl nl 
		"***************************************************" 
		nl
		"time.subSecs failed! (", (type uns8 bl), ")", nl,
		"hours = ", hours, " minutes = ", mins, " secs = ", secs, nl,
		"Time= ",
		(type uns16 baseTime.hours),
		":",
		(type uns8 baseTime.mins),
		":",
		(type uns8 baseTime.secs ),
		" - ",
		seconds,
		" Seconds", nl
		"subtime = ",
		(type uns16 subTime.hours),
		":",
		(type uns8 subTime.mins),
		":",
		(type uns8 subTime.secs ),
		nl,
		"curTime= ",
		(type uns16 curTime.hours),
		":",
		(type uns8 curTime.mins),
		":",
		(type uns8 curTime.secs ),
		nl,
		"Days = ", days,
		" Days2 = ", days2,
		nl 
	);
	stdout.put( "Press Enter to Continue: " );
	stdin.readLn();
	os.exitProcess(1);
					
end subSecs_test;

													