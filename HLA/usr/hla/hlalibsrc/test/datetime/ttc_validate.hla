program validate_test;
#include( "stdlib.hhf" )

static
	baseTime	:time.timerec;
	endTime		:time.timerec;
	
	tc			:timeClass;	
	
begin validate_test;


	mov( 0, baseTime );
	mov( 59, endTime.secs );
	mov( 59, endTime.mins );
	mov( 25, endTime.hours );
	tc.create();
	
	while( mov( baseTime, eax ) <= (type dword endTime) ) do
	
		begin continueTest;
	
			mov( baseTime.hours, bx );
			if( bx in 0..23 ) then
			
				mov( baseTime.mins, cl );
				if( cl in 0..59 ) then
				
					mov( baseTime.secs, cl );
					if( cl in 0..59 ) then
					
						mov( baseTime, eax );
						mov( eax, tc.theTime );
						try
						
							tc.validate();
							
						  anyexception
					
							stderr.put
							( 
								nl nl 
								"***************************************************" 
								nl
								"timeClass.validate failed!", nl,
								"Time= '",
								(type uns8 baseTime.hours),
								":",
								(type uns8 baseTime.mins),
								":",
								(type uns16 baseTime.secs ),
								nl
							);
							stdout.put( "Press Enter to Continue: " );
							stdin.readLn();
							os.exitProcess(1);
							
						endtry;
						exit continueTest;
						
					endif;
					

				endif;
				
				
			endif;
		
			try
			
				mov( baseTime, eax );
				mov( eax, tc.theTime );
				tc.validate();
				
			  unprotected
			  
				jmp badDate;
				
			  exception( ex.InvalidTime )
			  
			  	/* This is the expected case */
				
			  anyexception
			  
			  	jmp badDate;
				
			endtry;
		
		end continueTest;
		add( 1, baseTime.secs );
		adc( 0, baseTime.mins );
		adc( 0, baseTime.hours );
		
	endwhile;
	stderr.put( "time.validate succeeded!" nl );
	os.exitProcess(0);
		
badDate:
	stderr.put
	( 
		nl nl 
		"***************************************************" nl
		"timeClass.validate should have failed!", nl,
		"Time= '",
		(type uns8 baseTime.hours),
		":",
		(type uns8 baseTime.mins),
		":",
		(type uns16 baseTime.secs ),
		nl
	);
	stdout.put( "Press Enter to Continue: " );
	stdin.readLn();
	os.exitProcess(1);

end validate_test;

													