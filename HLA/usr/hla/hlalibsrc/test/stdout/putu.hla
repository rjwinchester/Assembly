program fputu_test;
#include( "stdlib.hhf" )

var
	i			:int32;
	
begin fputu_test;

	
	
	conv.setUnderscores( true );
	stdout.putu128Size( 10_000_000_000_000_000_000, 0, '.' );
	stdout.newln();
	
	

	conv.setUnderscores( true );

	stdout.putu8( 0 );
	stdout.newln();
	stdout.putu8( 10 );
	stdout.newln();
	stdout.putu8( 200 );
	stdout.newln();
	stdout.putu8( $7f );
	stdout.newln();
	stdout.putu8( $80 );
	stdout.newln();
	stdout.putu8( $FF );
	stdout.newln();
	stdout.newln();

	for( mov( -20, i); i<=20; inc(i)) do

		stdout.putu8Size( 0, i, '.' );
		stdout.newln();
		stdout.putu8Size( 1, i, '.' );
		stdout.newln();
		stdout.putu8Size( 10, i, '.' );
		stdout.newln();
		stdout.putu8Size( 100, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();

	stdout.putu16( 0 );
	stdout.newln();
	stdout.putu16( $7fff );
	stdout.newln();
	stdout.putu16( $8000 );
	stdout.newln();
	stdout.putu16( $FFFF );
	stdout.newln();
	stdout.newln();
	
	for( mov( -20, i); i<=20; inc(i)) do

		stdout.putu16Size( 0, i, '.' );
		stdout.newln();
		stdout.putu16Size( 1, i, '.' );
		stdout.newln();
		stdout.putu16Size( 10, i, '.' );
		stdout.newln();
		stdout.putu16Size( 100, i, '.' );
		stdout.newln();
		stdout.putu16Size( 1000, i, '.' );
		stdout.newln();
		stdout.putu16Size( 10000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();


	stdout.putu32( 0 );
	stdout.newln();
	stdout.putu32( $7fff_ffff );
	stdout.newln();
	stdout.putu32( $8000_0000 );
	stdout.newln();
	stdout.putu32( $FFFF_FFFF );
	stdout.newln();
	stdout.newln();
	
	for( mov( -20, i); i<=20; inc(i)) do

		stdout.putu32Size( 0, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1, i, '.' );
		stdout.newln();
		stdout.putu32Size( 10, i, '.' );
		stdout.newln();
		stdout.putu32Size( 100, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 10_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 100_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1_000_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 10_000_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 100_000_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1_000_000_000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();


	stdout.putu64( 0 );
	stdout.newln();
	stdout.putu64( $7fff_ffff_ffff_ffff );
	stdout.newln();
	stdout.putu64( $8000_0000_0000_0000 );
	stdout.newln();
	stdout.putu64( $FFFF_FFFF_FFFF_FFFF );
	stdout.newln();
	stdout.newln();

	for( mov( -28, i); i<=28; inc(i)) do

		stdout.putu64Size( 0, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();

	stdout.putu128( 0 );
	stdout.newln();
	stdout.putu128( $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	stdout.newln();
	stdout.putu128( $8000_0000_0000_0000_0000_0000_0000_0000 );
	stdout.newln();
	stdout.putu128( $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	stdout.newln();
	stdout.newln();


	for( mov( -44, i); i<=44; inc(i)) do

		stdout.putu128Size( 0, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();



	conv.setUnderscores( false );

	stdout.putu8( 0 );
	stdout.newln();
	stdout.putu8( $7f );
	stdout.newln();
	stdout.putu8( $80 );
	stdout.newln();
	stdout.putu8( $FF );
	stdout.newln();
	stdout.newln();

	for( mov( -20, i); i<=20; inc(i)) do

		stdout.putu8Size( 0, i, '.' );
		stdout.newln();
		stdout.putu8Size( 1, i, '.' );
		stdout.newln();
		stdout.putu8Size( 10, i, '.' );
		stdout.newln();
		stdout.putu8Size( 100, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();

	stdout.putu16( 0 );
	stdout.newln();
	stdout.putu16( $7fff );
	stdout.newln();
	stdout.putu16( $8000 );
	stdout.newln();
	stdout.putu16( $FFFF );
	stdout.newln();
	stdout.newln();
	
	for( mov( -20, i); i<=20; inc(i)) do

		stdout.putu16Size( 0, i, '.' );
		stdout.newln();
		stdout.putu16Size( 1, i, '.' );
		stdout.newln();
		stdout.putu16Size( 10, i, '.' );
		stdout.newln();
		stdout.putu16Size( 100, i, '.' );
		stdout.newln();
		stdout.putu16Size( 1000, i, '.' );
		stdout.newln();
		stdout.putu16Size( 10000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();


	stdout.putu32( 0 );
	stdout.newln();
	stdout.putu32( $7fff_ffff );
	stdout.newln();
	stdout.putu32( $8000_0000 );
	stdout.newln();
	stdout.putu32( $FFFF_FFFF );
	stdout.newln();
	stdout.newln();

	
	for( mov( -20, i); i<=20; inc(i)) do

		stdout.putu32Size( 0, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1, i, '.' );
		stdout.newln();
		stdout.putu32Size( 10, i, '.' );
		stdout.newln();
		stdout.putu32Size( 100, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 10_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 100_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1_000_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 10_000_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 100_000_000, i, '.' );
		stdout.newln();
		stdout.putu32Size( 1_000_000_000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();


	stdout.putu64( 0 );
	stdout.newln();
	stdout.putu64( $7fff_ffff_ffff_ffff );
	stdout.newln();
	stdout.putu64( $8000_0000_0000_0000 );
	stdout.newln();
	stdout.putu64( $FFFF_FFFF_FFFF_FFFF );
	stdout.newln();
	stdout.newln();

	for( mov( -24, i); i<=24; inc(i)) do

		stdout.putu64Size( 0, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 10_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 100_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu64Size( 1_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();

	stdout.putu128( 0 );
	stdout.newln();
	stdout.putu128( $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	stdout.newln();
	stdout.putu128( $8000_0000_0000_0000_0000_0000_0000_0000 );
	stdout.newln();
	stdout.putu128( $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	stdout.newln();

	for( mov( -44, i); i<=44; inc(i)) do

		stdout.putu128Size( 0, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.putu128Size( 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		stdout.newln();
		stdout.newln();

	endfor;
	stdout.newln();

end fputu_test;

													