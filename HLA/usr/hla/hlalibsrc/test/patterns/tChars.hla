// This program tests the (case sensitive) pattern-matching character functions.


program patChars_test;
#include( "stdlib.hhf" )
	
begin patChars_test;

	
	//	procedure peekChar( c:char );

	// Test positive check:
	
	pat.match( "abc" );
	
		pat.peekChar( 'a' );
		pat.oneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.peekChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:
	
	pat.match( "abc" );
	
		pat.peekChar( 'A' );
		pat.oneChar( 'a' );
		
	  	stderr.put( "pat.peekChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.peekChar( 'a' );
		pat.matchStr( "ab" );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.peekChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.peekChar succeeded!" nl );

	
	
	//	procedure oneChar( c:char );


	// Test positive check:
	
	pat.match( "abc" );
	
		pat.oneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:
	
	pat.match( "abc" );
	
		pat.oneChar( 'A' );
		pat.oneChar( 'a' );
		
	  	stderr.put( "pat.oneChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.oneChar( 'a' );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.oneChar succeeded!" nl );

	
	//	procedure upToChar( c:char );
	


	// Test positive check:
	
	pat.match( "abc" );
	
		pat.upToChar( 'c' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.upToChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:
	
	pat.match( "abc" );
	
		pat.upToChar( 'A' );
		pat.upToChar( 'a' );
		
	  	stderr.put( "pat.upToChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.upToChar( 'a' );
		pat.upToChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.upToChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.upToChar succeeded!" nl );

	
	
	//	procedure zeroOrOneChar( c:char );

	// Test positive check:
	
	pat.match( "abc" );
	
		pat.zeroOrOneChar( 'a' );
		pat.zeroOrOneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrOneChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:
	
	pat.match( "abc" );
	
		pat.zeroOrOneChar( 'A' );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.zeroOrOneChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.zeroOrOneChar( 'a' );
		pat.zeroOrOneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrOneChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.zeroOrOneChar succeeded!" nl );

	
	
	//	procedure l_ZeroOrOneChar( c:char );

	// Test positive check:
	
	pat.match( "abc" );
	
		pat.l_ZeroOrOneChar( 'a' );
		pat.l_ZeroOrOneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ZeroOrOneChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:

	pat.match( "abc" );
	
		pat.l_ZeroOrOneChar( 'A' );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_ZeroOrOneChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.l_ZeroOrOneChar( 'a' );
		pat.l_ZeroOrOneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ZeroOrOneChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_ZeroOrOneChar succeeded!" nl );

	
	
	
	
	
	
	//	procedure zeroOrMoreChar( c:char );

	// Test positive check:
	
	pat.match( "aaabc" );
	
		pat.zeroOrMoreChar( 'a' );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMoreChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test positive check:
	
	pat.match( "bc" );
	
		pat.zeroOrMoreChar( 'a' );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMoreChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:
	
	pat.match( "abc" );
	
		pat.zeroOrMoreChar( 'A' );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.zeroOrMoreChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.zeroOrMoreChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMoreChar failed(3a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.zeroOrMoreChar( 'a' );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMoreChar failed(3b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.zeroOrMoreChar succeeded!" nl );

	
	
	//	procedure l_ZeroOrMoreChar( c:char );

	// Test positive check:
	
	pat.match( "abc" );
	
		pat.l_ZeroOrMoreChar( 'a' );	// Matches one char
		pat.l_ZeroOrMoreChar( 'a' );	// Matches zero chars
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ZeroOrMoreChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "abc" );
	
		pat.matchStr( "ab" );			
		pat.zeroOrOneChar( 'c' );
		pat.l_ZeroOrMoreChar( 'c' );	// Matches zero chars
		pat.oneChar( 'c' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ZeroOrMoreChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:

	pat.match( "abc" );
	
		pat.l_ZeroOrMoreChar( 'A' );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_ZeroOrMoreChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.zeroOrMoreCset( {'a','b'});
		pat.l_ZeroOrMoreChar( 'a' );
		pat.oneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ZeroOrMoreChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_ZeroOrMoreChar succeeded!" nl );

	
	
	
	
	
	
	
	
	
	
	
	//	procedure oneOrMoreChar( c:char );

	// Test positive check:
	
	pat.match( "aaabc" );
	
		pat.oneOrMoreChar( 'a' );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMoreChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "abc" );
	
		pat.oneOrMoreChar( 'A' );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.oneOrMoreChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.oneOrMoreChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMoreChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	//	procedure l_OneOrMoreChar( c:char );

	// Test positive check:
	
	pat.match( "abc" );
	
		pat.l_OneOrMoreChar( 'a' );	// Matches one char
		pat.l_OneOrMoreChar( 'b' );	// Matches one char
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_OneOrMoreChar failed(1)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	// Test negative check:

	pat.match( "abc" );
	
		pat.l_OneOrMoreChar( 'A' );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_OneOrMoreChar failed(2)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	// Test with back-tracking
	
	
	pat.match( "ababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.l_OneOrMoreChar( 'a' );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_OneOrMoreChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_OneOrMoreChar succeeded!" nl );

	
	
	
	
	//	procedure exactlyNChar( c:char; n:uns32 );
	

	// Test positive check:
	
	pat.match( "aaabc" );
	
		pat.exactlyNChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.exactlyNChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "bc" );
	
		pat.exactlyNChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.exactlyNChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	pat.match( "aaaabc" );
	
		pat.exactlyNChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.exactlyNChar failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.exactlyNChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.exactlyNChar succeeded!" nl );
	

	
	
	
	
	//	procedure firstNChar( c:char; n:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.firstNChar( 'a', 3 );
		pat.oneChar( 'a' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.firstNChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.firstNChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.firstNChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "bc" );
	
		pat.firstNChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.firstNChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	pat.match( "aaaabc" );
	
		pat.firstNChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.firstNChar failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.firstNChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.firstNChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.firstNChar succeeded!" nl );
	

	
	
	
	
	//	procedure norLessChar( c:char; n:uns32 );
	

	// Test positive check:
	
	pat.match( "aabc" );
	
		pat.norLessChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norLessChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.norLessChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norLessChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.norLessChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norLessChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "a" );
	
		pat.norLessChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norLessChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "b" );
	
		pat.norLessChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norLessChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "aabc" );
	
		pat.norLessChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.norLessChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	pat.match( "aaaabc" );
	
		pat.norLessChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.norLessChar failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.norLessChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norLessChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.norLessChar succeeded!" nl );
	

	
	
	
	
	//	procedure l_NorLessChar( c:char; n:uns32 );
	

	// Test positive check:
	
	pat.match( "aabc" );
	
		pat.l_NorLessChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorLessChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.l_NorLessChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorLessChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.l_NorLessChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorLessChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "a" );
	
		pat.l_NorLessChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorLessChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "b" );
	
		pat.l_NorLessChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorLessChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "aabc" );
	
		pat.l_NorLessChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_NorLessChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	pat.match( "aaaabc" );
	
		pat.l_NorLessChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_NorLessChar failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.l_NorLessChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorLessChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_NorLessChar succeeded!" nl );
	
	
	
	
	
	
	
	

	//	procedure norMoreChar( c:char; n:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.norMoreChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norMoreChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.norMoreChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norMoreChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	pat.match( "aaa" );
	
		pat.norMoreChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norMoreChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaaaaaaaa" );
	
		pat.norMoreChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norMoreChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaaaaaaab" );
	
		pat.norMoreChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norMoreChar failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "aabc" );
	
		pat.norMoreChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.norMoreChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.norMoreChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.norMoreChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.norMoreChar succeeded!" nl );
	

	
	
	
	
	//	procedure l_NorMoreChar( c:char; n:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.l_NorMoreChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorMoreChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.l_NorMoreChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorMoreChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.l_NorMoreChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorMoreChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaaaaaaaa" );
	
		pat.l_NorMoreChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorMoreChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaaaaaaab" );
	
		pat.l_NorMoreChar( 'a', 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorMoreChar failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "aabc" );
	
		pat.l_NorMoreChar( 'a', 3 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_NorMoreChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.l_NorMoreChar( 'a', 1 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NorMoreChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_NorMoreChar succeeded!" nl );
	
	
	
	
	
	
	
	

	//	procedure ntoMChar( c:char; n:uns32; m:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.ntoMChar( 'a', 3,4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.ntoMChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.ntoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.ntoMChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	pat.match( "aaa" );
	
		pat.ntoMChar( 'a', 2, 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.ntoMChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.ntoMChar( 'a', 3, 4 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.ntoMChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaab" );
	
		pat.ntoMChar( 'a', 3, 4 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.ntoMChar failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "aabc" );
	
		pat.ntoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.ntoMChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.ntoMChar( 'a', 1,2 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.ntoMChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.ntoMChar succeeded!" nl );
	
	
	
	
	
	
	
	

	//	procedure l_NtoMChar( c:char; n:uns32; m:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.l_NtoMChar( 'a', 3,4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NtoMChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.l_NtoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NtoMChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	pat.match( "aaa" );
	
		pat.l_NtoMChar( 'a', 2, 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NtoMChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaa" );
	
		pat.l_NtoMChar( 'a', 3, 4 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NtoMChar failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaab" );
	
		pat.l_NtoMChar( 'a', 3, 4 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NtoMChar failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;


	// Test negative check:
	
	pat.match( "aabc" );
	
		pat.l_NtoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_NtoMChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "abababab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.l_NtoMChar( 'a', 1,2 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_NtoMChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_NtoMChar succeeded!" nl );
	

	
	
	
	

	//	procedure exactlyNtoMChar( c:char; n:uns32; m:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.exactlyNtoMChar( 'a', 3,4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNtoMChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.exactlyNtoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNtoMChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	pat.match( "aaa" );
	
		pat.exactlyNtoMChar( 'a', 2, 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNtoMChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	


	// Test negative check:
	
	pat.match( "aaaaabc" );
	
		pat.exactlyNtoMChar( 'a', 2, 4 );
		
	  	stderr.put( "pat.exactlyNtoMChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	pat.match( "aabc" );
	
		pat.exactlyNtoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.exactlyNtoMChar failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "aaaaaaaaab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.exactlyNtoMChar( 'a', 2,3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.exactlyNtoMChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.exactlyNtoMChar succeeded!" nl );





	//	procedure l_ExactlyNtoMChar( c:char; n:uns32; m:uns32 );
	

	// Test positive check:
	
	pat.match( "aaaabc" );
	
		pat.l_ExactlyNtoMChar( 'a', 3,4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ExactlyNtoMChar failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	
	pat.match( "aaabc" );
	
		pat.l_ExactlyNtoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ExactlyNtoMChar failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	pat.match( "aaa" );
	
		pat.l_ExactlyNtoMChar( 'a', 2, 3 );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ExactlyNtoMChar failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;

	


	// Test negative check:
	
	pat.match( "aaaaabc" );
	
		pat.l_ExactlyNtoMChar( 'a', 2, 4 );
		
	  	stderr.put( "pat.l_ExactlyNtoMChar failed(2a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	pat.match( "aabc" );
	
		pat.l_ExactlyNtoMChar( 'a', 3, 4 );
		pat.oneChar( 'b' );
		
	  	stderr.put( "pat.l_ExactlyNtoMChar failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect
		
	pat.endmatch;
	
	
	
	// Test with back-tracking
	
	pat.match( "aaaaaaaaab" );
	
		pat.oneOrMoreCset( {'a','b'});
		pat.l_ExactlyNtoMChar( 'a', 2,3 );
		pat.oneChar( 'b' );
		
	  pat.if_failure
	  
	  	stderr.put( "pat.l_ExactlyNtoMChar failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "pat.l_ExactlyNtoMChar succeeded!" nl );

	
	stderr.put( "tChars test suite succeeded!" nl );

end patChars_test;

													