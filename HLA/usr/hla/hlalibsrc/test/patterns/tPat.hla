// This program tests the pattern-matching macros.


program patPat_test;
#include( "stdlib.hhf" )
	
static
	success		:boolean;
	align(4);
	extraction	:str.strvar(256);
	
begin patPat_test;

	// pat.onePat
	
	stdout.put( "Testing pat.onePat" nl );
	
	// Positive test
	
	pat.match( "aaab" )
	
		pat.onePat
		
			pat.matchStr( "aaab" );
			
		  pat.alternate
		  
		  	stderr.put( "pat.onePat failed(1a)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		pat.endOnePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.onePat failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.onePat
		
			pat.matchStr( "bbbb" );
			
		  pat.alternate
		  
		  	pat.matchStr( "aaab" );
			
		  pat.alternate
		  
		  	stderr.put( "pat.onePat failed(1c)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		pat.endOnePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.onePat failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.onePat
		
			pat.matchStr( "aaab" );
			
		pat.endOnePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.onePat failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	// Failure test:
	
	pat.match( "aaab" )
	
		pat.onePat
		
			pat.matchStr( "bbbbb" );
		  	stderr.put( "pat.onePat failed(2a)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		pat.endOnePat;
		  	
		
	  pat.if_failure
	  
		// This is what we expect.
			  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.onePat
		
		  	pat.matchStr( "bbbbb" );
			
		  pat.alternate
		  
		  	// This is what we expect
			
		pat.endOnePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.onePat failed(2b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	// Test with back tracking
	
	pat.match( "aaab" )
	
		pat.oneOrMoreChar( 'a' );
		pat.onePat
		
			pat.matchStr( "a" );
			
		pat.endOnePat;
		pat.oneChar( 'b' );
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.onePat failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "onePat test succeeded!" nl );
	
	
	
	
	

	

	// pat.zeroOrOnePat
	
	stdout.put( "Testing pat.zeroOrOnePat" nl );
	
	// Positive test
	
	mov( false, success );
	pat.match( "aaab" )
	
		pat.zeroOrOnePat
		
			pat.matchStr( "aaab" );
			mov( true, success );
		  
			
		pat.endZeroOrOnePat;
		if( !success ) then
		
		  	stderr.put( "pat.zeroOrOnePat failed(1a)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
		
		endif;
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrOnePat failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	

	pat.match( "aaab" )
	
		mov( false, success );
		pat.zeroOrOnePat
		
			pat.matchStr( "bbbb" );
			mov( true, success );			
		  
		pat.endZeroOrOnePat;
		if( success ) then
		
		  	stderr.put( "pat.zeroOrOnePat failed(1c)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrOnePat failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.zeroOrOnePat
		
			pat.matchStr( "aaab" );
			
		pat.endZeroOrOnePat;
		pat.EOS();
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrOnePat failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	// Failure test:
	
	// There are no failure conditions.	
	
	
	// Test with back tracking
	
	pat.match( "aaab" )
	
		pat.oneOrMoreChar( 'a' );
		pat.zeroOrOnePat
		
			pat.matchStr( "a" );
			
		pat.endZeroOrOnePat;
		pat.oneChar( 'b' );
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrOnePat failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "zeroOrOnePat test succeeded!" nl );
	
	
	
	
	

	

	// pat.zeroOrMorePat
	
	stdout.put( "Testing pat.zeroOrMorePat" nl );
	
	// Positive test
	
	pat.match( "aaab" )
	
		pat.zeroOrMorePat
		
			pat.matchStr( "aaab" );
			
		pat.endZeroOrMorePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMorePat failed(1a)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.zeroOrMorePat
		
			pat.matchStr( "aaab" );
			
		pat.endZeroOrMorePat;
		pat.EOS();
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMorePat failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.zeroOrMorePat
		
			pat.matchStr( "a" );
			
		pat.endZeroOrMorePat;
		pat.oneChar( 'b' );
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMorePat failed(1c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	// Failure test:
	
	// There are no failure conditions.	
	
	
	// Test with back tracking
	
	pat.match( "aaab" )
	
		pat.oneOrMoreChar( 'a' );
		pat.zeroOrMorePat
		
			pat.matchStr( "a" );
			
		pat.endZeroOrMorePat;
		pat.oneChar( 'b' );
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.zeroOrMorePat failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "zeroOrMorePat test succeeded!" nl );
	
	

	

	// pat.oneOrMorePat
	
	stdout.put( "Testing pat.oneOrMorePat" nl );
	
	// Positive test
	
	pat.match( "aaab" )
	
		pat.oneOrMorePat
		
			pat.matchStr( "aaab" );
			
		  pat.alternate
		  
		  	stderr.put( "pat.oneOrMorePat failed(1a)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		pat.endOneOrMorePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMorePat failed(1b)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.oneOrMorePat
		
			pat.matchStr( "bbbb" );
			
		  pat.alternate
		  
		  	pat.matchStr( "aaab" );
			
		  pat.alternate
		  
		  	stderr.put( "pat.oneOrMorePat failed(1c)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		pat.endOneOrMorePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMorePat failed(1d)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.oneOrMorePat
		
			pat.matchStr( "aaab" );
			
		pat.endOneOrMorePat;
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMorePat failed(1e)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.oneOrMorePat
		
			pat.matchStr( "a" );
			
		pat.endOneOrMorePat;
		pat.oneChar( 'b' );
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMorePat failed(1f)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	
	
	// Failure test:
	
	pat.match( "aaab" )
	
		pat.oneOrMorePat
		
			pat.matchStr( "bbbbb" );
		  	stderr.put( "pat.oneOrMorePat failed(2a)!" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		pat.endOneOrMorePat;
		  	
		
	  pat.if_failure
	  
		// This is what we expect.
			  
	pat.endmatch;
	
	pat.match( "aaab" )
	
		pat.oneOrMorePat
		
		  	pat.matchStr( "bbbbb" );
			
		pat.endOneOrMorePat;
		  	
	  	stderr.put( "pat.oneOrMorePat failed(2c)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	  pat.if_failure
	  
	  	// This is what we expect.
	  
	pat.endmatch;
	
	
	// Test with back tracking
	
	pat.match( "aaab" )
	
		pat.oneOrMoreChar( 'a' );
		pat.oneOrMorePat
		
			pat.matchStr( "a" );
			
		pat.endOneOrMorePat;
		pat.oneChar( 'b' );
		  	
		
	  pat.if_failure
	  
	  	stderr.put( "pat.oneOrMorePat failed(3)!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	  
	pat.endmatch;
	stderr.put( "oneOrMorePat test succeeded!" nl );
	

	stderr.put( "tPat test suite succeeded!" nl );

end patPat_test;

													