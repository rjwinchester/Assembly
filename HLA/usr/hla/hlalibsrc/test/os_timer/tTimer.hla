program tTimer;
#include( "stdlib.hhf" )
#include( "sleep.hhf" )

const
	delay_const	:= 100_000_000;
	
static
	chkpt	:qword;
	t1		:timer;
	pt		:pointer to timer;
	
begin tTimer;

	// It's a bit difficult to test the functionality of the timer
	// module in a portable fashion, so the following code simple calls
	// each function in this module just to verify that it doesn't crash.

	t1.create();
	
	t1.start();
	os.mSleep( 10 );
		
	t1.checkPoint();
	mov( eax, (type dword chkpt));
	mov( edx, (type dword chkpt[4]));
	os.mSleep( 10 );
		
	t1.stop();
	os.mSleep( 10 );
		
	t1.restart();
	os.mSleep( 100 );	
	t1.stop();
	
	// Surely at least 1ms has passed since the checkPoint and the stop:
	
	cmp( edx, (type dword chkpt[4]));
	if( @e ) then
	
		cmp( eax, (type dword chkpt));
		if( @e ) then
		
			stderr.put( "timer failed! Time should have elapsed!" nl );
			stderr.put( "edx:eax=   $", edx, eax, nl );
			stderr.put( "chkpt= $", (type qword chkpt), nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
	endif;
	
	
	timer.create();
	mov( esi, pt );
	pt.start();
	pt.stop();
	pt.restart();
	pt.checkPoint();
	pt.stop();
	free( pt );
	
	stderr.put( "tTimer test suite succeeded!" nl );	
	

end tTimer;
