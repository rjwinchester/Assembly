// tArithmetic-
//
//	Tests the following MATH module functions:
//
//	addq, addl, divq, divl, idivq, idivl, imodq, imodl, imulq, imull,
//	modq, modl, mulq, mull, negq, negl, subq, subl.

program tArithmetic;
#include( "stdlib.hhf" )

val
	
		
	
	pwrsOf2_128_c	:uns128[] :=
		[
			#for( i := 0 to 127 )
				1 << i,
			#endfor
		];
	
		
		
	divisors_128_c	:uns128[] :=
		[
			? i := 1;
			#while( i < 256 )
				i,
				?i := i + 1;
			#endwhile
			257,
			65535,
			65536,
			65537,
			16*1024*1024-1,
			16*1024*1024,
			16*1024*1024+1,
			4*1024*1024*1024-1,
			4*1024*1024*1024,
			4*1024*1024*1024+1,
			1*1024*1024*1024*1024*1024-1,
			1*1024*1024*1024*1024*1024,
			1*1024*1024*1024*1024*1024+1,
			1*1024*1024*1024*1024*1024*1024*1024-1,
			1*1024*1024*1024*1024*1024*1024*1024,
			1*1024*1024*1024*1024*1024*1024*1024+1,
		];
		
	idivisors_128_c	:int128[] :=
		[
			#for( i := 0 to @elements( divisors_128_c )-1)
				divisors_128_c[i],
			#endfor
			#for( i := 0 to @elements( divisors_128_c )-1)
				-divisors_128_c[i],
			#endfor
		];
		
	// Bison limitation! Cannot have thousands of entries in
	// an array constant. So we'll fill each element individually.
	
	
	
	
	quotients_128_c	:uns128[ 128 * @elements( divisors_128_c )];
			#for( i := 0 to 127 ) 
				#for( j := 0 to @elements( divisors_128_c )-1 )
				
					?quotients_128_c[ i*@elements( divisors_128_c ) + j] :=
						pwrsOf2_128_c[i] div divisors_128_c[j];
				
				#endfor
			#endfor				
	
	iquotients_128_c	:int128[ 128 * @elements( idivisors_128_c )];
			#for( i := 0 to 127 ) 
				#for( j := 0 to @elements( idivisors_128_c )-1 )
				
					?iquotients_128_c[ i*@elements( idivisors_128_c ) + j] :=
						pwrsOf2_128_c[i] div idivisors_128_c[j];
										
				#endfor
			#endfor				
	
	
	
static
	i64				:int64;
	u64				:uns64;
	result64		:uns64;
	iresult64		:int64;
	
	one64			:uns64 := 1;
	allOnes64		:uns64 := $FFFF_FFFF_FFFF_FFFF;
	
	i128			:int128;
	u128			:uns128;
	result128		:uns128;
	iresult128		:int128;
	
readonly

	pwrsOf2_128		:uns128[ @elements( pwrsOf2_128_c ) ] := pwrsOf2_128_c;

	divisors_128		:uns128[ @elements( divisors_128_c ) ] := divisors_128_c;
	quotients_128	:uns128[ @elements( quotients_128_c ) ] := quotients_128_c;
	
	idivisors_128	:int128[ @elements( idivisors_128_c ) ] := idivisors_128_c;
	iquotients_128	:int128[ @elements( iquotients_128_c ) ] := iquotients_128_c;
	
	

	
procedure cmp128( index:uns32; testVal1:lword; testVal2:lword; msg:string );
begin cmp128;

	mov( (type dword testVal1), eax );
	cmp( eax, (type dword testVal2));
	jne failed;
	mov( (type dword testVal1[4]), eax );
	cmp( eax, (type dword testVal2[4]));
	jne failed;
	mov( (type dword testVal1[8]), eax );
	cmp( eax, (type dword testVal2[8]));
	jne failed;
	mov( (type dword testVal1[12]), eax );
	cmp( eax, (type dword testVal2[12]));
	je succeeded;
	failed:
	
		stderr.put
		( 
			"Error: ", msg, nl
			"testVal1: ", testVal1, nl
			"testVal2: ", testVal2, nl
		);
		conv.setUnderscores( true );
		stderr.put
		(
			"index:    ", index, nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	succeeded:
	
end cmp128;

begin tArithmetic;
	
	
	// DIVL tests:
	
	for( mov( 0, edx ); edx < 128; inc( edx )) do
		
		for( mov( 0, ecx ); ecx < @elements( divisors_128 ); inc( ecx )) do
	
			lea( edi, [edx*2] );
			lea( esi, [ecx*2] );
			math.divl( pwrsOf2_128[edi*8], divisors_128[esi*8], result128 );
			intmul( @elements( divisors_128 ), edx, esi );
			add( ecx, esi );
			lea( esi, [esi*2] );  
			cmp128( edx, result128, quotients_128[ esi*8 ], "divl(1) failed!" );
			
		endfor;
		
	endfor;
	stderr.put( "divl tests succeeded!" nl );
	
	
	// IDIVL tests:
	
	for( mov( 0, edx ); edx < 63; inc( edx )) do
		
		for( mov( 0, ecx ); ecx < @elements( idivisors_128 ); inc( ecx )) do

			lea( edi, [edx*2] );
			lea( esi, [ecx*2] );
			math.idivl( pwrsOf2_128[edi*8], idivisors_128[esi*8], iresult128 );
			intmul( @elements( idivisors_128 ), edx, esi );
			add( ecx, esi );
			lea( esi, [esi*2] );  
			
			mov( edx, eax );
			intmul( 1000, eax );
			add( ecx, eax );  
			cmp128( eax, iresult128, iquotients_128[ esi*8 ], "idivl(1) failed!" );
			
		endfor;
		
	endfor;
	stderr.put( "idivl tests succeeded!" nl );
	
	
	
	
end tArithmetic;	