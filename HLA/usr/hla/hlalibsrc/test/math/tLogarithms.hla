// tLogrithms-
//
//	Tests the following MATH module functions:
//
//	exp, ln, log, tentox, twotox, ytox.

program tLog;
#include( "stdlib.hhf" )

const
	dataPts	:= 16384;
	
static
	r80Val		:real80;
	
	i32			:int32;
	r32			:real32;
	r64			:real64;
	r80			:real80;
	
	r32a		:real32;
	r64a		:real64;
	r80a		:real80;
	
	r32b		:real32;
	r64b		:real64;
	r80b		:real80;
	
	e32			:real32 := 2.71828182845904512;
	e64			:real64 := 2.71828182845904512;
	e80			:real80 := 2.71828182845904512;
	
	increment	:real80;
	numIncs		:real80 := real80(dataPts);
	
	
procedure testErr32( r1:real32; r2:real32; sigma:real80; msg:string );
static
	r80	:real80;
	
begin testErr32;

	fld( r1 );
	fld( r2 );
	fsubp();
	fabs();
	fld( sigma );
	fcomip( st0, st1 );
	fstp( r80 );
	if( @nae ) then
	
		stderr.put
		( 
			"Error: ", msg, nl 
			"R1=", r1, " / $", (type dword r1), nl 
			"R2=", r2, " / $", (type dword r2), nl
			"sigma=", sigma, nl
			"r80=", r80, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endif;
	
end testErr32;
	
	
procedure testErr64( r1:real64; r2:real64; sigma:real80; msg:string );
static
	r80	:real80;
	
begin testErr64;

	fld( r1 );
	fld( r2 );
	fsubp();
	fabs();
	fld( sigma );
	fcomip( st0, st1 );
	fstp( r80 );
	if( @nae ) then
	
		stderr.put
		( 
			"Error: ", msg, nl 
			"R1=", r1, " / $", (type dword r1), nl 
			"R2=", r2, " / $", (type dword r2), nl
			"sigma=", sigma, nl
			"r80=", r80, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endif;
	
end testErr64;
	
	
	
procedure testErr80( r1:real80; r2:real80; sigma:real80; msg:string );
static
	r80	:real80;
	
begin testErr80;

	fld( r1 );
	fld( r2 );
	fsubp();
	fabs();
	fld( sigma );
	fcomip( st0, st1 );
	fstp( r80 );
	if( @nae ) then
	
		stderr.put
		( 
			"Error: ", msg, nl 
			"R1=", r1, " / $", (type dword r1), nl 
			"R2=", r2, " / $", (type dword r2), nl
			"sigma=", sigma, nl
			"r80=", r80, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endif;
	
end testErr80;
	

begin tLog;

	// First, do some "basis" tests:
	
	math.exp32( 0.0 );
	fstp( r32 );
	testErr32( 1.0, r32, 1e-6, "exp(0.0) failed!" );
	
	math.exp32( 1.0 );
	fstp( r32 );
	testErr32( e32, r32, 1e-6, "exp(1.0) failed!" ); 	
	
	math.exp64( 0.0 );
	fstp( r64 );
	testErr64( 1.0, r64, 1e-12, "exp(0.0) failed!" );
	
	math.exp64( 1.0 );
	fstp( r64 );
	testErr64( e64, r64, 1e-12, "exp(1.0) failed!" ); 	
	
	math.exp80( 0.0 );
	fstp( r80 );
	testErr80( 1.0, r80, 1e-13, "exp(0.0) failed!" );
	
	math.exp80( 1.0 );
	fstp( r80 );
	testErr80( e80, r80, 1e-13, "exp(1.0) failed!" ); 	
	
	
	
	math.twoToX32( 0.0 );
	fstp( r32 );
	testErr32( 1.0, r32, 1e-6, "2**(0.0) failed!" );
	
	math.twoToX32( 1.0 );
	fstp( r32 );
	testErr32( 2.0, r32, 1e-6, "2**(1.0) failed!" ); 	
	
	math.twoToX64( 0.0 );
	fstp( r64 );
	testErr64( 1.0, r64, 1e-12, "2**(0.0) failed!" );
	
	math.twoToX64( 1.0 );
	fstp( r64 );
	testErr64( 2.0, r64, 1e-12, "2**(1.0) failed!" ); 	
	
	math.twoToX80( 0.0 );
	fstp( r80 );
	testErr80( 1.0, r80, 1e-13, "2**(0.0) failed!" );
	
	math.twoToX80( 1.0 );
	fstp( r80 );
	testErr80( 2.0, r80, 1e-13, "2**(1.0) failed!" ); 	
	
	
	
	math.tenToX32( 0.0 );
	fstp( r32 );
	testErr32( 1.0, r32, 1e-6, "10**(0.0) failed!" );
	
	math.tenToX32( 1.0 );
	fstp( r32 );
	testErr32( 10.0, r32, 1e-6, "10**(1.0) failed!" ); 	
	
	math.tenToX64( 0.0 );
	fstp( r64 );
	testErr64( 1.0, r64, 1e-12, "10**(0.0) failed!" );
	
	math.tenToX64( 1.0 );
	fstp( r64 );
	testErr64( 10.0, r64, 1e-12, "10**(1.0) failed!" ); 	
	
	math.tenToX80( 0.0 );
	fstp( r80 );
	testErr80( 1.0, r80, 1e-13, "10**(0.0) failed!" );
	
	math.tenToX80( 1.0 );
	fstp( r80 );
	testErr80( 10.0, r80, 1e-13, "10**(1.0) failed!" ); 	
	
	
	
	math.yToX32( 3.0, 0.0 );
	fstp( r32 );
	testErr32( 1.0, r32, 1e-6, "y**(0.0) failed!" );
	
	math.yToX32( 3.0, 1.0 );
	fstp( r32 );
	testErr32( 3.0, r32, 1e-6, "y**(1.0) failed!" ); 	
	
	math.yToX32( 3.0, 2.0 );
	fstp( r32 );
	testErr32( 9.0, r32, 1e-6, "y**(1.0) failed!" ); 	
	
	math.yToX64( 3.0, 0.0 );
	fstp( r64 );
	testErr64( 1.0, r64, 1e-12, "y**(0.0) failed!" );
	
	math.yToX64( 3.0, 1.0 );
	fstp( r64 );
	testErr64( 3.0, r64, 1e-12, "y**(1.0) failed!" ); 	
	
	math.yToX64( 3.0, 2.0 );
	fstp( r64 );
	testErr64( 9.0, r64, 1e-12, "y**(1.0) failed!" ); 	
	
	math.yToX80( 3.0, 0.0 );
	fstp( r80 );
	testErr80( 1.0, r80, 1e-13, "y**(0.0) failed!" );
	
	math.yToX80( 3.0, 1.0 );
	fstp( r80 );
	testErr80( 3.0, r80, 1e-13, "y**(1.0) failed!" ); 	
	
	math.yToX80( 3.0, 2.0 );
	fstp( r80 );
	testErr80( 9.0, r80, 1e-13, "y**(1.0) failed!" ); 	
	
	
	
	math.ln32( 1.0 );
	fstp( r32 );
	testErr32( 0.0, r32, 1e-6, "ln32(1.0) failed!" );
	
	math.ln32( e32 );
	fstp( r32 );
	testErr32( 1.0, r32, 1e-6, "ln32(e32) failed!" ); 	
	
	math.ln64( 1.0 );
	fstp( r64 );
	testErr64( 0.0, r64, 1e-12, "ln64(1.0) failed!" );
	
	math.ln64( e64 );
	fstp( r64 );
	testErr64( 1.0, r64, 1e-12, "ln64(e64) failed!" ); 	
	
	math.ln80( 1.0 );
	fstp( r80 );
	testErr80( 0.0, r80, 1e-13, "ln80(1.0) failed!" );
	
	math.ln80( e80 );
	fstp( r80 );
	testErr80( 1.0, r80, 1e-13, "ln80(e80) failed!" ); 	
	
	
	
	math.log32( 1.0 );
	fstp( r32 );
	testErr32( 0.0, r32, 1e-6, "log32(1.0) failed!" );
	
	math.log32( 10.0 );
	fstp( r32 );
	testErr32( 1.0, r32, 1e-6, "log32(10.0) failed!" ); 	
	
	math.log64( 1.0 );
	fstp( r64 );
	testErr64( 0.0, r64, 1e-12, "log64(1.0) failed!" );
	
	math.log64( 10.0 );
	fstp( r64 );
	testErr64( 1.0, r64, 1e-12, "log64(10.0) failed!" ); 	
	
	math.log80( 1.0 );
	fstp( r80 );
	testErr80( 0.0, r80, 1e-13, "log80(1.0) failed!" );
	
	math.log80( 10.0 );
	fstp( r80 );
	testErr80( 1.0, r80, 1e-13, "log80(10.0) failed!" ); 	
	
	stderr.put( "tLogarithm basis tests succeeded!" nl );
	
	
	// Okay, now that we've got the basis tests out of the way,
	// let's run a series of tests based on equivalence functions.
	
	// Test exp/ln here:
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r32 );
		
		math.exp32( r32 );
		fstp( r32a );
		math.ln32( r32a );
		fstp( r32b );
		
		testErr32( r32, r32b, 1e-5, "ln32(exp32(x)) failed!" );
		 
	endfor;
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r64 );
		
		math.exp64( r64 );
		fstp( r64a );
		math.ln64( r64a );
		fstp( r64b );
		
		testErr64( r64, r64b, 1e-12, "ln64(exp64(x)) failed!" );
		 
	endfor;
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r80 );
		
		math.exp80( r80 );
		fstp( r80a );
		math.ln80( r80a );
		fstp( r80b );
		
		testErr80( r80, r80b, 1e-13, "ln80(exp80(x)) failed!" );
		 
	endfor;
	stderr.put( "ln(exp) tests succeeded!" nl );
	
	
	
	// Test tenToX/log here:
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r32 );
		
		math.tenToX32( r32 );
		fstp( r32a );
		math.log32( r32a );
		fstp( r32b );
		
		testErr32( r32, r32b, 1e-5, "log32(tenToX32(x)) failed!" );
		 
	endfor;
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r64 );
		
		math.tenToX64( r64 );
		fstp( r64a );
		math.log64( r64a );
		fstp( r64b );
		
		testErr64( r64, r64b, 1e-12, "log64(tenToX64(x)) failed!" );
		 
	endfor;
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r80 );
		
		math.tenToX80( r80 );
		fstp( r80a );
		math.log80( r80a );
		fstp( r80b );
		
		testErr80( r80, r80b, 1e-13, "log80(tenToX80(x)) failed!" );
		 
	endfor;
	stderr.put( "log(tenToX) tests succeeded!" nl );
	
	
	
	
	
	// Test twoToX/lg here:
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r32 );
		
		math.twoToX32( r32 );
		fstp( r32a );
		
		fld( r32a );
		fyl2x();
		fstp( r32b );
		
		testErr32( r32, r32b, 1e-5, "fyl2x(twoToX32(x)) failed!" );
		 
	endfor;
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r64 );
		
		math.twoToX64( r64 );
		fstp( r64a );

		fld( r64a );
		fyl2x();
		fstp( r64b );
		
		testErr64( r64, r64b, 1e-12, "fyl2x(twoToX64(x)) failed!" );
		 
	endfor;
	
	for( mov( -dataPts, edx ); edx <= dataPts; inc( edx )) do
	
		mov( edx, i32 );
		fild( i32 );
		fdiv( 1000.0 );
		fstp( r80 );
		
		math.twoToX80( r80 );
		fstp( r80a );

		fld( r80a );
		fyl2x();
		fstp( r80b );
		
		testErr80( r80, r80b, 1e-13, "fyl2x(twoToX80(x)) failed!" );
		 
	endfor;
	stderr.put( "fyl2x(twoToX) tests succeeded!" nl );
	
	
	stderr.put( "tlogarithm tests succeeded!" nl );
	
end tLog;	