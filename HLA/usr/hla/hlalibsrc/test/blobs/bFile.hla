program bFile_test;
#include( "stdlib.hhf" )

readonly
	fileData	:string :=
					"a" #$d #$a "bc" #$d #$a "d ef" #$d #$a  
					#$d #$a "100"  #$d #$a;
	
var
	b1			:blob.blob;
	b2			:blob.blob;
	b3			:blob.blob;
	ba1			:blob.blob;
	bs			:blob.blob;
	bs2			:blob.blob;
	s			:string;
	
begin bFile_test;

	try
	
		blob.alloc( 8192 );
		mov( eax, b1 );
		blob.rcursor( b1 );
		if( eax <> 0 ) then
		
			stderr.put( "blob.alloc didn't set rcursor to zero." nl );
			raise( 0 );
			
		endif;
		blob.wcursor( b1 );
		if( eax <> 0 ) then
		
			stderr.put( "blob.alloc didn't set wcursor to zero." nl );
			raise( 0 );
			
		endif;
		
		blob.alloc( 8192 );
		mov( eax, b2 );
		
		blob.alloc( 8192 );
		mov( eax, b3 );
		
		blob.alloc( 8192 );
		mov( eax, bs );
		
		blob.alloc( 8192 );
		mov( eax, bs2 );
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.eq and blob.ne" nl );
		
		blob.strToBlob( fileData, bs );
		blob.strToBlob( fileData, b1 );
		if( blob.ne( bs, b1 ) ) then
		
			stderr.put( "blob.ne failed" nl );
			raise( 0 );
			
		endif;
		if( !blob.eq( bs, b1 ) ) then
		
			stderr.put( "blob.eq failed" nl );
			raise( 0 );
			
		endif;
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.load" nl );
		
		blob.load( "bgetc.wdata", b1 );
		if( blob.ne( bs, b1 ) ) then
		
			stderr.put( "blob.load failed" nl );
			raise( 0 );
			
		endif;
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.a_load" nl );
		
		blob.a_load( "bgetc.wdata" );
		mov( eax, ba1 );
		if( blob.ne( bs, ba1 ) ) then
		
			stderr.put( "blob.a_load failed" nl );
			raise( 0 );
			
		endif;
		blob.maxlen( ba1 );
		sub( 16, eax );			// alloc adds a 16-byte buffer.
		mov( eax, ebx );
		blob.length( ba1 );
		mov( eax, ecx );
		str.length( fileData );
		if( eax <> ebx || eax <> ecx ) then
		
			stderr.put( "blob.a_load did not allocate appropriate size" nl );
			stderr.put
			( 
				"maxLen: ", ebx, 
				" length: ", ecx, 
				" should be: ", eax, nl 
			);
			raise( 0 );
			
		endif; 
		blob.free( ba1 );
		
		
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.a_loadExtended" nl );
		
		blob.a_loadExtended( "bgetc.wdata", 24 );
		mov( eax, ba1 );
		if( blob.ne( bs, ba1 ) ) then
		
			stderr.put( "blob.a_loadExtended failed" nl );
			raise( 0 );
			
		endif;
		blob.maxlen( ba1 );
		sub( 40, eax );			// alloc adds a 16-byte buffer plus 24 bytes.
		mov( eax, ebx );
		blob.length( ba1 );
		mov( eax, ecx );
		str.length( fileData );
		if( eax <> ebx || eax <> ecx ) then
		
			stderr.put
			( 
				"blob.a_loadExtended did not allocate appropriate size" nl 
			);
			stderr.put
			( 
				"maxLen: ", ebx, 
				" length: ", ecx, 
				" should be: ", eax, nl 
			);
			raise( 0 );
			
		endif; 
		blob.free( ba1 );
		
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.appendFile" nl );
		
		blob.load( "bgetc.wdata", b1 );
		blob.appendFile( "bgetc.wdata", b1 );
		str.a_cat( fileData, fileData );
		mov( eax, s );
		blob.strToBlob( s, bs2 );
		if( blob.ne( bs2, b1 ) ) then
		
			stderr.put( "blob.appendFile failed" nl );
			raise( 0 );
			
		endif;
		
		
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.a_appendFile" nl );
		
		blob.load( "bgetc.wdata", b1 );
		blob.a_appendFile( "bgetc.wdata", b1 );
		mov( eax, ba1 );
		if( blob.ne( bs2, ba1 ) ) then
		
			stderr.put( "blob.a_appendFile failed" nl );
			raise( 0 );
			
		endif;
		blob.maxlen( ba1 );
		lea( ebx, [eax-16] );		// alloc adds a 16-byte buffer to the blob.
		blob.length( ba1 );
		mov( eax, ecx );
		str.length( s );
		if( eax <> ebx || eax <> ecx ) then
		
			stderr.put
			( 
				"blob.a_appendFile did not allocate appropriate size" nl 
			);
			stderr.put
			( 
				"maxLen: ", ebx, 
				" length: ", ecx, 
				" should be: ", eax, nl 
			);
			raise( 0 );
			
		endif; 
		blob.free( ba1 );
		
		
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.a_appendFileExtended" nl );
		
		blob.load( "bgetc.wdata", b1 );
		blob.a_appendFileExtended( "bgetc.wdata", b1, 24 );
		mov( eax, ba1 );
		if( blob.ne( bs2, ba1 ) ) then
		
			stderr.put( "blob.a_appendFileExtended failed" nl );
			raise( 0 );
			
		endif;
		blob.maxlen( ba1 );
		lea( ebx, [eax-40] );		// alloc adds a 16-byte buffer plus 24 bytes.
		blob.length( ba1 );
		mov( eax, ecx );
		str.length( s );
		if( eax <> ebx || eax <> ecx ) then
		
			stderr.put
			( 
				"blob.a_appendFileExtended did not allocate appropriate size" nl 
			);
			stderr.put
			( 
				"maxLen: ", ebx, 
				" length: ", ecx, 
				" should be: ", eax, nl 
			);
			raise( 0 );
			
		endif; 
		blob.free( ba1 );
		
		
		////////////////////////////////////////////////
		
		stdout.put( "Testing blob.save" nl );
		
		blob.load( "bgetc.wdata", b1 );
		blob.save( "bgetc.txt", b1 );
		blob.reset( b2 );
		blob.load( "bgetc.txt", b2 );
		if( blob.ne( b2, b1 ) ) then
		
			stderr.put( "blob.save failed" nl );
			raise( 0 );
			
		endif;
		
		
		
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"bFile failed!" nl
			"Data read did not match data expected in file" nl
			"Exception = ", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	stderr.put( "bFile succeeded!" nl );
	os.exitProcess(0);
			
end bFile_test;

													