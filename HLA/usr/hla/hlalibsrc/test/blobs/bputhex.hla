program bputhex_test;
#include( "stdlib.hhf" )

var
	b			:blob.blob;
	i			:int32;

static
	tbVal		:tbyte;
	tbVal2		:tbyte;
	
begin bputhex_test;

	blob.alloc( 1024*1024 );
	mov( eax, b );
	
	mov( $1234_5678, eax );
	mov( eax, (type dword tbVal ));
	mov( eax, (type dword tbVal[4] ));
	mov( $90ab, (type word tbVal[8] ));
	
	mov( eax, (type dword tbVal2));
	mov( 0, (type dword tbVal2[4]));
	mov( 0, (type word tbVal2[8])); 

	conv.setUnderscores( false );

	blob.puttb( b, tbVal );	
	blob.newln( b );
	blob.puttb( b, tbVal2 );	
	blob.newln( b );
	blob.newln( b );

	blob.puth80Size( b, tbVal, 30, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal, -30, '.' );	
	blob.newln( b );
	blob.newln( b );

	blob.puth80Size( b, tbVal2, 12, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal2, -12, '.' );	
	blob.newln( b );
	blob.newln( b );

	conv.setUnderscores( true );
	
	blob.puttb( b, tbVal );	
	blob.newln( b );
	blob.puttb( b, tbVal2 );	
	blob.newln( b );
	blob.puth80Size( b, tbVal, 30, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal, -30, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal2, 12, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal2, -12, '.' );	
	blob.newln( b );
	blob.newln( b );

	blob.putb( b, 0 );
	blob.newln( b );
	blob.putb( b, 1 );
	blob.newln( b );
	blob.putb( b, $7f );
	blob.newln( b );
	blob.putb( b, $80 );
	blob.newln( b );
	blob.putb( b, $FF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth8Size( b, $10, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putw( b, 0 );
	blob.newln( b );
	blob.putw( b, $10 );
	blob.newln( b );
	blob.putw( b, $200 );
	blob.newln( b );
	blob.putw( b, $7fff );
	blob.newln( b );
	blob.putw( b, $8000 );
	blob.newln( b );
	blob.putw( b, $FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putd( b, 0 );
	blob.newln( b );
	blob.putd( b, $10 );
	blob.newln( b );
	blob.putd( b, $200 );
	blob.newln( b );
	blob.putd( b, $3000 );
	blob.newln( b );
	blob.putd( b, $4_0000 );
	blob.newln( b );
	blob.putd( b, $50_0000 );
	blob.newln( b );
	blob.putd( b, $600_0000 );
	blob.newln( b );
	blob.putd( b, $7000_0000 );
	blob.newln( b );
	blob.putd( b, $7fff_ffff );
	blob.newln( b );
	blob.putd( b, $8000_0000 );
	blob.newln( b );
	blob.putd( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );
	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putq( b, 0 );
	blob.newln( b );
	blob.putq( b, $10 );
	blob.newln( b );
	blob.putq( b, $200 );
	blob.newln( b );
	blob.putq( b, $3000 );
	blob.newln( b );
	blob.putq( b, $4_0000 );
	blob.newln( b );
	blob.putq( b, $50_0000 );
	blob.newln( b );
	blob.putq( b, $600_0000 );
	blob.newln( b );
	blob.putq( b, $7000_0000 );
	blob.newln( b );
	blob.putq( b, $8_0000_0000 );
	blob.newln( b );
	blob.putq( b, $90_0000_0000 );
	blob.newln( b );
	blob.putq( b, $A00_0000_0000 );
	blob.newln( b );
	blob.putq( b, $B000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $C_0000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $D0_0000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $E00_0000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $F000_0000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putq( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puth64Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putl( b, 0 );
	blob.newln( b );
	blob.putl( b, $10 );
	blob.newln( b );
	blob.putl( b, $200 );
	blob.newln( b );
	blob.putl( b, $3000 );
	blob.newln( b );
	blob.putl( b, $4_0000 );
	blob.newln( b );
	blob.putl( b, $50_0000 );
	blob.newln( b );
	blob.putl( b, $600_0000 );
	blob.newln( b );
	blob.putl( b, $7000_0000 );
	blob.newln( b );
	blob.putl( b, $8_0000_0000 );
	blob.newln( b );
	blob.putl( b, $90_0000_0000 );
	blob.newln( b );
	blob.putl( b, $A00_0000_0000 );
	blob.newln( b );
	blob.putl( b, $B000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $C_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $D0_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $E00_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $F000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $1_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $20_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $300_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $4000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $5_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $60_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $700_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $8000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $9_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $A0_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $B00_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $C000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $D_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $E0_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $F00_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $1000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putl( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -40, i); i<=40; inc(i)) do

		blob.puth128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	conv.setUnderscores( false );


	blob.putb( b, 0 );
	blob.newln( b );
	blob.putb( b, $7f );
	blob.newln( b );
	blob.putb( b, $80 );
	blob.newln( b );
	blob.putb( b, $FF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth8Size( b, $10, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;

	blob.putw( b, 0 );
	blob.newln( b );
	blob.putw( b, $7fff );
	blob.newln( b );
	blob.putw( b, $8000 );
	blob.newln( b );
	blob.putw( b, $FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;

	blob.putd( b, 0 );
	blob.newln( b );
	blob.putd( b, $7fff_ffff );
	blob.newln( b );
	blob.putd( b, $8000_0000 );
	blob.newln( b );
	blob.putd( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putq( b, 0 );
	blob.newln( b );
	blob.putq( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putq( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.putq( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puth64Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putl( b, 0 );
	blob.newln( b );
	blob.putl( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putl( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putl( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );

	for( mov( -40, i); i<=40; inc(i)) do

		blob.puth128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );
	blob.newln( b );
	blob.newln( b );
	
	
	
	
	
	
	

	conv.setUnderscores( false );

	blob.puth80( b, tbVal );	
	blob.newln( b );
	blob.puth80( b, tbVal2 );	
	blob.newln( b );
	blob.newln( b );

	blob.puth80Size( b, tbVal, 30, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal, -30, '.' );	
	blob.newln( b );
	blob.newln( b );

	blob.puth80Size( b, tbVal2, 12, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal2, -12, '.' );	
	blob.newln( b );
	blob.newln( b );

	conv.setUnderscores( true );
	
	blob.puth80( b, tbVal );	
	blob.newln( b );
	blob.puth80( b, tbVal2 );	
	blob.newln( b );
	blob.puth80Size( b, tbVal, 30, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal, -30, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal2, 12, '.' );	
	blob.newln( b );
	blob.puth80Size( b, tbVal2, -12, '.' );	
	blob.newln( b );
	blob.newln( b );

	blob.puth8( b, 0 );
	blob.newln( b );
	blob.puth8( b, 1 );
	blob.newln( b );
	blob.puth8( b, $7f );
	blob.newln( b );
	blob.puth8( b, $80 );
	blob.newln( b );
	blob.puth8( b, $FF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth8Size( b, $10, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puth16( b, 0 );
	blob.newln( b );
	blob.puth16( b, $10 );
	blob.newln( b );
	blob.puth16( b, $200 );
	blob.newln( b );
	blob.puth16( b, $7fff );
	blob.newln( b );
	blob.puth16( b, $8000 );
	blob.newln( b );
	blob.puth16( b, $FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puth32( b, 0 );
	blob.newln( b );
	blob.puth32( b, $10 );
	blob.newln( b );
	blob.puth32( b, $200 );
	blob.newln( b );
	blob.puth32( b, $3000 );
	blob.newln( b );
	blob.puth32( b, $4_0000 );
	blob.newln( b );
	blob.puth32( b, $50_0000 );
	blob.newln( b );
	blob.puth32( b, $600_0000 );
	blob.newln( b );
	blob.puth32( b, $7000_0000 );
	blob.newln( b );
	blob.puth32( b, $7fff_ffff );
	blob.newln( b );
	blob.puth32( b, $8000_0000 );
	blob.newln( b );
	blob.puth32( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );
	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puth64( b, 0 );
	blob.newln( b );
	blob.puth64( b, $10 );
	blob.newln( b );
	blob.puth64( b, $200 );
	blob.newln( b );
	blob.puth64( b, $3000 );
	blob.newln( b );
	blob.puth64( b, $4_0000 );
	blob.newln( b );
	blob.puth64( b, $50_0000 );
	blob.newln( b );
	blob.puth64( b, $600_0000 );
	blob.newln( b );
	blob.puth64( b, $7000_0000 );
	blob.newln( b );
	blob.puth64( b, $8_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $90_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $A00_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $B000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $C_0000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $D0_0000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $E00_0000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $F000_0000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puth64( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puth64Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puth128( b, 0 );
	blob.newln( b );
	blob.puth128( b, $10 );
	blob.newln( b );
	blob.puth128( b, $200 );
	blob.newln( b );
	blob.puth128( b, $3000 );
	blob.newln( b );
	blob.puth128( b, $4_0000 );
	blob.newln( b );
	blob.puth128( b, $50_0000 );
	blob.newln( b );
	blob.puth128( b, $600_0000 );
	blob.newln( b );
	blob.puth128( b, $7000_0000 );
	blob.newln( b );
	blob.puth128( b, $8_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $90_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $A00_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $B000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $C_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $D0_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $E00_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $F000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $1_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $20_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $300_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $4000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $5_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $60_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $700_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $8000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $9_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $A0_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $B00_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $C000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $D_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $E0_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $F00_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $1000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puth128( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -40, i); i<=40; inc(i)) do

		blob.puth128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	conv.setUnderscores( false );


	blob.puth8( b, 0 );
	blob.newln( b );
	blob.puth8( b, $7f );
	blob.newln( b );
	blob.puth8( b, $80 );
	blob.newln( b );
	blob.puth8( b, $FF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth8Size( b, $10, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;

	blob.puth16( b, 0 );
	blob.newln( b );
	blob.puth16( b, $7fff );
	blob.newln( b );
	blob.puth16( b, $8000 );
	blob.newln( b );
	blob.puth16( b, $FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth16Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;

	blob.puth32( b, 0 );
	blob.newln( b );
	blob.puth32( b, $7fff_ffff );
	blob.newln( b );
	blob.puth32( b, $8000_0000 );
	blob.newln( b );
	blob.puth32( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -10, i); i<=10; inc(i)) do

		blob.puth32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth32Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puth64( b, 0 );
	blob.newln( b );
	blob.puth64( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puth64( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.puth64( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puth64Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth64Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puth128( b, 0 );
	blob.newln( b );
	blob.puth128( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puth128( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puth128( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );

	for( mov( -40, i); i<=40; inc(i)) do

		blob.puth128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.puth128Size( b, $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );
	blob.newln( b );
	blob.newln( b );

	

	blob.save( "bputhex.txt", b );

end bputhex_test;

													