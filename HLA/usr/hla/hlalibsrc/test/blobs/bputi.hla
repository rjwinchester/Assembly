program fputi_test;
#include( "stdlib.hhf" )

var
	b			:blob.blob;
	i			:int32;
	
begin fputi_test;

	blob.alloc( 1024*1024 );
	mov( eax, b );
	
	conv.setUnderscores( true );


	blob.puti8( b, 0 );
	blob.newln( b );
	blob.puti8( b, 127 );
	blob.newln( b );
	blob.puti8( b, -128 );
	blob.newln( b );
	blob.puti8( b, -1 );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puti8Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 100, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;

	blob.puti16( b, 0 );
	blob.newln( b );
	blob.puti16( b, $7fff );
	blob.newln( b );
	blob.puti16( b, $8000 );
	blob.newln( b );
	blob.puti16( b, $FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puti16Size( b, -10000, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -1000, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 1000, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 10000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;

	blob.puti32( b, 0 );
	blob.newln( b );
	blob.puti32( b, $7fff_ffff );
	blob.newln( b );
	blob.puti32( b, $8000_0000 );
	blob.newln( b );
	blob.puti32( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puti32Size( b, -1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -100_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -10_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -1_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -100_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -10_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -1_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puti64( b, 0 );
	blob.newln( b );
	blob.puti64( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puti64( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.puti64( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );


	for( mov( -24, i); i<=24; inc(i)) do

		blob.puti64Size( b, -1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puti128( b, 0 );
	blob.newln( b );
	blob.puti128( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puti128( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puti128( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -44, i); i<=44; inc(i)) do

		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );



	conv.setUnderscores( false );

	blob.puti8( b, 0 );
	blob.newln( b );
	blob.puti8( b, 127 );
	blob.newln( b );
	blob.puti8( b, -128 );
	blob.newln( b );
	blob.puti8( b, -1 );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puti8Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti8Size( b, 100, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );


	blob.puti16( b, 0 );
	blob.newln( b );
	blob.puti16( b, $7fff );
	blob.newln( b );
	blob.puti16( b, $8000 );
	blob.newln( b );
	blob.puti16( b, $FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puti16Size( b, -10000, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -1000, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 1000, i, '.' );
		blob.newln( b );
		blob.puti16Size( b, 10000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puti32( b, 0 );
	blob.newln( b );
	blob.puti32( b, $7fff_ffff );
	blob.newln( b );
	blob.puti32( b, $8000_0000 );
	blob.newln( b );
	blob.puti32( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.puti32Size( b, -1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -100_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -10_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -1_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -100_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -10_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -1_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.puti32Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puti64( b, 0 );
	blob.newln( b );
	blob.puti64( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puti64( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.puti64( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -24, i); i<=24; inc(i)) do

		blob.puti64Size( b, -1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti64Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.puti128( b, 0 );
	blob.newln( b );
	blob.puti128( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.puti128( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.puti128( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );

	for( mov( -44, i); i<=44; inc(i)) do

		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -100, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -10, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, -1, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.puti128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.save( "bputi.txt", b );

end fputi_test;

													