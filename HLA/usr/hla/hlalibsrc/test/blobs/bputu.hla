program bputu_test;
#include( "stdlib.hhf" )

var
	b			:blob.blob;
	i			:int32;
	
begin bputu_test;

	
	blob.alloc( 1024*1024 );
	mov( eax, b );
	
	conv.setUnderscores( true );
	blob.putu128Size( b, 10_000_000_000_000_000_000, 0, '.' );
	blob.newln( b );
	
	

	conv.setUnderscores( true );

	blob.putu8( b, 0 );
	blob.newln( b );
	blob.putu8( b, 10 );
	blob.newln( b );
	blob.putu8( b, 200 );
	blob.newln( b );
	blob.putu8( b, $7f );
	blob.newln( b );
	blob.putu8( b, $80 );
	blob.newln( b );
	blob.putu8( b, $FF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.putu8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu8Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu8Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu8Size( b, 100, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putu16( b, 0 );
	blob.newln( b );
	blob.putu16( b, $7fff );
	blob.newln( b );
	blob.putu16( b, $8000 );
	blob.newln( b );
	blob.putu16( b, $FFFF );
	blob.newln( b );
	blob.newln( b );
	
	for( mov( -20, i); i<=20; inc(i)) do

		blob.putu16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 1000, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 10000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );


	blob.putu32( b, 0 );
	blob.newln( b );
	blob.putu32( b, $7fff_ffff );
	blob.newln( b );
	blob.putu32( b, $8000_0000 );
	blob.newln( b );
	blob.putu32( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );
	
	for( mov( -20, i); i<=20; inc(i)) do

		blob.putu32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );


	blob.putu64( b, 0 );
	blob.newln( b );
	blob.putu64( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putu64( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.putu64( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -28, i); i<=28; inc(i)) do

		blob.putu64Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putu128( b, 0 );
	blob.newln( b );
	blob.putu128( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putu128( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putu128( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );


	for( mov( -44, i); i<=44; inc(i)) do

		blob.putu128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );



	conv.setUnderscores( false );

	blob.putu8( b, 0 );
	blob.newln( b );
	blob.putu8( b, $7f );
	blob.newln( b );
	blob.putu8( b, $80 );
	blob.newln( b );
	blob.putu8( b, $FF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -20, i); i<=20; inc(i)) do

		blob.putu8Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu8Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu8Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu8Size( b, 100, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putu16( b, 0 );
	blob.newln( b );
	blob.putu16( b, $7fff );
	blob.newln( b );
	blob.putu16( b, $8000 );
	blob.newln( b );
	blob.putu16( b, $FFFF );
	blob.newln( b );
	blob.newln( b );
	
	for( mov( -20, i); i<=20; inc(i)) do

		blob.putu16Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 1000, i, '.' );
		blob.newln( b );
		blob.putu16Size( b, 10000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );


	blob.putu32( b, 0 );
	blob.newln( b );
	blob.putu32( b, $7fff_ffff );
	blob.newln( b );
	blob.putu32( b, $8000_0000 );
	blob.newln( b );
	blob.putu32( b, $FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	
	for( mov( -20, i); i<=20; inc(i)) do

		blob.putu32Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.putu32Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );


	blob.putu64( b, 0 );
	blob.newln( b );
	blob.putu64( b, $7fff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putu64( b, $8000_0000_0000_0000 );
	blob.newln( b );
	blob.putu64( b, $FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );
	blob.newln( b );

	for( mov( -24, i); i<=24; inc(i)) do

		blob.putu64Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu64Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );

	blob.putu128( b, 0 );
	blob.newln( b );
	blob.putu128( b, $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	blob.newln( b );
	blob.putu128( b, $8000_0000_0000_0000_0000_0000_0000_0000 );
	blob.newln( b );
	blob.putu128( b, $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	blob.newln( b );

	for( mov( -44, i); i<=44; inc(i)) do

		blob.putu128Size( b, 0, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 1_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 10_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.putu128Size( b, 100_000_000_000_000_000_000_000_000_000_000_000_000, i, '.' );
		blob.newln( b );
		blob.newln( b );

	endfor;
	blob.newln( b );


	blob.save( "bputu.txt", b );

end bputu_test;

													