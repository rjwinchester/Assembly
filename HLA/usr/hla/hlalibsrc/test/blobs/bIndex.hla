program bIndex_test;
#include( "stdlib.hhf" )

const
	bufData_c : char[] :=
				[
					'a', #$d, #$a,
					'b', 'c',  #$d, #$a,
					'd', ' ', 'e', 'f', #$d, #$a,
					#$d, #$a,
					'1', '0', '0', #$d, #$a
				];
	

	sub2Data_c : char[] :=
				[
					'a', #$d, #$a,
				];
	
	sub3Data_c : char[] :=
				[
					'b', 'c',  #$d, #$a,
					'd', ' ', 'e', 'f', #$d, #$a,
					#$d, #$a,
					'1', '0', '0', #$d, #$a
				];
	

var
	b1			:blob.blob;
	b2			:blob.blob;
	b3			:blob.blob;
	
readonly
	bufData		:char[ @elements( bufData_c )] := bufData_c;
	sub2Data	:char[ @elements( sub2Data_c )] := sub2Data_c;
	sub3Data	:char[ @elements( sub3Data_c )] := sub3Data_c;
	s1			:string := "a" #$d #$a;
	s2			:string := 
					"bc"  #$d #$a
					"d ef" #$d #$a
					#$d #$a
					"100" #$d #$a;
						
	
					 
begin bIndex_test;

	try
	
		blob.alloc( 8192 );
		mov( eax, b1 );		
		blob.alloc( 8192 );
		mov( eax, b2 );		
		blob.alloc( 8192 );
		mov( eax, b3 );		
		
		blob.bufToBlob( &bufData, &bufData[@elements( bufData_c )], b1 );
		blob.bufToBlob( &sub2Data, &sub2Data[@elements( sub2Data_c )], b2 );
		blob.bufToBlob( &sub3Data, &sub3Data[@elements( sub3Data_c )], b3 );
		
		stdout.put( "Testing blob.index2/blob.index3" nl );
		blob.index2( b1, b2 );
		if( eax <> 0 ) then
		
			stdout.put
			(
				"blob.index2 failed!" nl
			);
			raise( 1000 );
		
		endif;
		
		blob.index2( b1, b3 );
		if( eax <> @elements( sub2Data_c ) ) then
		
			stdout.put
			(
				"blob.index2 failed!" nl
			);
			raise( 1001 );
		
		endif;
		
		blob.index3( b1, @elements( sub2Data_c ), b3 );
		if( eax <> @elements( sub2Data_c ) ) then
		
			stdout.put
			(
				"blob.index3 failed!" nl
			);
			raise( 1002 );
		
		endif;
		
		
		
		stdout.put( "Testing blob.indexStr2/blob.indexStr3" nl );
		blob.indexStr2( b1, s1 );
		if( eax <> 0 ) then
		
			stdout.put
			(
				"blob.strIndex2 failed!" nl
			);
			raise( 1003 );
		
		endif;
		
		blob.indexStr2( b1, s1 );
		if( eax <> 0 ) then
		
			stdout.put
			(
				"blob.strIndex2 failed!" nl
			);
			raise( 1004 );
		
		endif;
		
		blob.indexStr3( b1, @elements( sub2Data_c ), s2 );
		if( eax <> @elements( sub2Data_c ) ) then
		
			stdout.put
			(
				"blob.strIndex3 failed!" nl
			);
			raise( 1005 );
		
		endif;
		
		
		
		stdout.put( "Testing blob.rindex2/blob.rindex3" nl );
		blob.rindex2( b1, b2 );
		if( eax <> 0 ) then
		
			stdout.put
			(
				"blob.rindex2 failed!" nl
			);
			raise( 1006 );
		
		endif;
		
		blob.rindex2( b1, b3 );
		if( eax <> @elements( sub2Data_c ) ) then
		
			stdout.put
			(
				"blob.index2 failed!" nl
			);
			raise( 1007 );
		
		endif;
		
		blob.rindex3( b1, @elements( sub2Data_c ), b3 );
		if( eax <> @elements( sub2Data_c ) ) then
		
			stdout.put
			(
				"blob.index3 failed!" nl
			);
			raise( 1008 );
		
		endif;
		
		
		
		stdout.put( "Testing blob.rindexStr2/blob.rindexStr3" nl );
		blob.rindexStr2( b1, s1 );
		if( eax <> 0 ) then
		
			stdout.put
			(
				"blob.rindexStr2 failed!" nl
			);
			raise( 1009 );
		
		endif;
		
		blob.rindexStr2( b1, s1 );
		if( eax <> 0 ) then
		
			stdout.put
			(
				"blob.rindexStr2 failed!" nl
			);
			raise( 1010 );
		
		endif;
		
		blob.rindexStr3( b1, @elements( sub2Data_c ), s2 );
		if( eax <> @elements( sub2Data_c ) ) then
		
			stdout.put
			(
				"blob.rindexStr3 failed!" nl
			);
			raise( 1011 );
		
		endif;
		
		
	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"bIndex failed!" nl
			"Exception = ", (type uns32 eax), nl
			"***************************************************" nl
			nl 
		);
		os.exitProcess(3);
		
	endtry;
	stderr.put( "bIndex succeeded!" nl );
	os.exitProcess(0);
		
end bIndex_test;

													