program bAccessor_test;
#include( "stdlib.hhf" )

const
	bufData_c : char[] :=
				[
					'a', #$d, #$a,
					'b', 'c',  #$d, #$a,
					'd', ' ', 'e', 'f', #$d, #$a,
					#$d, #$a,
					'1', '0', '0', #$d, #$a
				];
	

var
	b			:blob.blob;
	
readonly
	bufData		:char[ @elements( bufData_c )] := bufData_c;
					 
begin bAccessor_test;

	try
	
		blob.alloc( 8192 );
		mov( eax, b );
		blob.rcursor( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.alloc didn't set rcursor to zero." nl );
			raise( 1000 );
			
		endif;
		blob.wcursor( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.alloc didn't set wcursor to zero." nl );
			raise( 1001 );
			
		endif;
		blob.maxlen( b );
		if( eax <> 8192 ) then
		
			stderr.put( "blob.alloc didn't set maxlen to 8192" nl );
			raise( 1002 );
			
		endif;
		
		for( mov( 0, ecx ); ecx < @elements( bufData_c ); inc( ecx )) do
		
			blob.wcursor( b );
			if( eax <> ecx ) then
			
				stderr.put
				( 
					"blob.wcursor returned ",
					(type uns32 eax),
					", expected ",
					(type uns32 ecx),
					nl 
				);
				raise( 1003 );
				
			endif;
			blob.putByte( b, cl );
				
		endfor;
		
		for( mov( 0, ecx ); ecx < @elements( bufData_c ); inc( ecx )) do
		
			blob.rcursor( b );
			if( eax <> ecx ) then
			
				stderr.put
				( 
					"blob.rcursor returned ",
					(type uns32 eax),
					", expected ",
					(type uns32 ecx),
					nl 
				);
				raise( 1003 );
				
			endif;
			blob.getByte( b );
			if( al <> cl ) then
			
				stdout.put
				(
					"blob.getByte returned #$", al, ", but expected #$", cl, nl
				);
				raise( 1004 );
				
			endif;
				
		endfor;


		
		// Check reset/setrCursor/setwCursor:
		
		blob.setrCursor( b, 0 );
		blob.rcursor( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.setrCursor didn't set rcursor to zero." nl );
			raise( 1100 );
			
		endif;
		
		for( mov( 0, ecx ); ecx < @elements( bufData_c ); inc( ecx )) do
		
			blob.rcursor( b );
			if( eax <> ecx ) then
			
				stderr.put
				( 
					"blob.rcursor returned ",
					(type uns32 eax),
					", expected ",
					(type uns32 ecx),
					nl 
				);
				raise( 1102 );
				
			endif;
			blob.getByte( b );
			if( al <> cl ) then
			
				stdout.put
				(
					"blob.getByte returned #$", al, ", but expected #$", cl, nl
				);
				raise( 1103 );
				
			endif;
				
		endfor;
		
		blob.setrCursor( b, 10 );
		
		for( mov( 10, ecx ); ecx < @elements( bufData_c ); inc( ecx )) do
		
			blob.rcursor( b );
			if( eax <> ecx ) then
			
				stderr.put
				( 
					"blob.rcursor returned ",
					(type uns32 eax),
					", expected ",
					(type uns32 ecx),
					nl 
				);
				raise( 1104 );
				
			endif;
			blob.getByte( b );
			if( al <> cl ) then
			
				stdout.put
				(
					"blob.getByte returned #$", al, ", but expected #$", cl, nl
				);
				raise( 1105 );
				
			endif;
				
		endfor;
		
		
		
		
		blob.setwCursor( b, 0 );
		blob.wcursor( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.setrCursor didn't set wcursor to zero." nl );
			raise( 1200 );
			
		endif;
		
		for( mov( 0, ecx ); ecx < @elements( bufData_c ); inc( ecx )) do
		
			blob.wcursor( b );
			if( eax <> ecx ) then
			
				stderr.put
				( 
					"blob.rcursor returned ",
					(type uns32 eax),
					", expected ",
					(type uns32 ecx),
					nl 
				);
				raise( 1201 );
				
			endif;
			mov( @elements( bufData_c )-1, dl );
			sub( cl, dl );
			blob.putByte( b, dl );
				
		endfor;
		
		blob.setrCursor( b, 0 );
		for( mov( 0, ecx ); ecx < @elements( bufData_c ); inc( ecx )) do
		
			blob.getByte( b );
			mov( @elements( bufData_c )-1, dl );
			sub( cl, dl );
			if( al <> dl ) then
			
				stderr.put
				( 
					"blob.getByte returned ",
					(type uns8 al),
					", expected ",
					(type uns8 dl),
					nl 
				);
				raise( 1202 );
				
			endif;
				
		endfor;
		
		
		
		blob.reset( b );
		blob.rcursor( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.reset didn't set rcursor to zero." nl );
			raise( 1300 );
			
		endif;
		blob.wcursor( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.reset didn't set wcursor to zero." nl );
			raise( 1301 );
			
		endif;
		blob.length( b );
		if( eax <> 0 ) then
		
			stderr.put( "blob.reset didn't set length to zero." nl );
			raise( 1302 );
			
		endif;
		
	
		
	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"blob.bAccessor failed!" nl
			"Exception = ", (type uns32 eax), nl
			"***************************************************" nl
			nl 
		);
		os.exitProcess(3);
		
	endtry;
	stderr.put( "blob.bAccessor succeeded!" nl );
	os.exitProcess(0);
		
end bAccessor_test;

													