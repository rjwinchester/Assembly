program bCat_test;
#include( "stdlib.hhf" )

const
	bufData_c : char[] :=
				[
					'a', #$d, #$a,
					'b', 'c',  #$d, #$a,
					'd', ' ', 'e', 'f', #$d, #$a,
					#$d, #$a,
					'1', '0', '0', #$d, #$a
				];
	

var
	b1			:blob.blob;
	b2			:blob.blob;
	b3			:blob.blob;
	bcmp		:blob.blob;
	s			:string;
	s2			:string;
	
readonly
	bufData		:char[ @elements( bufData_c )] := bufData_c;
					 
begin bCat_test;

	try
	
		str.alloc( 8192 );
		mov( eax, s );
		str.alloc( 8192 );
		mov( eax, s2 );
		blob.alloc( 8192 );
		mov( eax, b1 );
		blob.alloc( 8192 );
		mov( eax, b2 );
		
		blob.alloc( 8192 );
		mov( eax, bcmp );
		
		blob.bufToBlob( &bufData, &bufData[@elements( bufData_c )], bcmp );
		
		stdout.put( "Testing blob.cat2/blob.cat3" nl );
		blob.cat2( bcmp, b1 );
		if( blob.ne( b1, bcmp ) ) then
		
			stdout.put
			(
				"blob.cat failed!" nl
			);
			raise( 1000 );
		
		endif;
		
		blob.cat3( bcmp, bcmp, b2 );
		blob.cat2( bcmp, b1 );
		if( blob.ne( b1, b2 ) ) then
		
			stdout.put
			(
				"blob.cat3 failed!" nl
			);
			raise( 1001 );
		
		endif;
		
		blob.a_cat( bcmp, bcmp );
		mov( eax, b3 );
		if( blob.ne( b1, b3 ) ) then
		
			stdout.put
			(
				"blob.a_cat failed!" nl
			);
			raise( 1002 );
		
		endif;
		
		
		
	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"bCat failed!" nl
			"Exception = ", (type uns32 eax), nl
			"***************************************************" nl
			nl 
		);
		os.exitProcess(3);
		
	endtry;
	stderr.put( "bCat succeeded!" nl );
	os.exitProcess(0);
		
end bCat_test;

													