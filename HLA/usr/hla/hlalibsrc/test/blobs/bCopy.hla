program bCopy_test;
#include( "stdlib.hhf" )

const
	bufData_c : char[] :=
				[
					'a', #$d, #$a,
					'b', 'c',  #$d, #$a,
					'd', ' ', 'e', 'f', #$d, #$a,
					#$d, #$a,
					'1', '0', '0', #$d, #$a
				];
	

var
	b1			:blob.blob;
	b2			:blob.blob;
	bcmp		:blob.blob;
	s			:string;
	s2			:string;
	
readonly
	bufData		:char[ @elements( bufData_c )] := bufData_c;
					 
begin bCopy_test;

	try
	
		str.alloc( 8192 );
		mov( eax, s );
		str.alloc( 8192 );
		mov( eax, s2 );
		blob.alloc( 8192 );
		mov( eax, b1 );
		
		blob.alloc( 8192 );
		mov( eax, bcmp );
		
		blob.bufToBlob( &bufData, &bufData[@elements( bufData_c )], bcmp );
		
		stdout.put( "Testing blob.cpy/blob.a_cpy" nl );
		blob.cpy( bcmp, b1 );
		if( blob.ne( b1, bcmp ) ) then
		
			stdout.put
			(
				"blob.cpy failed!" nl
			);
			raise( 1000 );
		
		endif;
		
		blob.a_cpy( bcmp );
		mov( eax, b2 );
		if( blob.ne( b2, bcmp ) ) then
		
			stdout.put
			(
				"blob.a_cpy failed!" nl
			);
			raise( 1001 );
		
		endif;
		blob.free( b2 );
		
		
		stdout.put( "Testing blob.fillb" nl );
		blob.alloc( 8192 );
		mov( eax, b2 );
		for( mov( 0, ecx ); ecx < 1024; inc( ecx )) do
		
			mov( 0, al );
			blob.putByte( b2, al );
			
		endfor;
		blob.fillb( 0, 1024, b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.fillb failed!" nl
			);
			raise( 1002 );
		
		endif;
		
		
		stdout.put( "Testing blob.fillw" nl );
		blob.setwCursor( b2, 0 );
		for( mov( 0, ecx ); ecx < 1024; inc( ecx )) do
		
			mov( $101, ax );
			blob.putWord( b2, ax );
			
		endfor;
		blob.fillw( $101, 1024, b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.fillw failed!" nl
			);
			raise( 1003 );
		
		endif;
		
		
		stdout.put( "Testing blob.filld" nl );
		blob.setwCursor( b2, 0 );
		for( mov( 0, ecx ); ecx < 1024; inc( ecx )) do
		
			mov( $202_0202, eax );
			blob.putDword( b2, eax );
			
		endfor;
		blob.filld( $202_0202, 1024, b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.filld failed!" nl
			);
			raise( 1004 );
		
		endif;
		
		
		
		
		stdout.put( "Testing blob.strToBlob/blob.zstrToBlob" nl );
		
		str.bufToStr( &bufData, &bufData[@elements( bufData_c )], s );
		blob.bufToBlob( &bufData, &bufData[@elements( bufData_c )], b2 );
		blob.strToBlob( s, b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.strToBlob failed!" nl
			);
			raise( 1005 );
		
		endif;
		
		
		blob.bufToBlob( &bufData, &bufData[@elements( bufData_c )], b2 );
		blob.zstrToBlob( (type zstring s), b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.strToBlob failed!" nl
			);
			raise( 1006 );
		
		endif;
		
		
		
		
		stdout.put( "Testing blob.catStr/blob.catzStr" nl );
		
		str.bufToStr( &bufData, &bufData[@elements( bufData_c )], s );
		str.cpy( s, s2 );
		str.cat( s, s2 );
		
		blob.strToBlob( s, b2 );
		blob.strToBlob( s, b1 );
		blob.cat2( b1, b2 );
		blob.catStr( s, b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.catStr failed!" nl
			);
			raise( 1007 );
		
		endif;
		
		
		blob.strToBlob( s, b2 );
		blob.strToBlob( s, b1 );
		blob.cat2( b1, b2 );
		blob.catzStr( (type zstring s), b1 );
		if( blob.ne( b2, b1 ) ) then
		
			stdout.put
			(
				"blob.catzStr failed!" nl
			);
			raise( 1008 );
		
		endif;
		
	
		
	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"bCopy failed!" nl
			"Exception = ", (type uns32 eax), nl
			"***************************************************" nl
			nl 
		);
		os.exitProcess(3);
		
	endtry;
	stderr.put( "bCopy succeeded!" nl );
	os.exitProcess(0);
		
end bCopy_test;

													