program complement_test;
#include( "stdlib.hhf" )

type
	ccs_t:
		record
			_negated	:cset;
			_cset		:cset;
		endrecord;
		
const
	ccs_c :ccs_t[] :=
		[
			#for( i := 0 to 127 )
				ccs_t:[ -{char(0)..char(i)}, {char(0)..char(i)}],
			#endfor
			#for( i := 0 to 126 )
				ccs_t:[ -{@char(i)..@char(127)}, {@char(i)..@char(127)}],
			#endfor
			ccs_t:[ -{#$7f}, { #$7f }]
		];
		
		
static
	csresult	:cset;
	ccs 		:ccs_t[ @elements( ccs_c ) ] := ccs_c;
	
begin complement_test;

	
		for( mov( 0, ecx ); ecx<@elements( ccs_c ); inc(ecx) )do

			intmul( @size( ccs_t ), ecx, edx );
		
			cs.complement( ccs._cset[edx], csresult );
			if( cs.ne( csresult, ccs._negated[edx]) ) then
			
				stderr.put
				( 
					nl nl 
					"***************************************************" nl
					"cs.complement failed!  ecx=", ecx, nl,
					(type dword csresult[12]), '_',
					(type dword csresult[8]), '_',
					(type dword csresult[4]), '_',
					(type dword csresult), nl,
					
					(type dword ccs._negated[edx+12]), '_',
					(type dword ccs._negated[edx+8]), '_',
					(type dword ccs._negated[edx+4]), '_',
					(type dword ccs._negated[edx]), nl,
					
					(type dword ccs._cset[edx+12]), '_',
					(type dword ccs._cset[edx+8]), '_',
					(type dword ccs._cset[edx+4]), '_',
					(type dword ccs._cset[edx]), nl,
										
					"***************************************************" nl
					nl 
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);

			endif;
			
		endfor;
		stderr.put( "cs.complement succeeded!" nl );
		os.exitProcess(0);
		
end complement_test;

													