program internalFuncs_test;
#include( "stdlib.hhf" )
#include( "../../trunk/include/conversions.hhf" )

const	 
	printCmps := false;

readonly
	qw0							:qword  := 0;
	lw0							:lword  := 0;

	_0							:string := "0";
	_1							:string := "1";
	_127						:string := "127";
	_128						:string := "128";
	_255						:string := "255";
	_256						:string := "256";
	_32767						:string := "32767";
	_32768						:string := "32768";
	_65535						:string := "65535";
	_65536						:string := "65536";
	_2147483647					:string := "2147483647";
	_2147483648					:string := "2147483648";
	_4294967295					:string := "4294967295";
	_4294967296					:string := "4294967296";
	_9223372036854775807		:string := "9223372036854775807";
	_9223372036854775808		:string := "9223372036854775808";
	_18446744073709551615		:string := "18446744073709551615";
	_18446744073709551616		:string := "18446744073709551616";

	_170141183460469231731687303715884105727 :string :=
							"170141183460469231731687303715884105727";

	_170141183460469231731687303715884105728 :string :=
							"170141183460469231731687303715884105728";

	_340282366920938463463374607431768211455 :string :=
							"340282366920938463463374607431768211455";

	_340282366920938463463374607431768211456 :string :=
							"340282366920938463463374607431768211456";


      			        _32_767	:string :=                     "32_767";
      			        _32_768	:string :=                     "32_768";
      			        _65_535	:string :=                     "65_535";
      			        _65_536	:string :=                     "65_536";
	             _2_147_483_647	:string :=              "2_147_483_647";
	             _2_147_483_648	:string :=              "2_147_483_648";
	             _4_294_967_295	:string :=              "4_294_967_295";
	             _4_294_967_296	:string :=              "4_294_967_296";
	 _9_223_372_036_854_775_807	:string :=  "9_223_372_036_854_775_807";
	 _9_223_372_036_854_775_808	:string :=  "9_223_372_036_854_775_808";
	_18_446_744_073_709_551_615	:string := "18_446_744_073_709_551_615";
	_18_446_744_073_709_551_616	:string := "18_446_744_073_709_551_616";

	_170_141_183_460_469_231_731_687_303_715_884_105_727 :string :=
						"170_141_183_460_469_231_731_687_303_715_884_105_727";

	_170_141_183_460_469_231_731_687_303_715_884_105_728 :string :=
						"170_141_183_460_469_231_731_687_303_715_884_105_728";

	_340_282_366_920_938_463_463_374_607_431_768_211_455 :string :=
						"340_282_366_920_938_463_463_374_607_431_768_211_455";

	_340_282_366_920_938_463_463_374_607_431_768_211_456 :string :=
						"340_282_366_920_938_463_463_374_607_431_768_211_456";


	_4_0						:string := "    0";
	_4_1						:string := "    1";
	_4_127						:string := "    127";
	_4_128						:string := "    128";
	_4_255						:string := "    255";
	_4_256						:string := "    256";
	_4_32767					:string := "    32767";
	_4_32768					:string := "    32768";
	_4_65535					:string := "    65535";
	_4_65536					:string := "    65536";
	_4_2147483647				:string := "    2147483647";
	_4_2147483648				:string := "    2147483648";
	_4_4294967295				:string := "    4294967295";
	_4_4294967296				:string := "    4294967296";
	_4_9223372036854775807		:string := "    9223372036854775807";
	_4_9223372036854775808		:string := "    9223372036854775808";
	_4_18446744073709551615		:string := "    18446744073709551615";
	_4_18446744073709551616		:string := "    18446744073709551616";

	_4_170141183460469231731687303715884105727 :string :=
							"    170141183460469231731687303715884105727";

	_4_170141183460469231731687303715884105728 :string :=
							"    170141183460469231731687303715884105728";

	_4_340282366920938463463374607431768211455 :string :=
							"    340282366920938463463374607431768211455";

	_4_340282366920938463463374607431768211456 :string :=
							"    340282366920938463463374607431768211456";



	                    _4_32_767	:string :=                     "    32_767";
	                    _4_32_768	:string :=                     "    32_768";
	                    _4_65_535	:string :=                     "    65_535";
	                    _4_65_536	:string :=                     "    65_536";
	             _4_2_147_483_647	:string :=              "    2_147_483_647";
	             _4_2_147_483_648	:string :=              "    2_147_483_648";
	             _4_4_294_967_295	:string :=              "    4_294_967_295";
	             _4_4_294_967_296	:string :=              "    4_294_967_296";
	 _4_9_223_372_036_854_775_807	:string :=  "    9_223_372_036_854_775_807";
	 _4_9_223_372_036_854_775_808	:string :=  "    9_223_372_036_854_775_808";
	_4_18_446_744_073_709_551_615	:string := "    18_446_744_073_709_551_615";
	_4_18_446_744_073_709_551_616	:string := "    18_446_744_073_709_551_616";

	_4_170_141_183_460_469_231_731_687_303_715_884_105_727 :string :=
					"    170_141_183_460_469_231_731_687_303_715_884_105_727";

	_4_170_141_183_460_469_231_731_687_303_715_884_105_728 :string :=
					"    170_141_183_460_469_231_731_687_303_715_884_105_728";

	_4_340_282_366_920_938_463_463_374_607_431_768_211_455 :string :=
					"    340_282_366_920_938_463_463_374_607_431_768_211_455";

	_4_340_282_366_920_938_463_463_374_607_431_768_211_456 :string :=
					"    340_282_366_920_938_463_463_374_607_431_768_211_456";



	                   _m4_0	:string :=                    "0    ";
	                   _m4_1	:string :=                    "1    ";
	                 _m4_127	:string :=                  "127    ";
	                 _m4_128	:string :=                  "128    ";
	                 _m4_255	:string :=                  "255    ";
	                 _m4_256	:string :=                  "256    ";
	               _m4_32767	:string :=                "32767    ";
	               _m4_32768	:string :=                "32768    ";
	               _m4_65535	:string :=                "65535    ";
	               _m4_65536	:string :=                "65536    ";
	          _m4_2147483647	:string :=           "2147483647    ";
	          _m4_2147483648	:string :=           "2147483648    ";
	          _m4_4294967295	:string :=           "4294967295    ";
	          _m4_4294967296	:string :=           "4294967296    ";
	 _m4_9223372036854775807	:string :=  "9223372036854775807    ";
	 _m4_9223372036854775808	:string :=  "9223372036854775808    ";
	_m4_18446744073709551615	:string := "18446744073709551615    ";
	_m4_18446744073709551616	:string := "18446744073709551616    ";

	_m4_170141183460469231731687303715884105727 :string :=
							"170141183460469231731687303715884105727    ";

	_m4_170141183460469231731687303715884105728 :string :=
							"170141183460469231731687303715884105728    ";

	_m4_340282366920938463463374607431768211455 :string :=
							"340282366920938463463374607431768211455    ";

	_m4_340282366920938463463374607431768211456 :string :=
							"340282366920938463463374607431768211456    ";



	                    _m4_32_767	:string :=                     "32_767    ";
	                    _m4_32_768	:string :=                     "32_768    ";
	                    _m4_65_535	:string :=                     "65_535    ";
	                    _m4_65_536	:string :=                     "65_536    ";
	             _m4_2_147_483_647	:string :=              "2_147_483_647    ";
	             _m4_2_147_483_648	:string :=              "2_147_483_648    ";
	             _m4_4_294_967_295	:string :=              "4_294_967_295    ";
	             _m4_4_294_967_296	:string :=              "4_294_967_296    ";
	 _m4_9_223_372_036_854_775_807	:string :=  "9_223_372_036_854_775_807    ";
	 _m4_9_223_372_036_854_775_808	:string :=  "9_223_372_036_854_775_808    ";
	_m4_18_446_744_073_709_551_615	:string := "18_446_744_073_709_551_615    ";
	_m4_18_446_744_073_709_551_616	:string := "18_446_744_073_709_551_616    ";

	_m4_170_141_183_460_469_231_731_687_303_715_884_105_727 :string :=
					"170_141_183_460_469_231_731_687_303_715_884_105_727    ";

	_m4_170_141_183_460_469_231_731_687_303_715_884_105_728 :string :=
					"170_141_183_460_469_231_731_687_303_715_884_105_728    ";

	_m4_340_282_366_920_938_463_463_374_607_431_768_211_455 :string :=
					"340_282_366_920_938_463_463_374_607_431_768_211_455    ";

	_m4_340_282_366_920_938_463_463_374_607_431_768_211_456 :string :=
					"340_282_366_920_938_463_463_374_607_431_768_211_456    ";




	_minus_1						:string := "-1";
	_minus_127						:string := "-127";
	_minus_128						:string := "-128";
	_minus_255						:string := "-255";
	_minus_256						:string := "-256";
	_minus_32767					:string := "-32767";
	_minus_32768					:string := "-32768";
	_minus_65535					:string := "-65535";
	_minus_65536					:string := "-65536";
	_minus_2147483647				:string := "-2147483647";
	_minus_2147483648				:string := "-2147483648";
	_minus_4294967295				:string := "-4294967295";
	_minus_4294967296				:string := "-4294967296";
	_minus_9223372036854775807		:string := "-9223372036854775807";
	_minus_9223372036854775808		:string := "-9223372036854775808";
	_minus_18446744073709551615		:string := "-18446744073709551615";
	_minus_18446744073709551616		:string := "-18446744073709551616";

	_minus_170141183460469231731687303715884105727 :string :=
						"-170141183460469231731687303715884105727";

	_minus_170141183460469231731687303715884105728 :string :=
						"-170141183460469231731687303715884105728";

	_minus_340282366920938463463374607431768211455 :string :=
							"-340282366920938463463374607431768211455";



	_minus4_1						:string := "    -1";
	_minus4_127						:string := "    -127";
	_minus4_128						:string := "    -128";
	_minus4_255						:string := "    -255";
	_minus4_256						:string := "    -256";
	_minus4_32767					:string := "    -32767";
	_minus4_32768					:string := "    -32768";
	_minus4_65535					:string := "    -65535";
	_minus4_65536					:string := "    -65536";
	_minus4_2147483647				:string := "    -2147483647";
	_minus4_2147483648				:string := "    -2147483648";
	_minus4_4294967295				:string := "    -4294967295";
	_minus4_4294967296				:string := "    -4294967296";
	_minus4_9223372036854775807		:string := "    -9223372036854775807";
	_minus4_9223372036854775808		:string := "    -9223372036854775808";
	_minus4_18446744073709551615	:string := "    -18446744073709551615";
	_minus4_18446744073709551616	:string := "    -18446744073709551616";

	_minus4_170141183460469231731687303715884105727 :string :=
						"    -170141183460469231731687303715884105727";

	_minus4_170141183460469231731687303715884105728 :string :=
						"    -170141183460469231731687303715884105728";

	_minus4_340282366920938463463374607431768211455 :string :=
						"    -340282366920938463463374607431768211455";



	                    _minus4_32_767	:string :=                "    -32_767";
	                    _minus4_32_768	:string :=                "    -32_768";
	                    _minus4_65_535	:string :=                "    -65_535";
	                    _minus4_65_536	:string :=                "    -65_536";
	             _minus4_2_147_483_647	:string :=           "    -2_147_483_647";
	             _minus4_2_147_483_648	:string :=           "    -2_147_483_648";
	             _minus4_4_294_967_295	:string :=           "    -4_294_967_295";
	             _minus4_4_294_967_296	:string :=           "    -4_294_967_296";
	 _minus4_9_223_372_036_854_775_807	:string :=  "    -9_223_372_036_854_775_807";
	 _minus4_9_223_372_036_854_775_808	:string :=  "    -9_223_372_036_854_775_808";
	_minus4_18_446_744_073_709_551_615	:string := "    -18_446_744_073_709_551_615";
	_minus4_18_446_744_073_709_551_616	:string := "    -18_446_744_073_709_551_616";

	_minus4_170_141_183_460_469_231_731_687_303_715_884_105_727 :string :=
					"    -170_141_183_460_469_231_731_687_303_715_884_105_727";

	_minus4_170_141_183_460_469_231_731_687_303_715_884_105_728 :string :=
					"    -170_141_183_460_469_231_731_687_303_715_884_105_728";

	_minus4_340_282_366_920_938_463_463_374_607_431_768_211_455 :string :=
					"    -340_282_366_920_938_463_463_374_607_431_768_211_455";



	                    _minus_32_767	:string :=                     "-32_767";
	                    _minus_32_768	:string :=                     "-32_768";
	                    _minus_65_535	:string :=                     "-65_535";
	                    _minus_65_536	:string :=                     "-65_536";
	             _minus_2_147_483_647	:string :=              "-2_147_483_647";
	             _minus_2_147_483_648	:string :=              "-2_147_483_648";
	             _minus_4_294_967_295	:string :=              "-4_294_967_295";
	             _minus_4_294_967_296	:string :=              "-4_294_967_296";
	 _minus_9_223_372_036_854_775_807	:string :=  "-9_223_372_036_854_775_807";
	 _minus_9_223_372_036_854_775_808	:string :=  "-9_223_372_036_854_775_808";
	_minus_18_446_744_073_709_551_615	:string := "-18_446_744_073_709_551_615";
	_minus_18_446_744_073_709_551_616	:string := "-18_446_744_073_709_551_616";

	_minus_170_141_183_460_469_231_731_687_303_715_884_105_727 :string :=
						"-170_141_183_460_469_231_731_687_303_715_884_105_727";

	_minus_170_141_183_460_469_231_731_687_303_715_884_105_728 :string :=
						"-170_141_183_460_469_231_731_687_303_715_884_105_728";

	_minus_340_282_366_920_938_463_463_374_607_431_768_211_455 :string :=
						"-340_282_366_920_938_463_463_374_607_431_768_211_455";


	                   _minusm4_1	:string :=                    "-1    ";
	                 _minusm4_127	:string :=                  "-127    ";
	                 _minusm4_128	:string :=                  "-128    ";
	                 _minusm4_255	:string :=                  "-255    ";
	                 _minusm4_256	:string :=                  "-256    ";
	               _minusm4_32767	:string :=                "-32767    ";
	               _minusm4_32768	:string :=                "-32768    ";
	               _minusm4_65535	:string :=                "-65535    ";
	               _minusm4_65536	:string :=                "-65536    ";
	          _minusm4_2147483647	:string :=           "-2147483647    ";
	          _minusm4_2147483648	:string :=           "-2147483648    ";
	          _minusm4_4294967295	:string :=           "-4294967295    ";
	          _minusm4_4294967296	:string :=           "-4294967296    ";
	 _minusm4_9223372036854775807	:string :=  "-9223372036854775807    ";
	 _minusm4_9223372036854775808	:string :=  "-9223372036854775808    ";
	_minusm4_18446744073709551615	:string := "-18446744073709551615    ";
	_minusm4_18446744073709551616	:string := "-18446744073709551616    ";

	_minusm4_170141183460469231731687303715884105727 :string :=
						"-170141183460469231731687303715884105727    ";

	_minusm4_170141183460469231731687303715884105728 :string :=
						"-170141183460469231731687303715884105728    ";

	_minusm4_340282366920938463463374607431768211455 :string :=
						"-340282366920938463463374607431768211455    ";




	               _minusm4_32_767		:string :=                     "-32_767    ";
	               _minusm4_32_768		:string :=                     "-32_768    ";
	               _minusm4_65_535		:string :=                     "-65_535    ";
	               _minusm4_65_536		:string :=                     "-65_536    ";
	          _minusm4_2_147_483_647	:string :=              "-2_147_483_647    ";
	          _minusm4_2_147_483_648	:string :=              "-2_147_483_648    ";
	          _minusm4_4_294_967_295	:string :=              "-4_294_967_295    ";
	          _minusm4_4_294_967_296	:string :=              "-4_294_967_296    ";
	 _minusm4_9_223_372_036_854_775_807	:string :=  "-9_223_372_036_854_775_807    ";
	 _minusm4_9_223_372_036_854_775_808	:string :=  "-9_223_372_036_854_775_808    ";
	_minusm4_18_446_744_073_709_551_615	:string := "-18_446_744_073_709_551_615    ";
	_minusm4_18_446_744_073_709_551_616	:string := "-18_446_744_073_709_551_616    ";

	_minusm4_170_141_183_460_469_231_731_687_303_715_884_105_727 :string :=
					"-170_141_183_460_469_231_731_687_303_715_884_105_727    ";

	_minusm4_170_141_183_460_469_231_731_687_303_715_884_105_728 :string :=
					"-170_141_183_460_469_231_731_687_303_715_884_105_728    ";

	_minusm4_340_282_366_920_938_463_463_374_607_431_768_211_455 :string :=
					"-340_282_366_920_938_463_463_374_607_431_768_211_455    ";




	_7F							:string := "7F";
	_80							:string := "80";
	_FF							:string := "FF";
	_100						:string := "100";
	_7FFF						:string := "7FFF";
	_8000						:string := "8000";
	_FFFF						:string := "FFFF";
	_10000						:string := "10000";
	_7FFFFFFF					:string := "7FFFFFFF";
	_80000000					:string := "80000000";
	_FFFFFFFF					:string := "FFFFFFFF";
	_100000000					:string := "100000000";
	_7FFFFFFFFFFFFFFF			:string := "7FFFFFFFFFFFFFFF";
	_8000000000000000			:string := "8000000000000000";
	_FFFFFFFFFFFFFFFF			:string := "FFFFFFFFFFFFFFFF";
	_10000000000000000			:string := "10000000000000000";

	_7FFFFFFFFFFFFFFFFFFF		:string := "7FFFFFFFFFFFFFFFFFFF";
	_80000000000000000000		:string := "80000000000000000000";
	_FFFFFFFFFFFFFFFFFFFF		:string := "FFFFFFFFFFFFFFFFFFFF";
	_100000000000000000000		:string := "100000000000000000000";

	_7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	:string := 
								"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";

	_80000000000000000000000000000000	:string := 
								"80000000000000000000000000000000";

	_FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	:string := 
								"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";



	_1_0000						:string := "1_0000";
	_7FFF_FFFF					:string := "7FFF_FFFF";
	_8000_0000					:string := "8000_0000";
	_FFFF_FFFF					:string := "FFFF_FFFF";
	_1_0000_0000				:string := "1_0000_0000";
	_7FFF_FFFF_FFFF_FFFF		:string := "7FFF_FFFF_FFFF_FFFF";
	_8000_0000_0000_0000		:string := "8000_0000_0000_0000";
	_FFFF_FFFF_FFFF_FFFF		:string := "FFFF_FFFF_FFFF_FFFF";
	_1_0000_0000_0000_0000		:string := "1_0000_0000_0000_0000";

	_7FFF_FFFF_FFFF_FFFF_FFFF	:string := "7FFF_FFFF_FFFF_FFFF_FFFF";
	_8000_0000_0000_0000_0000	:string := "8000_0000_0000_0000_0000";
	_FFFF_FFFF_FFFF_FFFF_FFFF	:string := "FFFF_FFFF_FFFF_FFFF_FFFF";
	_1_0000_0000_0000_0000_0000	:string := "1_0000_0000_0000_0000_0000";

	_7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF	:string := 
								"7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF";

	_8000_0000_0000_0000_0000_0000_0000_0000	:string := 
								"8000_0000_0000_0000_0000_0000_0000_0000";

	_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF	:string := 
								"FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF";



	_4_7F						:string := "    7F";
	_4_80						:string := "    80";
	_4_FF						:string := "    FF";
	_4_100						:string := "    100";
	_4_7FFF						:string := "    7FFF";
	_4_8000						:string := "    8000";
	_4_FFFF						:string := "    FFFF";
	_4_10000					:string := "    10000";
	_4_7FFFFFFF					:string := "    7FFFFFFF";
	_4_80000000					:string := "    80000000";
	_4_FFFFFFFF					:string := "    FFFFFFFF";
	_4_100000000				:string := "    100000000";
	_4_7FFFFFFFFFFFFFFF			:string := "    7FFFFFFFFFFFFFFF";
	_4_8000000000000000			:string := "    8000000000000000";
	_4_FFFFFFFFFFFFFFFF			:string := "    FFFFFFFFFFFFFFFF";
	_4_10000000000000000		:string := "    10000000000000000";
	 
	_4_7FFFFFFFFFFFFFFFFFFF		:string := "    7FFFFFFFFFFFFFFFFFFF";
	_4_80000000000000000000		:string := "    80000000000000000000";
	_4_FFFFFFFFFFFFFFFFFFFF		:string := "    FFFFFFFFFFFFFFFFFFFF";
	_4_100000000000000000000	:string := "    100000000000000000000";

	_4_7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	:string := 
	 							"    7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";
	 
	_4_80000000000000000000000000000000	:string := 
	 							"    80000000000000000000000000000000";
	 
	_4_FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	:string := 
								"    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";





	_4_1_0000						:string := "    1_0000";
	_4_7FFF_FFFF					:string := "    7FFF_FFFF";
	_4_8000_0000					:string := "    8000_0000";
	_4_FFFF_FFFF					:string := "    FFFF_FFFF";
	_4_1_0000_0000					:string := "    1_0000_0000";
	_4_7FFF_FFFF_FFFF_FFFF			:string := "    7FFF_FFFF_FFFF_FFFF";
	_4_8000_0000_0000_0000			:string := "    8000_0000_0000_0000";
	_4_FFFF_FFFF_FFFF_FFFF			:string := "    FFFF_FFFF_FFFF_FFFF";
	_4_1_0000_0000_0000_0000		:string := "    1_0000_0000_0000_0000";
	 
	_4_7FFF_FFFF_FFFF_FFFF_FFFF		:string := "    7FFF_FFFF_FFFF_FFFF_FFFF";
	_4_8000_0000_0000_0000_0000		:string := "    8000_0000_0000_0000_0000";
	_4_FFFF_FFFF_FFFF_FFFF_FFFF		:string := "    FFFF_FFFF_FFFF_FFFF_FFFF";
	_4_1_0000_0000_0000_0000_0000	:string := "    1_0000_0000_0000_0000_0000";

	_4_7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF	:string := 
	 							"    7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF";
	 
	_4_8000_0000_0000_0000_0000_0000_0000_0000	:string := 
	 							"    8000_0000_0000_0000_0000_0000_0000_0000";
	 
	_4_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF	:string := 
								"    FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF";


	_m4_7F						:string := "7F    ";
	_m4_80						:string := "80    ";
	_m4_FF						:string := "FF    ";
	_m4_100						:string := "100    ";
	_m4_7FFF					:string := "7FFF    ";
	_m4_8000					:string := "8000    ";
	_m4_FFFF					:string := "FFFF    ";
	_m4_10000					:string := "10000    ";
	_m4_7FFFFFFF				:string := "7FFFFFFF    ";
	_m4_80000000				:string := "80000000    ";
	_m4_FFFFFFFF				:string := "FFFFFFFF    ";
	_m4_100000000				:string := "100000000    ";
	_m4_7FFFFFFFFFFFFFFF		:string := "7FFFFFFFFFFFFFFF    ";
	_m4_8000000000000000		:string := "8000000000000000    ";
	_m4_FFFFFFFFFFFFFFFF		:string := "FFFFFFFFFFFFFFFF    ";
	_m4_10000000000000000		:string := "10000000000000000    ";
	 
	_m4_7FFFFFFFFFFFFFFFFFFF	:string := "7FFFFFFFFFFFFFFFFFFF    ";
	_m4_80000000000000000000	:string := "80000000000000000000    ";
	_m4_FFFFFFFFFFFFFFFFFFFF	:string := "FFFFFFFFFFFFFFFFFFFF    ";
	_m4_100000000000000000000	:string := "100000000000000000000    ";

	_m4_7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	:string := 
	 							"7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF    ";
	 
	_m4_80000000000000000000000000000000	:string := 
	 							"80000000000000000000000000000000    ";
	 
	_m4_FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	:string := 
								"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF    ";





	_m4_1_0000					:string := "1_0000    ";
	_m4_7FFF_FFFF				:string := "7FFF_FFFF    ";
	_m4_8000_0000				:string := "8000_0000    ";
	_m4_FFFF_FFFF				:string := "FFFF_FFFF    ";
	_m4_1_0000_0000				:string := "1_0000_0000    ";
	_m4_7FFF_FFFF_FFFF_FFFF		:string := "7FFF_FFFF_FFFF_FFFF    ";
	_m4_8000_0000_0000_0000		:string := "8000_0000_0000_0000    ";
	_m4_FFFF_FFFF_FFFF_FFFF		:string := "FFFF_FFFF_FFFF_FFFF    ";
	_m4_1_0000_0000_0000_0000		:string := "1_0000_0000_0000_0000    ";
	 
	_m4_7FFF_FFFF_FFFF_FFFF_FFFF	:string := "7FFF_FFFF_FFFF_FFFF_FFFF    ";
	_m4_8000_0000_0000_0000_0000	:string := "8000_0000_0000_0000_0000    ";
	_m4_FFFF_FFFF_FFFF_FFFF_FFFF	:string := "FFFF_FFFF_FFFF_FFFF_FFFF    ";
	_m4_1_0000_0000_0000_0000_0000	:string := "1_0000_0000_0000_0000_0000    ";

	_m4_7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF	:string := 
	 							"7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF    ";
	 
	_m4_8000_0000_0000_0000_0000_0000_0000_0000	:string := 
	 							"8000_0000_0000_0000_0000_0000_0000_0000    ";
	 
	_m4_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF	:string := 
								"FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF    ";



#if( printCmps )

	procedure printStrs
	( 
		src:dword in esi; 
		dest:dword in edi; 
		length:dword in ecx 
	);
	begin printStrs;

		push( edx );

		stdout.put(    "orig: '" );
		dec( ecx );
		stdout.write( [esi], ecx );
		inc( ecx );
		stdout.put( "'  >> " );
		for( mov( 0, edx ); edx<ecx; inc( edx )) do

			stdout.putb( [esi+edx] );

		endfor;

		stdout.put( nl "new:  '" );
		dec( ecx );
		stdout.write( [edi], ecx );
		inc( ecx );
		stdout.put( "'  >> " );
		for( mov( 0, edx ); edx<ecx; inc( edx )) do

			stdout.putb( [esi+edx] );

		endfor;
		stdout.newln();
		pop( edx );

	end printStrs;

#else

	#macro printStrs( a,b,c );
	#endmacro

#endif


static
	buffer	:char[256];
						 
begin internalFuncs_test;


				   
	#macro raiseifub32( expectedValue, raiseValue );


		mov( expectedValue, eax );
		conv.u32Size( eax );
		mov( eax, ecx );
		mov( expectedValue, eax );
		push( ecx );
		lea( edi, buffer[ecx] );
		conv._unsToBuf32( eax, ecx, [edi] );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	conv.setUnderscores( false );
	stderr.put( "Testing _unsToBuf32() with no underscores" nl );
	try

		raiseifub32( 0,           $3000 );
		raiseifub32( 1,           $3001 );
		raiseifub32( 127,         $3002 );
		raiseifub32( 128,         $3003 );
		raiseifub32( 255,         $3004 );
		raiseifub32( 256,         $3005 );
		raiseifub32( 32767,       $3006 );
		raiseifub32( 32768,       $3007 );
		raiseifub32( 65535,       $3008 );
		raiseifub32( 65536,       $3009 );
		raiseifub32( 2147483647,  $3010 );
		raiseifub32( 2147483648,  $3011 );
		raiseifub32( 4294967295,  $3012 );
		stdout.put( "_unsToBuf32 tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf32 tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;




	conv.setUnderscores( true );
	stderr.put( "Testing _unsToBuf32() with underscores" nl );
	try

		raiseifub32( 0,                    $3020 );
		raiseifub32( 1,                    $3021 );
		raiseifub32( 127,                  $3022 );
		raiseifub32( 128,                  $3023 );
		raiseifub32( 255,                  $3024 );
		raiseifub32( 256,                  $3025 );
		raiseifub32( 32_767,               $3026 );
		raiseifub32( 32_768,               $3027 );
		raiseifub32( 65_535,               $3028 );
		raiseifub32( 65_536,               $3029 );
		raiseifub32( 2_147_483_647,        $3030 );
		raiseifub32( 2_147_483_648,        $3031 );
		raiseifub32( 4_294_967_295,        $3032 );

		stdout.put( "_unsToBuf32 tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf32 tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;


/*---------------------------------------------------------------------------*/


	#macro raiseifub32Size( expectedValue, raiseValue );

		mov( expectedValue, eax );
		conv.u32Size( eax );
		mov( eax, ecx );
		lea( edx, [eax+4] );
		mov( expectedValue, eax );
		push( edx );
		lea( edi, buffer );
		conv._unsToBuf32Size( eax, edx, ecx, ' ', [edi], 256 );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_4_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro


	#macro _raiseifub32Size( expectedValue, raiseValue );


		mov( expectedValue, eax );
		conv.u32Size( eax );
		mov( eax, ecx );
		mov( eax, edx );
		lea( edx, [eax+4] );
		push( edx );
		neg( edx );
		mov( expectedValue, eax );
		lea( edi, buffer );
		conv._unsToBuf32Size( eax, edx, ecx, ' ', [edi], 256 );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_m4_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	conv.setUnderscores( false );
	stderr.put( "Testing _unsToBuf32Size() with no underscores" nl );
	try

		raiseifub32Size(                 0,  $3040 );
		raiseifub32Size(                 1,  $3041 );
		raiseifub32Size(               127,  $3042 );
		raiseifub32Size(               128,  $3043 );
		raiseifub32Size(               255,  $3044 );
		raiseifub32Size(               256,  $3045 );
		raiseifub32Size(             32767,  $3046 );
		raiseifub32Size(             32768,  $3047 );
		raiseifub32Size(             65535,  $3048 );
		raiseifub32Size(             65536,  $3049 );
		raiseifub32Size(        2147483647,  $3050 );
		raiseifub32Size(        2147483648,  $3051 );
		raiseifub32Size(        4294967295,  $3052 );

		_raiseifub32Size(                0,  $3060 );
		_raiseifub32Size(                1,  $3061 );
		_raiseifub32Size(              127,  $3062 );
		_raiseifub32Size(              128,  $3063 );
		_raiseifub32Size(              255,  $3064 );
		_raiseifub32Size(              256,  $3065 );
		_raiseifub32Size(            32767,  $3066 );
		_raiseifub32Size(            32768,  $3067 );
		_raiseifub32Size(            65535,  $3068 );
		_raiseifub32Size(            65536,  $3069 );
		_raiseifub32Size(       2147483647,  $3070 );
		_raiseifub32Size(       2147483648,  $3071 );
		_raiseifub32Size(       4294967295,  $3072 );

		

		try

			conv.dSize( eax );
			mov( 10, ecx );		// Width is too big.
			mov( 0, eax );
			lea( edi, buffer[ecx] );
			conv._hexToBuf32( eax, ecx, [edi] );
			raise( $3083 );	// Better not get here.

		  exception( ex.WidthTooBig )

			// This is the expected case

		endtry;
		stdout.put( "_unsToBuf32Size tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf32Size tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



	conv.setUnderscores( true );
	stderr.put( "Testing _unsToBuf32Size() with underscores" nl );
	try


		raiseifub32Size(              32_767,   $3086 );
		raiseifub32Size(              32_768,   $3087 );
		raiseifub32Size(              65_535,   $3088 );
		raiseifub32Size(              65_536,   $3089 );
		raiseifub32Size(       2_147_483_647,   $3090 );
		raiseifub32Size(       2_147_483_648,   $3091 );
		raiseifub32Size(       4_294_967_295,   $3092 );

		_raiseifub32Size(             32_767,   $3016 );
		_raiseifub32Size(             32_768,   $3017 );
		_raiseifub32Size(             65_535,   $3018 );
		_raiseifub32Size(             65_536,   $3019 );
		_raiseifub32Size(      2_147_483_647,   $3020 );
		_raiseifub32Size(      2_147_483_648,   $3021 );
		_raiseifub32Size(      4_294_967_295,   $3022 );

		

		try

			conv.dSize( eax );
			mov( 10, ecx );		// Width is too big.
			mov( 0, eax );
			lea( edi, buffer[ecx] );
			conv._hexToBuf32( eax, ecx, [edi] );
			raise( $3023 );	// Better not get here.

		  exception( ex.WidthTooBig )

			// This is the expected case

		endtry;
		stdout.put( "_unsToBuf32Size tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf32Size tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;





/*---------------------------------------------------------------------------*/
		   
	#macro raiseifub64( expectedValue, raiseValue );

		conv.u64Size( expectedValue );
		mov( eax, ecx );
		push( ecx );
		lea( edi, buffer[ecx] );
		conv._unsToBuf64( expectedValue, ecx, [edi] );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	conv.setUnderscores( false );
	stderr.put( "Testing _unsToBuf64() with no underscores" nl );
	try

		raiseifub64(                    0,  $3000 );
		raiseifub64(                    1,  $3001 );
		raiseifub64(                  127,  $3002 );
		raiseifub64(                  128,  $3003 );
		raiseifub64(                  255,  $3004 );
		raiseifub64(                  256,  $3005 );
		raiseifub64(                32767,  $3006 );
		raiseifub64(                32768,  $3007 );
		raiseifub64(                65535,  $3008 );
		raiseifub64(                65536,  $3009 );
		raiseifub64(           2147483647,  $3010 );
		raiseifub64(           2147483648,  $3011 );
		raiseifub64(           4294967295,  $3012 );
		raiseifub64(           4294967296,  $3013 );
		raiseifub64(  9223372036854775807,  $3014 );
		raiseifub64(  9223372036854775808,  $3015 );
		raiseifub64( 18446744073709551615,  $3016 );
		stdout.put( "_unsToBuf64 tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf64 tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;




	conv.setUnderscores( true );
	stderr.put( "Testing _unsToBuf64() with underscores" nl );
	try

		raiseifub64(                          0,  $3020 );
		raiseifub64(                          1,  $3021 );
		raiseifub64(                        127,  $3022 );
		raiseifub64(                        128,  $3023 );
		raiseifub64(                        255,  $3024 );
		raiseifub64(                        256,  $3025 );
		raiseifub64(                     32_767,  $3026 );
		raiseifub64(                     32_768,  $3027 );
		raiseifub64(                     65_535,  $3028 );
		raiseifub64(                     65_536,  $3029 );
		raiseifub64(              2_147_483_647,  $3030 );
		raiseifub64(              2_147_483_648,  $3031 );
		raiseifub64(              4_294_967_295,  $3032 );
		raiseifub64(              4_294_967_296,  $3033 );
		raiseifub64(  9_223_372_036_854_775_807,  $3034 );
		raiseifub64(  9_223_372_036_854_775_808,  $3035 );
		raiseifub64( 18_446_744_073_709_551_615,  $3036 );

		stdout.put( "_unsToBuf64 tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf64 tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



/*---------------------------------------------------------------------------*/

	#macro raiseifub64Size( expectedValue, raiseValue );

		conv.u64Size( expectedValue );
		mov( eax, ecx );
		lea( edx, [eax+4] );
		push( edx );
		lea( edi, buffer );
		conv._unsToBuf64Size( expectedValue, edx, ecx, ' ', [edi], 256 );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_4_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	#macro _raiseifub64Size( expectedValue, raiseValue );

		conv.u64Size( expectedValue );
		mov( eax, ecx );
		mov( eax, edx );
		lea( edx, [eax+4] );
		push( edx );
		neg( edx );
		lea( edi, buffer );
		conv._unsToBuf64Size( expectedValue, edx, ecx, ' ', [edi], 256 );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_m4_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	conv.setUnderscores( false );
	stderr.put( "Testing _unsToBuf64Size() with no underscores" nl );
	try

		raiseifub64Size(                    0,  $3040 );
		raiseifub64Size(                    1,  $3041 );
		raiseifub64Size(                  127,  $3042 );
		raiseifub64Size(                  128,  $3043 );
		raiseifub64Size(                  255,  $3044 );
		raiseifub64Size(                  256,  $3045 );
		raiseifub64Size(                32767,  $3046 );
		raiseifub64Size(                32768,  $3047 );
		raiseifub64Size(                65535,  $3048 );
		raiseifub64Size(                65536,  $3049 );
		raiseifub64Size(           2147483647,  $304a );
		raiseifub64Size(           2147483648,  $304b );
		raiseifub64Size(           4294967295,  $304c );
		raiseifub64Size(           4294967296,  $304d );
		raiseifub64Size(  9223372036854775807,  $304e );
		raiseifub64Size(  9223372036854775808,  $304f );
		raiseifub64Size( 18446744073709551615,  $30a0 );
		
		_raiseifub64Size(                    0,  $3050 );
		_raiseifub64Size(                    1,  $3051 );
		_raiseifub64Size(                  127,  $3052 );
		_raiseifub64Size(                  128,  $3053 );
		_raiseifub64Size(                  255,  $3054 );
		_raiseifub64Size(                  256,  $3055 );
		_raiseifub64Size(                32767,  $3056 );
		_raiseifub64Size(                32768,  $3057 );
		_raiseifub64Size(                65535,  $3058 );
		_raiseifub64Size(                65536,  $3059 );
		_raiseifub64Size(           2147483647,  $3060 );
		_raiseifub64Size(           2147483648,  $3061 );
		_raiseifub64Size(           4294967295,  $3062 );
		_raiseifub64Size(           4294967296,  $3063 );
		_raiseifub64Size(  9223372036854775807,  $3064 );
		_raiseifub64Size(  9223372036854775808,  $3065 );
		_raiseifub64Size( 18446744073709551615,  $3066 );

		stdout.put( "_unsToBuf64Size tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf64Size tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



	conv.setUnderscores( true );
	stderr.put( "Testing _intToBuf64Size() with underscores" nl );
	try


		raiseifub64Size(                     32_767,   $3076 );
		raiseifub64Size(                     32_768,   $3077 );
		raiseifub64Size(                     65_535,   $3078 );
		raiseifub64Size(                     65_536,   $3079 );
		raiseifub64Size(              2_147_483_647,   $3080 );
		raiseifub64Size(              2_147_483_648,   $3081 );
		raiseifub64Size(              4_294_967_295,   $3082 );
		raiseifub64Size(              4_294_967_296,   $3083 );
		raiseifub64Size(  9_223_372_036_854_775_807,   $3084 );
		raiseifub64Size(  9_223_372_036_854_775_808,   $3085 );
		raiseifub64Size( 18_446_744_073_709_551_615,   $3086 );

		_raiseifub64Size(                     32_767,  $3096 );
		_raiseifub64Size(                     32_768,  $3097 );
		_raiseifub64Size(                     65_535,  $3098 );
		_raiseifub64Size(                     65_536,  $3099 );
		_raiseifub64Size(              2_147_483_647,  $3100 );
		_raiseifub64Size(              2_147_483_648,  $3101 );
		_raiseifub64Size(              4_294_967_295,  $3102 );
		_raiseifub64Size(              4_294_967_296,  $3103 );
		_raiseifub64Size(  9_223_372_036_854_775_807,  $3104 );
		_raiseifub64Size(  9_223_372_036_854_775_808,  $3105 );
		_raiseifub64Size( 18_446_744_073_709_551_615,  $3106 );
		

		stdout.put( "_intToBuf64Size tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_intToBuf64Size tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;








/*---------------------------------------------------------------------------*/
		   
	#macro raiseifub128( expectedValue, raiseValue );

		conv.u128Size( expectedValue );
		mov( eax, ecx );
		push( ecx );
		lea( edi, buffer[ecx] );
		conv._unsToBuf128( expectedValue, ecx, [edi] );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	conv.setUnderscores( false );
	stderr.put( "Testing _unsToBuf128() with no underscores" nl );
	try

		raiseifub128(                                       0,  $3000 );
		raiseifub128(                                       1,  $3001 );
		raiseifub128(                                     127,  $3002 );
		raiseifub128(                                     128,  $3003 );
		raiseifub128(                                     255,  $3004 );
		raiseifub128(                                     256,  $3005 );
		raiseifub128(                                   32767,  $3006 );
		raiseifub128(                                   32768,  $3007 );
		raiseifub128(                                   65535,  $3008 );
		raiseifub128(                                   65536,  $3009 );
		raiseifub128(                              2147483647,  $3010 );
		raiseifub128(                              2147483648,  $3011 );
		raiseifub128(                              4294967295,  $3012 );
		raiseifub128(                              4294967296,  $3013 );
		raiseifub128(                     9223372036854775807,  $3014 );
		raiseifub128(                     9223372036854775808,  $3015 );
		raiseifub128(                    18446744073709551615,  $3016 );
		raiseifub128(                    18446744073709551616,  $3017 );
		raiseifub128( 170141183460469231731687303715884105727,  $3018 );
		raiseifub128( 170141183460469231731687303715884105728,  $3019 );
		raiseifub128( 340282366920938463463374607431768211455,  $301a );
		stdout.put( "_unsToBuf128 tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf128 tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;




	conv.setUnderscores( true );
	stderr.put( "Testing _unsToBuf128() with underscores" nl );
	try

		raiseifub128(                          0,  $3020 );
		raiseifub128(                          1,  $3021 );
		raiseifub128(                        127,  $3022 );
		raiseifub128(                        128,  $3023 );
		raiseifub128(                        255,  $3024 );
		raiseifub128(                        256,  $3025 );
		raiseifub128(                     32_767,  $3026 );
		raiseifub128(                     32_768,  $3027 );
		raiseifub128(                     65_535,  $3028 );
		raiseifub128(                     65_536,  $3029 );
		raiseifub128(              2_147_483_647,  $3030 );
		raiseifub128(              2_147_483_648,  $3031 );
		raiseifub128(              4_294_967_295,  $3032 );
		raiseifub128(              4_294_967_296,  $3033 );
		raiseifub128(  9_223_372_036_854_775_807,  $3034 );
		raiseifub128(  9_223_372_036_854_775_808,  $3035 );
		raiseifub128( 18_446_744_073_709_551_615,  $3036 );
		raiseifub128( 18_446_744_073_709_551_616,  $3017 );
		raiseifub128
		( 
			170_141_183_460_469_231_731_687_303_715_884_105_727,  
			$3018 
		);
		raiseifub128
		( 
			170_141_183_460_469_231_731_687_303_715_884_105_728,  
			$3019 
		);
		raiseifub128
		( 
			340_282_366_920_938_463_463_374_607_431_768_211_455,  
			$301a 
		);

		stdout.put( "_unsToBuf128 tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf128 tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



/*---------------------------------------------------------------------------*/


	#macro raiseifub128Size( expectedValue, raiseValue );

		conv.u128Size( expectedValue );
		mov( eax, ecx );
		lea( edx, [eax+4] );
		push( edx );
		lea( edi, buffer );
		conv._unsToBuf128Size( expectedValue, edx, ecx, ' ', [edi], 256 );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_4_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	#macro _raiseifub128Size( expectedValue, raiseValue );


		conv.u128Size( expectedValue );
		mov( eax, ecx );
		mov( eax, edx );
		lea( edx, [eax+4] );
		push( edx );
		neg( edx );
		lea( edi, buffer );
		conv._unsToBuf128Size( expectedValue, edx, ecx, ' ', [edi], 256 );
		pop( ecx );
		mov( 0, (type byte [edi+ecx] ));
		inc( ecx );
		mov(  @text( "_m4_" + @string( expectedValue )), esi );
		printStrs( esi, edi, ecx );
		cld();
		repe.cmpsb();

		if( @ne ) then

			raise( raiseValue );

		endif;

	#endmacro



	conv.setUnderscores( false );
	stderr.put( "Testing _unsToBuf128Size() with no underscores" nl );
	try

		raiseifub128Size(                                       0,  $3110 );
		raiseifub128Size(                                       1,  $3111 );
		raiseifub128Size(                                     127,  $3112 );
		raiseifub128Size(                                     128,  $3113 );
		raiseifub128Size(                                     255,  $3114 );
		raiseifub128Size(                                     256,  $3115 );
		raiseifub128Size(                                   32767,  $3116 );
		raiseifub128Size(                                   32768,  $3117 );
		raiseifub128Size(                                   65535,  $3118 );
		raiseifub128Size(                                   65536,  $3119 );
		raiseifub128Size(                              2147483647,  $3120 );
		raiseifub128Size(                              2147483648,  $3021 );
		raiseifub128Size(                              4294967295,  $3022 );
		raiseifub128Size(                              4294967296,  $3023 );
		raiseifub128Size(                     9223372036854775807,  $3024 );
		raiseifub128Size(                     9223372036854775808,  $3025 );
		raiseifub128Size(                    18446744073709551615,  $3026 );
		raiseifub128Size(                    18446744073709551616,  $3027 );
		raiseifub128Size( 170141183460469231731687303715884105727,  $3028 );
		raiseifub128Size( 170141183460469231731687303715884105728,  $3029 );
		raiseifub128Size( 340282366920938463463374607431768211455,  $302a );
		
		_raiseifub128Size(                                       0,  $3130 );
		_raiseifub128Size(                                       1,  $3131 );
		_raiseifub128Size(                                     127,  $3132 );
		_raiseifub128Size(                                     128,  $3133 );
		_raiseifub128Size(                                     255,  $3134 );
		_raiseifub128Size(                                     256,  $3135 );
		_raiseifub128Size(                                   32767,  $3136 );
		_raiseifub128Size(                                   32768,  $3137 );
		_raiseifub128Size(                                   65535,  $3138 );
		_raiseifub128Size(                                   65536,  $3139 );
		_raiseifub128Size(                              2147483647,  $3140 );
		_raiseifub128Size(                              2147483648,  $3041 );
		_raiseifub128Size(                              4294967295,  $3042 );
		_raiseifub128Size(                              4294967296,  $3043 );
		_raiseifub128Size(                     9223372036854775807,  $3044 );
		_raiseifub128Size(                     9223372036854775808,  $3045 );
		_raiseifub128Size(                    18446744073709551615,  $3046 );
		_raiseifub128Size(                    18446744073709551616,  $3047 );
		_raiseifub128Size( 170141183460469231731687303715884105727,  $3048 );
		_raiseifub128Size( 170141183460469231731687303715884105728,  $3049 );
		_raiseifub128Size( 340282366920938463463374607431768211455,  $304a );

		

		stdout.put( "_unsToBuf128Size tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf128Size tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



	conv.setUnderscores( true );
	stderr.put( "Testing _unsToBuf128Size() with underscores" nl );
	try


		raiseifub128Size(                     32_767,   $3156 );
		raiseifub128Size(                     32_768,   $3157 );
		raiseifub128Size(                     65_535,   $3158 );
		raiseifub128Size(                     65_536,   $3159 );
		raiseifub128Size(              2_147_483_647,   $3160 );
		raiseifub128Size(              2_147_483_648,   $3161 );
		raiseifub128Size(              4_294_967_295,   $3162 );
		raiseifub128Size(              4_294_967_296,   $3163 );
		raiseifub128Size(  9_223_372_036_854_775_807,   $3164 );
		raiseifub128Size(  9_223_372_036_854_775_808,   $3165 );
		raiseifub128Size( 18_446_744_073_709_551_615,   $3166 );
		raiseifub128Size( 18_446_744_073_709_551_616,   $3167 );
		raiseifub128Size
		( 
			170_141_183_460_469_231_731_687_303_715_884_105_727,   
			$3168 
		);
		raiseifub128Size
		( 
			170_141_183_460_469_231_731_687_303_715_884_105_728,   
			$3169 
		);
		raiseifub128Size
		( 
			340_282_366_920_938_463_463_374_607_431_768_211_455,   
			$316a 
		);

		_raiseifub128Size(             32_767,   $3176 );
		_raiseifub128Size(             32_768,   $3177 );
		_raiseifub128Size(             65_535,   $3178 );
		_raiseifub128Size(             65_536,   $3179 );
		_raiseifub128Size(      2_147_483_647,   $3180 );
		_raiseifub128Size(      2_147_483_648,   $3181 );
		_raiseifub128Size(              4_294_967_295,   $3162 );
		_raiseifub128Size(              4_294_967_296,   $3163 );
		_raiseifub128Size(  9_223_372_036_854_775_807,   $3164 );
		_raiseifub128Size(  9_223_372_036_854_775_808,   $3165 );
		_raiseifub128Size( 18_446_744_073_709_551_615,   $3166 );
		_raiseifub128Size( 18_446_744_073_709_551_616,   $3167 );
		_raiseifub128Size
		( 
			170_141_183_460_469_231_731_687_303_715_884_105_727,   
			$3168 
		);
		_raiseifub128Size
		( 
			170_141_183_460_469_231_731_687_303_715_884_105_728,   
			$3169 
		);
		_raiseifub128Size
		( 
			340_282_366_920_938_463_463_374_607_431_768_211_455,   
			$316a 
		);

		stdout.put( "_unsToBuf128Size tests succeeded!" nl nl );

	  anyexception

		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"_unsToBuf128Size tests failed! Exception = ", eax,  nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;








/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/





	stderr.put( "Internal function tests #3 succeeded!" nl );
			
end internalFuncs_test;

													