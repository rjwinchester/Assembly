program convetostr_test;
#include( "stdlib.hhf" )

static
	bufstr		:string;
	buf			:str.strvar(256);

	
	#macro bufTest( function, theValue, strValue, width, exceptionValue ):_s_, _t_;
	
//		?_s_ :string := @string( function );
//		?_t_ := @string( width );
//		stdout.put( "Testing " + _s_ + "( " + strValue + ", " + _t_ + " )" nl );
		@text( "conv." + @string( function )) ( theValue, width, buf );
		if( str.ne( buf, strValue ) ) then

			printCmp( @string( function ), strValue, buf );
			raise( exceptionValue );

		endif;

		@text( "conv.a_" + @string( function )) ( theValue, width );
		mov( eax, bufstr );
		if( str.ne( bufstr, strValue ) ) then

			printCmp( "conv.a_" + @string( function ), strValue, bufstr );
			raise( exceptionValue );

		endif;
		str.free( bufstr );

	#endmacro
	
	
	procedure printCmp( function:string; strValue:string; was:string );
	begin printCmp;
	
		stderr.put( function, " failed!" nl);
		stderr.put( "Should be '", strValue, "'" nl );
		stderr.put( "     was: '", was, "'" nl );
	
	end printCmp;


type
	e32_t:
		record
			e32		:real32;
			str32	:string;
			xVal	:dword;
			width	:uns32;
		endrecord;
		
	
val
	curXVal	:dword := $32_0000;
		
	#macro _e32( eVal, sVal );
	
		e32_t:[ eVal, sVal, curXVal, @length( sVal )]
		?curXVal := curXVal + 1; 
		
	#endmacro
		
const
	e32Array	:e32_t[] :=
		[
			_e32( 1.0e0  ,  "#####" ),
			_e32( 1.0e0  ,  "######" ),
			_e32( 1.0e0  ,  "#######" ),
			_e32( 1.0e0  ,  " 1.0e+00" ),
			_e32( 1.0e0  ,  " 1.00e+00" ),
			_e32( 1.0e0  ,  " 1.000e+00" ),
			_e32( 1.0e0  ,  " 1.0000e+00" ),
			_e32( 1.0e0  ,  " 1.00000e+00" ),
			
			_e32(     0.0,  " 0.000000e+00" ),
			_e32(     1.0,  " 1.000000e+00" ),
			_e32(     2.0,  " 2.000000e+00" ),
			_e32(     3.0,  " 3.000000e+00" ),
			_e32(     4.0,  " 4.000000e+00" ),
			_e32(     5.0,  " 5.000000e+00" ),
			_e32(     6.0,  " 6.000000e+00" ),
			_e32(     7.0,  " 7.000000e+00" ),
			_e32(     8.0,  " 8.000000e+00" ),
			_e32(     9.0,  " 9.000000e+00" ),
			_e32(    10.0,  " 1.000000e+01" ),
			_e32(    20.0,  " 2.000000e+01" ),
			_e32(    30.0,  " 3.000000e+01" ),
			_e32(    40.0,  " 4.000000e+01" ),
			_e32(    50.0,  " 5.000000e+01" ),
			_e32(    60.0,  " 6.000000e+01" ),
			_e32(    70.0,  " 7.000000e+01" ),
			_e32(    80.0,  " 8.000000e+01" ),
			_e32(    90.0,  " 9.000000e+01" ),
			_e32(   100.0,  " 1.000000e+02" ),
			_e32(   200.0,  " 2.000000e+02" ),
			_e32(   300.0,  " 3.000000e+02" ),
			_e32(   400.0,  " 4.000000e+02" ),
			_e32(   500.0,  " 5.000000e+02" ),
			_e32(   600.0,  " 6.000000e+02" ),
			_e32(   700.0,  " 7.000000e+02" ),
			_e32(   800.0,  " 8.000000e+02" ),
			_e32(   900.0,  " 9.000000e+02" ),
			_e32(  1000.0,  " 1.000000e+03" ),
			_e32(  2000.0,  " 2.000000e+03" ),
			_e32(  3000.0,  " 3.000000e+03" ),
			_e32(  4000.0,  " 4.000000e+03" ),
			_e32(  5000.0,  " 5.000000e+03" ),
			_e32(  6000.0,  " 6.000000e+03" ),
			_e32(  7000.0,  " 7.000000e+03" ),
			_e32(  8000.0,  " 8.000000e+03" ),
			_e32(  9000.0,  " 9.000000e+03" ),
			_e32( 10000.0,  " 1.000000e+04" ),
			_e32( 1.0e5  ,  " 1.000000e+05" ),
			_e32( 1.0e6  ,  " 1.000000e+06" ),
			_e32( 1.0e7  ,  " 1.000000e+07" ),
			_e32( 1.0e8  ,  " 1.000000e+08" ),
			_e32( 1.0e9  ,  " 1.000000e+09" ),
			_e32( 1.0e10 ,  " 1.000000e+10" ),
			_e32( 1.0e11 ,  " 1.000000e+11" ),
			_e32( 1.0e12 ,  " 1.000000e+12" ),
			_e32( 1.0e13 ,  " 1.000000e+13" ),
			_e32( 1.0e14 ,  " 1.000000e+14" ),
			_e32( 1.0e15 ,  " 1.000000e+15" ),
			_e32( 1.0e16 ,  " 1.000000e+16" ),
			_e32( 1.0e17 ,  " 1.000000e+17" ),
			_e32( 1.0e18 ,  " 1.000000e+18" ),
			_e32( 1.0e19 ,  " 1.000000e+19" ),
			_e32( 1.0e20 ,  " 1.000000e+20" ),
			_e32( 1.0e21 ,  " 1.000000e+21" ),
			_e32( 1.0e22 ,  " 1.000000e+22" ),
			_e32( 1.0e23 ,  " 1.000000e+23" ),
			_e32( 1.0e24 ,  " 1.000000e+24" ),
			_e32( 1.0e25 ,  " 1.000000e+25" ),
			_e32( 1.0e26 ,  " 1.000000e+26" ),
			_e32( 1.0e27 ,  " 1.000000e+27" ),
			_e32( 1.0e28 ,   " 1.00000e+28" ),	// FPU inaccuracy
			_e32( 1.0e29 ,  " 1.000000e+29" ),
			_e32( 1.0e30 ,  " 1.000000e+30" ),
			_e32( 1.0e31 ,  " 1.000000e+31" ),
			_e32( 1.0e32 ,  " 1.000000e+32" ),
			_e32( 1.0e33 ,  " 1.000000e+33" ),
			_e32( 1.0e34 ,  " 1.000000e+34" ),
			_e32( 1.0e35 ,  " 1.000000e+35" ),
			_e32( 1.0e36 ,  " 1.000000e+36" ),
			_e32( 1.0e37 ,  " 1.000000e+37" ),
			_e32( 1.0e38 ,  " 1.000000e+38" ),
			
			_e32( 1.0e-1  , " 1.000000e-01" ),
			_e32( 1.0e-2  , " 1.000000e-02" ),
			_e32( 1.0e-3  , " 1.000000e-03" ),
			_e32( 1.0e-4  , " 1.000000e-04" ),
			_e32( 1.0e-5  , " 1.000000e-05" ),
			_e32( 1.0e-6  , " 1.000000e-06" ),
			_e32( 1.0e-7  , " 1.000000e-07" ),
			_e32( 1.0e-8  , " 1.000000e-08" ),
			_e32( 1.0e-9  , " 1.000000e-09" ),
			_e32( 1.0e-10 , " 1.000000e-10" ),
			_e32( 1.0e-11 , " 1.000000e-11" ),
			_e32( 1.0e-12 , " 1.000000e-12" ),
			_e32( 1.0e-13 , " 1.000000e-13" ),
			_e32( 1.0e-14 , " 1.000000e-14" ),
			_e32( 1.0e-15 , " 1.000000e-15" ),
			_e32( 1.0e-16 , " 1.000000e-16" ),
			_e32( 1.0e-17 , " 1.000000e-17" ),
			_e32( 1.0e-18 , " 1.000000e-18" ),
			_e32( 1.0e-19 , " 1.000000e-19" ),
			_e32( 1.0e-20 , " 1.000000e-20" ),
			_e32( 1.0e-21 , " 1.000000e-21" ),
			_e32( 1.0e-22 , " 1.000000e-22" ),
			_e32( 1.0e-23 , " 1.000000e-23" ),
			_e32( 1.0e-24 , " 1.000000e-24" ),
			_e32( 1.0e-25 , " 1.000000e-25" ),
			_e32( 1.0e-26 , " 1.000000e-26" ),
			_e32( 1.0e-27 , " 1.000000e-27" ),
			_e32( 1.0e-28 ,  " 1.00000e-28" ),	// FPU inaccuracy
			_e32( 1.0e-29 , " 1.000000e-29" ),
			_e32( 1.0e-30 , " 1.000000e-30" ),
			_e32( 1.0e-31 , " 1.000000e-31" ),
			_e32( 1.0e-32 , " 1.000000e-32" ),
			_e32( 1.0e-33 , " 1.000000e-33" ),
			_e32( 1.0e-34 , " 1.000000e-34" ),
			_e32( 1.0e-35 , " 1.000000e-35" ),
			_e32( 1.0e-36 , " 1.000000e-36" ),
			_e32( 1.0e-37 , " 1.000000e-37" ),
			
			_e32(     -1.0, "-1.000000e+00" ),
			_e32(     -2.0, "-2.000000e+00" ),
			_e32(     -3.0, "-3.000000e+00" ),
			_e32(     -4.0, "-4.000000e+00" ),
			_e32(     -5.0, "-5.000000e+00" ),
			_e32(     -6.0, "-6.000000e+00" ),
			_e32(     -7.0, "-7.000000e+00" ),
			_e32(     -8.0, "-8.000000e+00" ),
			_e32(     -9.0, "-9.000000e+00" ),
			_e32(    -10.0, "-1.000000e+01" ),
			_e32(    -20.0, "-2.000000e+01" ),
			_e32(    -30.0, "-3.000000e+01" ),
			_e32(    -40.0, "-4.000000e+01" ),
			_e32(    -50.0, "-5.000000e+01" ),
			_e32(    -60.0, "-6.000000e+01" ),
			_e32(    -70.0, "-7.000000e+01" ),
			_e32(    -80.0, "-8.000000e+01" ),
			_e32(    -90.0, "-9.000000e+01" ),
			_e32(   -100.0, "-1.000000e+02" ),
			_e32(   -200.0, "-2.000000e+02" ),
			_e32(   -300.0, "-3.000000e+02" ),
			_e32(   -400.0, "-4.000000e+02" ),
			_e32(   -500.0, "-5.000000e+02" ),
			_e32(   -600.0, "-6.000000e+02" ),
			_e32(   -700.0, "-7.000000e+02" ),
			_e32(   -800.0, "-8.000000e+02" ),
			_e32(   -900.0, "-9.000000e+02" ),
			_e32(  -1000.0, "-1.000000e+03" ),
			_e32(  -2000.0, "-2.000000e+03" ),
			_e32(  -3000.0, "-3.000000e+03" ),
			_e32(  -4000.0, "-4.000000e+03" ),
			_e32(  -5000.0, "-5.000000e+03" ),
			_e32(  -6000.0, "-6.000000e+03" ),
			_e32(  -7000.0, "-7.000000e+03" ),
			_e32(  -8000.0, "-8.000000e+03" ),
			_e32(  -9000.0, "-9.000000e+03" ),
			_e32( -10000.0, "-1.000000e+04" ),
			_e32( -1.0e5  , "-1.000000e+05" ),
			_e32( -1.0e6  , "-1.000000e+06" ),
			_e32( -1.0e7  , "-1.000000e+07" ),
			_e32( -1.0e8  , "-1.000000e+08" ),
			_e32( -1.0e9  , "-1.000000e+09" ),
			_e32( -1.0e10 , "-1.000000e+10" ),
			_e32( -1.0e11 , "-1.000000e+11" ),
			_e32( -1.0e12 , "-1.000000e+12" ),
			_e32( -1.0e13 , "-1.000000e+13" ),
			_e32( -1.0e14 , "-1.000000e+14" ),
			_e32( -1.0e15 , "-1.000000e+15" ),
			_e32( -1.0e16 , "-1.000000e+16" ),
			_e32( -1.0e17 , "-1.000000e+17" ),
			_e32( -1.0e18 , "-1.000000e+18" ),
			_e32( -1.0e19 , "-1.000000e+19" ),
			_e32( -1.0e20 , "-1.000000e+20" ),
			_e32( -1.0e21 , "-1.000000e+21" ),
			_e32( -1.0e22 , "-1.000000e+22" ),
			_e32( -1.0e23 , "-1.000000e+23" ),
			_e32( -1.0e24 , "-1.000000e+24" ),
			_e32( -1.0e25 , "-1.000000e+25" ),
			_e32( -1.0e26 , "-1.000000e+26" ),
			_e32( -1.0e27 , "-1.000000e+27" ),
			_e32( -1.0e28 ,  "-1.00000e+28" ),	// FPU inaccuracy
			_e32( -1.0e29 , "-1.000000e+29" ),
			_e32( -1.0e30 , "-1.000000e+30" ),
			_e32( -1.0e31 , "-1.000000e+31" ),
			_e32( -1.0e32 , "-1.000000e+32" ),
			_e32( -1.0e33 , "-1.000000e+33" ),
			_e32( -1.0e34 , "-1.000000e+34" ),
			_e32( -1.0e35 , "-1.000000e+35" ),
			_e32( -1.0e36 , "-1.000000e+36" ),
			_e32( -1.0e37 , "-1.000000e+37" ),
			_e32( -1.0e38 , "-1.000000e+38" ),
			
			_e32( -1.0e-1  , "-1.00000e-01" ),
			_e32( -1.0e-2  , "-1.00000e-02" ),
			_e32( -1.0e-3  , "-1.00000e-03" ),
			_e32( -1.0e-4  , "-1.00000e-04" ),
			_e32( -1.0e-5  , "-1.00000e-05" ),
			_e32( -1.0e-6  , "-1.00000e-06" ),
			_e32( -1.0e-7  , "-1.00000e-07" ),
			_e32( -1.0e-8  , "-1.00000e-08" ),
			_e32( -1.0e-9  , "-1.00000e-09" ),
			_e32( -1.0e-10 , "-1.00000e-10" ),
			_e32( -1.0e-11 , "-1.00000e-11" ),
			_e32( -1.0e-12 , "-1.00000e-12" ),
			_e32( -1.0e-13 , "-1.00000e-13" ),
			_e32( -1.0e-14 , "-1.00000e-14" ),
			_e32( -1.0e-15 , "-1.00000e-15" ),
			_e32( -1.0e-16 , "-1.00000e-16" ),
			_e32( -1.0e-17 , "-1.00000e-17" ),
			_e32( -1.0e-18 , "-1.00000e-18" ),
			_e32( -1.0e-19 , "-1.00000e-19" ),
			_e32( -1.0e-20 , "-1.00000e-20" ),
			_e32( -1.0e-21 , "-1.00000e-21" ),
			_e32( -1.0e-22 , "-1.00000e-22" ),
			_e32( -1.0e-23 , "-1.00000e-23" ),
			_e32( -1.0e-24 , "-1.00000e-24" ),
			_e32( -1.0e-25 , "-1.00000e-25" ),
			_e32( -1.0e-26 , "-1.00000e-26" ),
			_e32( -1.0e-27 , "-1.00000e-27" ),
			_e32( -1.0e-28 , "-1.00000e-28" ),
			_e32( -1.0e-29 , "-1.00000e-29" ),
			_e32( -1.0e-30 , "-1.00000e-30" ),
			_e32( -1.0e-31 , "-1.00000e-31" ),
			_e32( -1.0e-32 , "-1.00000e-32" ),
			_e32( -1.0e-33 , "-1.00000e-33" ),
			_e32( -1.0e-34 , "-1.00000e-34" ),
			_e32( -1.0e-35 , "-1.00000e-35" ),
			_e32( -1.0e-36 , "-1.00000e-36" ),
			_e32( -1.0e-37 , "-1.00000e-37" )
			
		];
		


		
		
val
	curXVal	:dword := $64_0000;

type
	e64_t:
		record
			e64		:real64;
			str64	:string;
			xVal	:dword;
			width	:uns32;
		endrecord;
		
	

	#macro _e64( eVal, sVal );
	
		e64_t:[ eVal, sVal, curXVal, @length( sVal )]
		?curXVal := curXVal + 1; 
		
	#endmacro
		
const
	e64Array	:e64_t[] :=
		[
			_e64( 1.0e0  ,   "#####" ),
			_e64( 1.0e0  ,   "######" ),
			_e64( 1.0e0  ,   "#######" ),
			_e64( 1.0e0  ,   "########" ),
			_e64( 1.0e0  ,   " 1.0e+000" ),
			_e64( 1.0e0  ,   " 1.00e+000" ),
			_e64( 1.0e0  ,   " 1.000e+000" ),
			_e64( 1.0e0  ,   " 1.00000e+000" ),
			_e64( 1.0e0  ,   " 1.000000e+000" ),
			_e64( 1.0e0  ,   " 1.0000000e+000" ),
			_e64( 1.0e0  ,   " 1.00000000e+000" ),
			_e64( 1.0e0  ,   " 1.000000000e+000" ),
			_e64( 1.0e0  ,   " 1.0000000000e+000" ),
			_e64( 1.0e0  ,   " 1.00000000000e+000" ),
			_e64( 1.0e0  ,   " 1.000000000000e+000" ),
			_e64( 1.0e0  ,   " 1.0000000000000e+000" ),

			_e64(     1.0,   " 1.000000000000e+000" ),
			_e64(     2.0,   " 2.000000000000e+000" ),
			_e64(     3.0,   " 3.000000000000e+000" ),
			_e64(     4.0,   " 4.000000000000e+000" ),
			_e64(     5.0,   " 5.000000000000e+000" ),
			_e64(     6.0,   " 6.000000000000e+000" ),
			_e64(     7.0,   " 7.000000000000e+000" ),
			_e64(     8.0,   " 8.000000000000e+000" ),
			_e64(     9.0,   " 9.000000000000e+000" ),
			_e64(    10.0,   " 1.000000000000e+001" ),
			_e64(    20.0,   " 2.000000000000e+001" ),
			_e64(    30.0,   " 3.000000000000e+001" ),
			_e64(    40.0,   " 4.000000000000e+001" ),
			_e64(    50.0,   " 5.000000000000e+001" ),
			_e64(    60.0,   " 6.000000000000e+001" ),
			_e64(    70.0,   " 7.000000000000e+001" ),
			_e64(    80.0,   " 8.000000000000e+001" ),
			_e64(    90.0,   " 9.000000000000e+001" ),
			_e64(   100.0,   " 1.000000000000e+002" ),
			_e64(   200.0,   " 2.000000000000e+002" ),
			_e64(   300.0,   " 3.000000000000e+002" ),
			_e64(   400.0,   " 4.000000000000e+002" ),
			_e64(   500.0,   " 5.000000000000e+002" ),
			_e64(   600.0,   " 6.000000000000e+002" ),
			_e64(   700.0,   " 7.000000000000e+002" ),
			_e64(   800.0,   " 8.000000000000e+002" ),
			_e64(   900.0,   " 9.000000000000e+002" ),
			_e64(  1000.0,   " 1.000000000000e+003" ),
			_e64(  2000.0,   " 2.000000000000e+003" ),
			_e64(  3000.0,   " 3.000000000000e+003" ),
			_e64(  4000.0,   " 4.000000000000e+003" ),
			_e64(  5000.0,   " 5.000000000000e+003" ),
			_e64(  6000.0,   " 6.000000000000e+003" ),
			_e64(  7000.0,   " 7.000000000000e+003" ),
			_e64(  8000.0,   " 8.000000000000e+003" ),
			_e64(  9000.0,   " 9.000000000000e+003" ),
			_e64( 10000.0,   " 1.000000000000e+004" ),
			_e64( 1.0e5  ,   " 1.000000000000e+005" ),
			_e64( 1.0e6  ,   " 1.000000000000e+006" ),
			_e64( 1.0e7  ,   " 1.000000000000e+007" ),
			_e64( 1.0e8  ,   " 1.000000000000e+008" ),
			_e64( 1.0e9  ,   " 1.000000000000e+009" ),
			_e64( 1.0e10 ,   " 1.000000000000e+010" ),
			_e64( 1.0e11 ,   " 1.000000000000e+011" ),
			_e64( 1.0e12 ,   " 1.000000000000e+012" ),
			_e64( 1.0e13 ,   " 1.000000000000e+013" ),
			_e64( 1.0e14 ,   " 1.000000000000e+014" ),
			_e64( 1.0e15 ,   " 1.000000000000e+015" ),
			_e64( 1.0e16 ,   " 1.000000000000e+016" ),
			_e64( 1.0e17 ,   " 1.000000000000e+017" ),
			_e64( 1.0e18 ,   " 1.000000000000e+018" ),
			_e64( 1.0e19 ,   " 1.000000000000e+019" ),
			_e64( 1.0e20 ,   " 1.000000000000e+020" ),
			_e64( 1.0e21 ,   " 1.000000000000e+021" ),
			_e64( 1.0e22 ,   " 1.000000000000e+022" ),
			_e64( 1.0e23 ,   " 1.000000000000e+023" ),
			_e64( 1.0e24 ,   " 1.000000000000e+024" ),
			_e64( 1.0e25 ,   " 1.000000000000e+025" ),
			_e64( 1.0e26 ,   " 1.000000000000e+026" ),
			_e64( 1.0e27 ,   " 1.000000000000e+027" ),
			_e64( 1.0e28 ,   " 1.000000000000e+028" ),
			_e64( 1.0e29 ,   " 1.000000000000e+029" ),
			_e64( 1.0e30 ,   " 1.000000000000e+030" ),
			_e64( 1.0e31 ,   " 1.000000000000e+031" ),
			_e64( 1.0e32 ,   " 1.000000000000e+032" ),
			_e64( 1.0e33 ,   " 1.000000000000e+033" ),
			_e64( 1.0e34 ,   " 1.000000000000e+034" ),
			_e64( 1.0e35 ,   " 1.000000000000e+035" ),
			_e64( 1.0e36 ,   " 1.000000000000e+036" ),
			_e64( 1.0e37 ,   " 1.000000000000e+037" ),
			_e64( 1.0e38 ,   " 1.000000000000e+038" ),
			_e64( 1.0e40 ,   " 1.000000000000e+040" ),
			_e64( 1.0e50 ,   " 1.000000000000e+050" ),
			_e64( 1.0e60 ,   " 1.000000000000e+060" ),
			_e64( 1.0e70 ,   " 1.000000000000e+070" ),
			_e64( 1.0e80 ,   " 1.000000000000e+080" ),
			_e64( 1.0e90 ,   " 1.000000000000e+090" ),
			_e64( 1.0e100,   " 1.000000000000e+100" ),
			_e64( 1.0e110,   " 1.000000000000e+110" ),
			_e64( 1.0e120,   " 1.000000000000e+120" ),
			_e64( 1.0e130,   " 1.000000000000e+130" ),
			_e64( 1.0e140,   " 1.000000000000e+140" ),
			_e64( 1.0e150,   " 1.000000000000e+150" ),
			_e64( 1.0e160,   " 1.000000000000e+160" ),
			_e64( 1.0e170,   " 1.000000000000e+170" ),
			_e64( 1.0e180,   " 1.000000000000e+180" ),
			_e64( 1.0e190,   " 1.000000000000e+190" ),
			_e64( 1.0e200,   " 1.000000000000e+200" ),
			_e64( 1.0e210,   " 1.000000000000e+210" ),
			_e64( 1.0e220,   " 1.000000000000e+220" ),
			_e64( 1.0e230,   " 1.000000000000e+230" ),
			_e64( 1.0e240,   " 1.000000000000e+240" ),
			_e64( 1.0e250,   " 1.000000000000e+250" ),
			_e64( 1.0e260,   " 1.000000000000e+260" ),
			_e64( 1.0e270,   " 1.000000000000e+270" ),
			_e64( 1.0e280,   " 1.000000000000e+280" ),
			_e64( 1.0e290,   " 1.000000000000e+290" ),
			_e64( 1.0e300,   " 1.000000000000e+300" ),
			
			_e64( 1.0e-1  ,  " 1.000000000000e-001" ),
			_e64( 1.0e-2  ,  " 1.000000000000e-002" ),
			_e64( 1.0e-3  ,  " 1.000000000000e-003" ),
			_e64( 1.0e-4  ,  " 1.000000000000e-004" ),
			_e64( 1.0e-5  ,  " 1.000000000000e-005" ),
			_e64( 1.0e-6  ,  " 1.000000000000e-006" ),
			_e64( 1.0e-7  ,  " 1.000000000000e-007" ),
			_e64( 1.0e-8  ,  " 1.000000000000e-008" ),
			_e64( 1.0e-9  ,  " 1.000000000000e-009" ),
			_e64( 1.0e-10 ,  " 1.000000000000e-010" ),
			_e64( 1.0e-11 ,  " 1.000000000000e-011" ),
			_e64( 1.0e-12 ,  " 1.000000000000e-012" ),
			_e64( 1.0e-13 ,  " 1.000000000000e-013" ),
			_e64( 1.0e-14 ,  " 1.000000000000e-014" ),
			_e64( 1.0e-15 ,  " 1.000000000000e-015" ),
			_e64( 1.0e-16 ,  " 1.000000000000e-016" ),
			_e64( 1.0e-17 ,  " 1.000000000000e-017" ),
			_e64( 1.0e-18 ,  " 1.000000000000e-018" ),
			_e64( 1.0e-19 ,  " 1.000000000000e-019" ),
			_e64( 1.0e-20 ,  " 1.000000000000e-020" ),
			_e64( 1.0e-21 ,  " 1.000000000000e-021" ),
			_e64( 1.0e-22 ,  " 1.000000000000e-022" ),
			_e64( 1.0e-23 ,  " 1.000000000000e-023" ),
			_e64( 1.0e-24 ,  " 1.000000000000e-024" ),
			_e64( 1.0e-25 ,  " 1.000000000000e-025" ),
			_e64( 1.0e-26 ,  " 1.000000000000e-026" ),
			_e64( 1.0e-27 ,  " 1.000000000000e-027" ),
			_e64( 1.0e-28 ,  " 1.000000000000e-028" ),
			_e64( 1.0e-29 ,  " 1.000000000000e-029" ),
			_e64( 1.0e-30 ,  " 1.000000000000e-030" ),
			_e64( 1.0e-31 ,  " 1.000000000000e-031" ),
			_e64( 1.0e-32 ,  " 1.000000000000e-032" ),
			_e64( 1.0e-33 ,  " 1.000000000000e-033" ),
			_e64( 1.0e-34 ,  " 1.000000000000e-034" ),
			_e64( 1.0e-35 ,  " 1.000000000000e-035" ),
			_e64( 1.0e-36 ,  " 1.000000000000e-036" ),
			_e64( 1.0e-37 ,  " 1.000000000000e-037" ),
			_e64( 1.0e-38 ,  " 1.000000000000e-038" ),
			_e64( 1.0e-40 ,  " 1.000000000000e-040" ),
			_e64( 1.0e-50 ,  " 1.000000000000e-050" ),
			_e64( 1.0e-60 ,  " 1.000000000000e-060" ),
			_e64( 1.0e-70 ,  " 1.000000000000e-070" ),
			_e64( 1.0e-80 ,  " 1.000000000000e-080" ),
			_e64( 1.0e-90 ,  " 1.000000000000e-090" ),
			_e64( 1.0e-100,  " 1.000000000000e-100" ),
			_e64( 1.0e-110,  " 1.000000000000e-110" ),
			_e64( 1.0e-120,  " 1.000000000000e-120" ),
			_e64( 1.0e-130,  " 1.000000000000e-130" ),
			_e64( 1.0e-140,  " 1.000000000000e-140" ),
			_e64( 1.0e-150,  " 1.000000000000e-150" ),
			_e64( 1.0e-160,  " 1.000000000000e-160" ),
			_e64( 1.0e-170,  " 1.000000000000e-170" ),
			_e64( 1.0e-180,  " 1.000000000000e-180" ),
			_e64( 1.0e-190,  " 1.000000000000e-190" ),
			_e64( 1.0e-200,  " 1.000000000000e-200" ),
			_e64( 1.0e-210,  " 1.000000000000e-210" ),
			_e64( 1.0e-220,  " 1.000000000000e-220" ),
			_e64( 1.0e-230,  " 1.000000000000e-230" ),
			_e64( 1.0e-240,  " 1.000000000000e-240" ),
			_e64( 1.0e-250,  " 1.000000000000e-250" ),
			_e64( 1.0e-260,  " 1.000000000000e-260" ),
			_e64( 1.0e-270,  " 1.000000000000e-270" ),
			_e64( 1.0e-280,  " 1.000000000000e-280" ),
			_e64( 1.0e-290,  " 1.000000000000e-290" ),
			_e64( 1.0e-300,  " 1.000000000000e-300" ),
			
			_e64(     -1.0,  "-1.000000000000e+000" ),
			_e64(     -2.0,  "-2.000000000000e+000" ),
			_e64(     -3.0,  "-3.000000000000e+000" ),
			_e64(     -4.0,  "-4.000000000000e+000" ),
			_e64(     -5.0,  "-5.000000000000e+000" ),
			_e64(     -6.0,  "-6.000000000000e+000" ),
			_e64(     -7.0,  "-7.000000000000e+000" ),
			_e64(     -8.0,  "-8.000000000000e+000" ),
			_e64(     -9.0,  "-9.000000000000e+000" ),
			_e64(    -10.0,  "-1.000000000000e+001" ),
			_e64(    -20.0,  "-2.000000000000e+001" ),
			_e64(    -30.0,  "-3.000000000000e+001" ),
			_e64(    -40.0,  "-4.000000000000e+001" ),
			_e64(    -50.0,  "-5.000000000000e+001" ),
			_e64(    -60.0,  "-6.000000000000e+001" ),
			_e64(    -70.0,  "-7.000000000000e+001" ),
			_e64(    -80.0,  "-8.000000000000e+001" ),
			_e64(    -90.0,  "-9.000000000000e+001" ),
			_e64(   -100.0,  "-1.000000000000e+002" ),
			_e64(   -200.0,  "-2.000000000000e+002" ),
			_e64(   -300.0,  "-3.000000000000e+002" ),
			_e64(   -400.0,  "-4.000000000000e+002" ),
			_e64(   -500.0,  "-5.000000000000e+002" ),
			_e64(   -600.0,  "-6.000000000000e+002" ),
			_e64(   -700.0,  "-7.000000000000e+002" ),
			_e64(   -800.0,  "-8.000000000000e+002" ),
			_e64(   -900.0,  "-9.000000000000e+002" ),
			_e64(  -1000.0,  "-1.000000000000e+003" ),
			_e64(  -2000.0,  "-2.000000000000e+003" ),
			_e64(  -3000.0,  "-3.000000000000e+003" ),
			_e64(  -4000.0,  "-4.000000000000e+003" ),
			_e64(  -5000.0,  "-5.000000000000e+003" ),
			_e64(  -6000.0,  "-6.000000000000e+003" ),
			_e64(  -7000.0,  "-7.000000000000e+003" ),
			_e64(  -8000.0,  "-8.000000000000e+003" ),
			_e64(  -9000.0,  "-9.000000000000e+003" ),
			_e64( -10000.0,  "-1.000000000000e+004" ),
			_e64( -1.0e5  ,  "-1.000000000000e+005" ),
			_e64( -1.0e6  ,  "-1.000000000000e+006" ),
			_e64( -1.0e7  ,  "-1.000000000000e+007" ),
			_e64( -1.0e8  ,  "-1.000000000000e+008" ),
			_e64( -1.0e9  ,  "-1.000000000000e+009" ),
			_e64( -1.0e10 ,  "-1.000000000000e+010" ),
			_e64( -1.0e11 ,  "-1.000000000000e+011" ),
			_e64( -1.0e12 ,  "-1.000000000000e+012" ),
			_e64( -1.0e13 ,  "-1.000000000000e+013" ),
			_e64( -1.0e14 ,  "-1.000000000000e+014" ),
			_e64( -1.0e15 ,  "-1.000000000000e+015" ),
			_e64( -1.0e16 ,  "-1.000000000000e+016" ),
			_e64( -1.0e17 ,  "-1.000000000000e+017" ),
			_e64( -1.0e18 ,  "-1.000000000000e+018" ),
			_e64( -1.0e19 ,  "-1.000000000000e+019" ),
			_e64( -1.0e20 ,  "-1.000000000000e+020" ),
			_e64( -1.0e21 ,  "-1.000000000000e+021" ),
			_e64( -1.0e22 ,  "-1.000000000000e+022" ),
			_e64( -1.0e23 ,  "-1.000000000000e+023" ),
			_e64( -1.0e24 ,  "-1.000000000000e+024" ),
			_e64( -1.0e25 ,  "-1.000000000000e+025" ),
			_e64( -1.0e26 ,  "-1.000000000000e+026" ),
			_e64( -1.0e27 ,  "-1.000000000000e+027" ),
			_e64( -1.0e28 ,  "-1.000000000000e+028" ),
			_e64( -1.0e29 ,  "-1.000000000000e+029" ),
			_e64( -1.0e30 ,  "-1.000000000000e+030" ),
			_e64( -1.0e31 ,  "-1.000000000000e+031" ),
			_e64( -1.0e32 ,  "-1.000000000000e+032" ),
			_e64( -1.0e33 ,  "-1.000000000000e+033" ),
			_e64( -1.0e34 ,  "-1.000000000000e+034" ),
			_e64( -1.0e35 ,  "-1.000000000000e+035" ),
			_e64( -1.0e36 ,  "-1.000000000000e+036" ),
			_e64( -1.0e37 ,  "-1.000000000000e+037" ),
			_e64( -1.0e38 ,  "-1.000000000000e+038" ),
			_e64( -1.0e40 ,  "-1.000000000000e+040" ),
			_e64( -1.0e50 ,  "-1.000000000000e+050" ),
			_e64( -1.0e60 ,  "-1.000000000000e+060" ),
			_e64( -1.0e70 ,  "-1.000000000000e+070" ),
			_e64( -1.0e80 ,  "-1.000000000000e+080" ),
			_e64( -1.0e90 ,  "-1.000000000000e+090" ),
			_e64( -1.0e100,  "-1.000000000000e+100" ),
			_e64( -1.0e110,  "-1.000000000000e+110" ),
			_e64( -1.0e120,  "-1.000000000000e+120" ),
			_e64( -1.0e130,  "-1.000000000000e+130" ),
			_e64( -1.0e140,  "-1.000000000000e+140" ),
			_e64( -1.0e150,  "-1.000000000000e+150" ),
			_e64( -1.0e160,  "-1.000000000000e+160" ),
			_e64( -1.0e170,  "-1.000000000000e+170" ),
			_e64( -1.0e180,  "-1.000000000000e+180" ),
			_e64( -1.0e190,  "-1.000000000000e+190" ),
			_e64( -1.0e200,  "-1.000000000000e+200" ),
			_e64( -1.0e210,  "-1.000000000000e+210" ),
			_e64( -1.0e220,  "-1.000000000000e+220" ),
			_e64( -1.0e230,  "-1.000000000000e+230" ),
			_e64( -1.0e240,  "-1.000000000000e+240" ),
			_e64( -1.0e250,  "-1.000000000000e+250" ),
			_e64( -1.0e260,  "-1.000000000000e+260" ),
			_e64( -1.0e270,  "-1.000000000000e+270" ),
			_e64( -1.0e280,  "-1.000000000000e+280" ),
			_e64( -1.0e290,  "-1.000000000000e+290" ),
			_e64( -1.0e300,  "-1.000000000000e+300" ),
			_e64( -1.0e307,  "-1.000000000000e+307" ),
			
			
			_e64( -1.0e-1  ,  "-1.000000000000e-001" ),
			_e64( -1.0e-2  ,  "-1.000000000000e-002" ),
			_e64( -1.0e-3  ,  "-1.000000000000e-003" ),
			_e64( -1.0e-4  ,  "-1.000000000000e-004" ),
			_e64( -1.0e-5  ,  "-1.000000000000e-005" ),
			_e64( -1.0e-6  ,  "-1.000000000000e-006" ),
			_e64( -1.0e-7  ,  "-1.000000000000e-007" ),
			_e64( -1.0e-8  ,  "-1.000000000000e-008" ),
			_e64( -1.0e-9  ,  "-1.000000000000e-009" ),
			_e64( -1.0e-10 ,  "-1.000000000000e-010" ),
			_e64( -1.0e-11 ,  "-1.000000000000e-011" ),
			_e64( -1.0e-12 ,  "-1.000000000000e-012" ),
			_e64( -1.0e-13 ,  "-1.000000000000e-013" ),
			_e64( -1.0e-14 ,  "-1.000000000000e-014" ),
			_e64( -1.0e-15 ,  "-1.000000000000e-015" ),
			_e64( -1.0e-16 ,  "-1.000000000000e-016" ),
			_e64( -1.0e-17 ,  "-1.000000000000e-017" ),
			_e64( -1.0e-18 ,  "-1.000000000000e-018" ),
			_e64( -1.0e-19 ,  "-1.000000000000e-019" ),
			_e64( -1.0e-20 ,  "-1.000000000000e-020" ),
			_e64( -1.0e-21 ,  "-1.000000000000e-021" ),
			_e64( -1.0e-22 ,  "-1.000000000000e-022" ),
			_e64( -1.0e-23 ,  "-1.000000000000e-023" ),
			_e64( -1.0e-24 ,  "-1.000000000000e-024" ),
			_e64( -1.0e-25 ,  "-1.000000000000e-025" ),
			_e64( -1.0e-26 ,  "-1.000000000000e-026" ),
			_e64( -1.0e-27 ,  "-1.000000000000e-027" ),
			_e64( -1.0e-28 ,  "-1.000000000000e-028" ),
			_e64( -1.0e-29 ,  "-1.000000000000e-029" ),
			_e64( -1.0e-30 ,  "-1.000000000000e-030" ),
			_e64( -1.0e-31 ,  "-1.000000000000e-031" ),
			_e64( -1.0e-32 ,  "-1.000000000000e-032" ),
			_e64( -1.0e-33 ,  "-1.000000000000e-033" ),
			_e64( -1.0e-34 ,  "-1.000000000000e-034" ),
			_e64( -1.0e-35 ,  "-1.000000000000e-035" ),
			_e64( -1.0e-36 ,  "-1.000000000000e-036" ),
			_e64( -1.0e-37 ,  "-1.000000000000e-037" ),
			_e64( -1.0e-38 ,  "-1.000000000000e-038" ),
			_e64( -1.0e-40 ,  "-1.000000000000e-040" ),
			_e64( -1.0e-50 ,  "-1.000000000000e-050" ),
			_e64( -1.0e-60 ,  "-1.000000000000e-060" ),
			_e64( -1.0e-70 ,  "-1.000000000000e-070" ),
			_e64( -1.0e-80 ,  "-1.000000000000e-080" ),
			_e64( -1.0e-90 ,  "-1.000000000000e-090" ),
			_e64( -1.0e-100,  "-1.000000000000e-100" ),
			_e64( -1.0e-110,  "-1.000000000000e-110" ),
			_e64( -1.0e-120,  "-1.000000000000e-120" ),
			_e64( -1.0e-130,  "-1.000000000000e-130" ),
			_e64( -1.0e-140,  "-1.000000000000e-140" ),
			_e64( -1.0e-150,  "-1.000000000000e-150" ),
			_e64( -1.0e-160,  "-1.000000000000e-160" ),
			_e64( -1.0e-170,  "-1.000000000000e-170" ),
			_e64( -1.0e-180,  "-1.000000000000e-180" ),
			_e64( -1.0e-190,  "-1.000000000000e-190" ),
			_e64( -1.0e-200,  "-1.000000000000e-200" ),
			_e64( -1.0e-210,  "-1.000000000000e-210" ),
			_e64( -1.0e-220,  "-1.000000000000e-220" ),
			_e64( -1.0e-230,  "-1.000000000000e-230" ),
			_e64( -1.0e-240,  "-1.000000000000e-240" ),
			_e64( -1.0e-250,  "-1.000000000000e-250" ),
			_e64( -1.0e-260,  "-1.000000000000e-260" ),
			_e64( -1.0e-270,  "-1.000000000000e-270" ),
			_e64( -1.0e-280,  "-1.000000000000e-280" ),
			_e64( -1.0e-290,  "-1.000000000000e-290" ),
			_e64( -1.0e-300,  "-1.000000000000e-300" )
			
		];
		



val
	curXVal	:dword := $80_0000;

type
	e80_t:
		record
			e80		:real80;
			str80	:string;
			xVal	:dword;
			width	:uns32;
		endrecord;
		
	

	#macro _e80( eVal, sVal );
	
		e80_t:[ eVal, sVal, curXVal, @length( sVal )]
		?curXVal := curXVal + 1; 
		
	#endmacro
		
const
	e80Array	:e80_t[] :=
		[
			_e80( 1.0e0  ,  "#####" ),
			_e80( 1.0e0  ,  "######" ),
			_e80( 1.0e0  ,  "#######" ),
			_e80( 1.0e0  ,  "########" ),
			_e80( 1.0e0  ,  "#########" ),
			_e80( 1.0e0  ,  " 1.0e+0000" ),
			_e80( 1.0e0  ,  " 1.00e+0000" ),
			_e80( 1.0e0  ,  " 1.000e+0000" ),
			_e80( 1.0e0  ,  " 1.00000e+0000" ),
			_e80( 1.0e0  ,  " 1.000000e+0000" ),
			_e80( 1.0e0  ,  " 1.0000000e+0000" ),
			_e80( 1.0e0  ,  " 1.00000000e+0000" ),
			_e80( 1.0e0  ,  " 1.000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.0000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.00000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.000000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.0000000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.00000000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.000000000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.0000000000000000e+0000" ),
			_e80( 1.0e0  ,  " 1.00000000000000000e+0000" ),

			_e80(     1.0,   " 1.0000000000000000e+0000" ),
			_e80(     2.0,   " 2.0000000000000000e+0000" ),
			_e80(     3.0,   " 3.0000000000000000e+0000" ),
			_e80(     4.0,   " 4.0000000000000000e+0000" ),
			_e80(     5.0,   " 5.0000000000000000e+0000" ),
			_e80(     6.0,   " 6.0000000000000000e+0000" ),
			_e80(     7.0,   " 7.0000000000000000e+0000" ),
			_e80(     8.0,   " 8.0000000000000000e+0000" ),
			_e80(     9.0,   " 9.0000000000000000e+0000" ),
			_e80(    10.0,   " 1.0000000000000000e+0001" ),
			_e80(    20.0,   " 2.0000000000000000e+0001" ),
			_e80(    30.0,   " 3.0000000000000000e+0001" ),
			_e80(    40.0,   " 4.0000000000000000e+0001" ),
			_e80(    50.0,   " 5.0000000000000000e+0001" ),
			_e80(    60.0,   " 6.0000000000000000e+0001" ),
			_e80(    70.0,   " 7.0000000000000000e+0001" ),
			_e80(    80.0,   " 8.0000000000000000e+0001" ),
			_e80(    90.0,   " 9.0000000000000000e+0001" ),
			_e80(   100.0,   " 1.0000000000000000e+0002" ),
			_e80(   200.0,   " 2.0000000000000000e+0002" ),
			_e80(   300.0,   " 3.0000000000000000e+0002" ),
			_e80(   400.0,   " 4.0000000000000000e+0002" ),
			_e80(   500.0,   " 5.0000000000000000e+0002" ),
			_e80(   600.0,   " 6.0000000000000000e+0002" ),
			_e80(   700.0,   " 7.0000000000000000e+0002" ),
			_e80(   800.0,   " 8.0000000000000000e+0002" ),
			_e80(   900.0,   " 9.0000000000000000e+0002" ),
			_e80(  1000.0,   " 1.0000000000000000e+0003" ),
			_e80(  2000.0,   " 2.0000000000000000e+0003" ),
			_e80(  3000.0,   " 3.0000000000000000e+0003" ),
			_e80(  4000.0,   " 4.0000000000000000e+0003" ),
			_e80(  5000.0,   " 5.0000000000000000e+0003" ),
			_e80(  6000.0,   " 6.0000000000000000e+0003" ),
			_e80(  7000.0,   " 7.0000000000000000e+0003" ),
			_e80(  8000.0,   " 8.0000000000000000e+0003" ),
			_e80(  9000.0,   " 9.0000000000000000e+0003" ),
			_e80( 10000.0,   " 1.0000000000000000e+0004" ),
			_e80( 1.0e5  ,   " 1.0000000000000000e+0005" ),
			_e80( 1.0e6  ,   " 1.0000000000000000e+0006" ),
			_e80( 1.0e7  ,   " 1.0000000000000000e+0007" ),
			_e80( 1.0e8  ,   " 1.0000000000000000e+0008" ),
			_e80( 1.0e9  ,   " 1.0000000000000000e+0009" ),
			_e80( 1.0e10 ,   " 1.0000000000000000e+0010" ),
			_e80( 1.0e11 ,   " 1.0000000000000000e+0011" ),
			_e80( 1.0e12 ,   " 1.0000000000000000e+0012" ),
			_e80( 1.0e13 ,   " 1.0000000000000000e+0013" ),
			_e80( 1.0e14 ,   " 1.0000000000000000e+0014" ),
			_e80( 1.0e15 ,   " 1.0000000000000000e+0015" ),
			_e80( 1.0e16 ,   " 1.0000000000000000e+0016" ),
			_e80( 1.0e17 ,   " 1.0000000000000000e+0017" ),
			_e80( 1.0e18 ,   " 1.0000000000000000e+0018" ),
			_e80( 1.0e19 ,   " 1.0000000000000000e+0019" ),
			_e80( 1.0e20 ,   " 1.0000000000000000e+0020" ),
			_e80( 1.0e21 ,   " 1.0000000000000000e+0021" ),
			_e80( 1.0e22 ,   " 1.0000000000000000e+0022" ),
			_e80( 1.0e23 ,   " 1.0000000000000000e+0023" ),
			_e80( 1.0e24 ,   " 1.0000000000000000e+0024" ),
			_e80( 1.0e25 ,   " 1.0000000000000000e+0025" ),
			_e80( 1.0e26 ,   " 1.0000000000000000e+0026" ),
			_e80( 1.0e27 ,   " 1.0000000000000000e+0027" ),
			_e80( 1.0e28 ,   " 1.0000000000000000e+0028" ),
			_e80( 1.0e29 ,   " 1.0000000000000000e+0029" ),
			_e80( 1.0e30 ,   " 1.0000000000000000e+0030" ),
			_e80( 1.0e31 ,   " 1.0000000000000000e+0031" ),
			_e80( 1.0e32 ,   " 1.0000000000000000e+0032" ),
			_e80( 1.0e33 ,   " 1.0000000000000000e+0033" ),
			_e80( 1.0e34 ,   " 1.0000000000000000e+0034" ),
			_e80( 1.0e35 ,   " 1.0000000000000000e+0035" ),
			_e80( 1.0e36 ,   " 1.0000000000000000e+0036" ),
			_e80( 1.0e37 ,   " 1.0000000000000000e+0037" ),
			_e80( 1.0e38 ,   " 1.0000000000000000e+0038" ),
			_e80( 1.0e40 ,   " 1.0000000000000000e+0040" ),
			_e80( 1.0e50 ,   " 1.0000000000000000e+0050" ),
			_e80( 1.0e60 ,   " 1.0000000000000000e+0060" ),
			_e80( 1.0e70 ,   " 1.0000000000000000e+0070" ),
			_e80( 1.0e80 ,   " 1.0000000000000000e+0080" ),
			_e80( 1.0e90 ,   " 1.0000000000000000e+0090" ),
			_e80( 1.0e100,   " 1.0000000000000000e+0100" ),
			_e80( 1.0e110,   " 1.0000000000000000e+0110" ),
			_e80( 1.0e120,    " 1.000000000000000e+0120" ),	// FPU inaccuracy
			_e80( 1.0e130,   " 1.0000000000000000e+0130" ),
			_e80( 1.0e140,   " 1.0000000000000000e+0140" ),
			_e80( 1.0e150,   " 1.0000000000000000e+0150" ),
			_e80( 1.0e160,   " 1.0000000000000000e+0160" ),
			_e80( 1.0e170,   " 1.0000000000000000e+0170" ),
			_e80( 1.0e180,   " 1.0000000000000000e+0180" ),
			_e80( 1.0e190,   " 1.0000000000000000e+0190" ),
			_e80( 1.0e200,   " 1.0000000000000000e+0200" ),
			_e80( 1.0e210,   " 1.0000000000000000e+0210" ),
			_e80( 1.0e220,   " 1.0000000000000000e+0220" ),
			_e80( 1.0e230,   " 1.0000000000000000e+0230" ),
			_e80( 1.0e240,     " 1.00000000000000e+0240" ),
			_e80( 1.0e250,   " 1.0000000000000000e+0250" ),
			_e80( 1.0e260,   " 1.0000000000000000e+0260" ),
			_e80( 1.0e270,   " 1.0000000000000000e+0270" ),
			_e80( 1.0e280,   " 1.0000000000000000e+0280" ),
			_e80( 1.0e290,   " 1.0000000000000000e+0290" ),
			_e80( 1.0e300,    " 1.000000000000000e+0300" ),	// FPU inaccuracy
			_e80( 1.0e400,   " 1.0000000000000000e+0400" ),
			_e80( 1.0e500,   " 1.0000000000000000e+0500" ),
			_e80( 1.0e600,   " 1.0000000000000000e+0600" ),
			_e80( 1.0e700,   " 1.0000000000000000e+0700" ),
			_e80( 1.0e800,   " 1.0000000000000000e+0800" ),
			_e80( 1.0e900,   " 1.0000000000000000e+0900" ),
			
			_e80( 1.0e-1  ,  " 1.0000000000000000e-0001" ),
			_e80( 1.0e-2  ,  " 1.0000000000000000e-0002" ),
			_e80( 1.0e-3  ,  " 1.0000000000000000e-0003" ),
			_e80( 1.0e-4  ,  " 1.0000000000000000e-0004" ),
			_e80( 1.0e-5  ,  " 1.0000000000000000e-0005" ),
			_e80( 1.0e-6  ,  " 1.0000000000000000e-0006" ),
			_e80( 1.0e-7  ,  " 1.0000000000000000e-0007" ),
			_e80( 1.0e-8  ,  " 1.0000000000000000e-0008" ),
			_e80( 1.0e-9  ,  " 1.0000000000000000e-0009" ),
			_e80( 1.0e-10 ,  " 1.0000000000000000e-0010" ),
			_e80( 1.0e-11 ,  " 1.0000000000000000e-0011" ),
			_e80( 1.0e-12 ,  " 1.0000000000000000e-0012" ),
			_e80( 1.0e-13 ,  " 1.0000000000000000e-0013" ),
			_e80( 1.0e-14 ,  " 1.0000000000000000e-0014" ),
			_e80( 1.0e-15 ,  " 1.0000000000000000e-0015" ),
			_e80( 1.0e-16 ,  " 1.0000000000000000e-0016" ),
			_e80( 1.0e-17 ,  " 1.0000000000000000e-0017" ),
			_e80( 1.0e-18 ,  " 1.0000000000000000e-0018" ),
			_e80( 1.0e-19 ,  " 1.0000000000000000e-0019" ),
			_e80( 1.0e-20 ,  " 1.0000000000000000e-0020" ),
			_e80( 1.0e-21 ,  " 1.0000000000000000e-0021" ),
			_e80( 1.0e-22 ,  " 1.0000000000000000e-0022" ),
			_e80( 1.0e-23 ,  " 1.0000000000000000e-0023" ),
			_e80( 1.0e-24 ,  " 1.0000000000000000e-0024" ),
			_e80( 1.0e-25 ,  " 1.0000000000000000e-0025" ),
			_e80( 1.0e-26 ,  " 1.0000000000000000e-0026" ),
			_e80( 1.0e-27 ,  " 1.0000000000000000e-0027" ),
			_e80( 1.0e-28 ,     " 1.0000000000000e-0028" ),
			_e80( 1.0e-29 ,  " 1.0000000000000000e-0029" ),
			_e80( 1.0e-30 ,  " 1.0000000000000000e-0030" ),
			_e80( 1.0e-31 ,  " 1.0000000000000000e-0031" ),
			_e80( 1.0e-32 ,  " 1.0000000000000000e-0032" ),
			_e80( 1.0e-33 ,  " 1.0000000000000000e-0033" ),
			_e80( 1.0e-34 ,  " 1.0000000000000000e-0034" ),
			_e80( 1.0e-35 ,  " 1.0000000000000000e-0035" ),
			_e80( 1.0e-36 ,  " 1.0000000000000000e-0036" ),
			_e80( 1.0e-37 ,  " 1.0000000000000000e-0037" ),
			_e80( 1.0e-38 ,  " 1.0000000000000000e-0038" ),
			_e80( 1.0e-40 ,  " 1.0000000000000000e-0040" ),
			_e80( 1.0e-50 ,  " 1.0000000000000000e-0050" ),
			_e80( 1.0e-60 ,     " 1.0000000000000e-0060" ),
			_e80( 1.0e-70 ,  " 1.0000000000000000e-0070" ),
			_e80( 1.0e-80 ,  " 1.0000000000000000e-0080" ),
			_e80( 1.0e-90 ,  " 1.0000000000000000e-0090" ),
			_e80( 1.0e-100,    " 1.00000000000000e-0100" ),
			_e80( 1.0e-110,  " 1.0000000000000000e-0110" ),
			_e80( 1.0e-120,   " 1.000000000000000e-0120" ),	// FPU inaccuracy
			_e80( 1.0e-130,  " 1.0000000000000000e-0130" ),
			_e80( 1.0e-140,    " 1.00000000000000e-0140" ),
			_e80( 1.0e-150,  " 1.0000000000000000e-0150" ),
			_e80( 1.0e-160,  " 1.0000000000000000e-0160" ),
			_e80( 1.0e-170,  " 1.0000000000000000e-0170" ),
			_e80( 1.0e-180,    " 1.00000000000000e-0180" ),
			_e80( 1.0e-190,   " 1.000000000000000e-0190" ),	// FPU inaccuracy
			_e80( 1.0e-200,  " 1.0000000000000000e-0200" ),
			_e80( 1.0e-210,    " 1.00000000000000e-0210" ),
			_e80( 1.0e-220,    " 1.00000000000000e-0220" ),
			_e80( 1.0e-230,  " 1.0000000000000000e-0230" ),
			_e80( 1.0e-240,    " 1.00000000000000e-0240" ),
			_e80( 1.0e-250,  " 1.0000000000000000e-0250" ),
			_e80( 1.0e-260,  " 1.0000000000000000e-0260" ),
			_e80( 1.0e-270,  " 1.0000000000000000e-0270" ),
			_e80( 1.0e-280,    " 1.00000000000000e-0280" ),
			_e80( 1.0e-290,    " 1.00000000000000e-0290" ),
			_e80( 1.0e-300,    " 1.00000000000000e-0300" ),
			_e80( 1.0e-400,  " 1.0000000000000000e-0400" ),
			_e80( 1.0e-500,    " 1.00000000000000e-0500" ),
			_e80( 1.0e-600,    " 1.00000000000000e-0600" ),
			_e80( 1.0e-700,    " 1.00000000000000e-0700" ),
			_e80( 1.0e-800,  " 1.0000000000000000e-0800" ),
			_e80( 1.0e-900,  " 1.0000000000000000e-0900" ),
			
			_e80(     -1.0,  "-1.0000000000000000e+0000" ),
			_e80(     -2.0,  "-2.0000000000000000e+0000" ),
			_e80(     -3.0,  "-3.0000000000000000e+0000" ),
			_e80(     -4.0,  "-4.0000000000000000e+0000" ),
			_e80(     -5.0,  "-5.0000000000000000e+0000" ),
			_e80(     -6.0,  "-6.0000000000000000e+0000" ),
			_e80(     -7.0,  "-7.0000000000000000e+0000" ),
			_e80(     -8.0,  "-8.0000000000000000e+0000" ),
			_e80(     -9.0,  "-9.0000000000000000e+0000" ),
			_e80(    -10.0,  "-1.0000000000000000e+0001" ),
			_e80(    -20.0,  "-2.0000000000000000e+0001" ),
			_e80(    -30.0,  "-3.0000000000000000e+0001" ),
			_e80(    -40.0,  "-4.0000000000000000e+0001" ),
			_e80(    -50.0,  "-5.0000000000000000e+0001" ),
			_e80(    -60.0,  "-6.0000000000000000e+0001" ),
			_e80(    -70.0,  "-7.0000000000000000e+0001" ),
			_e80(    -80.0,  "-8.0000000000000000e+0001" ),
			_e80(    -90.0,  "-9.0000000000000000e+0001" ),
			_e80(   -100.0,  "-1.0000000000000000e+0002" ),
			_e80(   -200.0,  "-2.0000000000000000e+0002" ),
			_e80(   -300.0,  "-3.0000000000000000e+0002" ),
			_e80(   -400.0,  "-4.0000000000000000e+0002" ),
			_e80(   -500.0,  "-5.0000000000000000e+0002" ),
			_e80(   -600.0,  "-6.0000000000000000e+0002" ),
			_e80(   -700.0,  "-7.0000000000000000e+0002" ),
			_e80(   -800.0,  "-8.0000000000000000e+0002" ),
			_e80(   -900.0,  "-9.0000000000000000e+0002" ),
			_e80(  -1000.0,  "-1.0000000000000000e+0003" ),
			_e80(  -2000.0,  "-2.0000000000000000e+0003" ),
			_e80(  -3000.0,  "-3.0000000000000000e+0003" ),
			_e80(  -4000.0,  "-4.0000000000000000e+0003" ),
			_e80(  -5000.0,  "-5.0000000000000000e+0003" ),
			_e80(  -6000.0,  "-6.0000000000000000e+0003" ),
			_e80(  -7000.0,  "-7.0000000000000000e+0003" ),
			_e80(  -8000.0,  "-8.0000000000000000e+0003" ),
			_e80(  -9000.0,  "-9.0000000000000000e+0003" ),
			_e80( -10000.0,  "-1.0000000000000000e+0004" ),
			_e80( -1.0e5  ,  "-1.0000000000000000e+0005" ),
			_e80( -1.0e6  ,  "-1.0000000000000000e+0006" ),
			_e80( -1.0e7  ,  "-1.0000000000000000e+0007" ),
			_e80( -1.0e8  ,  "-1.0000000000000000e+0008" ),
			_e80( -1.0e9  ,  "-1.0000000000000000e+0009" ),
			_e80( -1.0e10 ,  "-1.0000000000000000e+0010" ),
			_e80( -1.0e11 ,  "-1.0000000000000000e+0011" ),
			_e80( -1.0e12 ,  "-1.0000000000000000e+0012" ),
			_e80( -1.0e13 ,  "-1.0000000000000000e+0013" ),
			_e80( -1.0e14 ,  "-1.0000000000000000e+0014" ),
			_e80( -1.0e15 ,  "-1.0000000000000000e+0015" ),
			_e80( -1.0e16 ,  "-1.0000000000000000e+0016" ),
			_e80( -1.0e17 ,  "-1.0000000000000000e+0017" ),
			_e80( -1.0e18 ,  "-1.0000000000000000e+0018" ),
			_e80( -1.0e19 ,  "-1.0000000000000000e+0019" ),
			_e80( -1.0e20 ,  "-1.0000000000000000e+0020" ),
			_e80( -1.0e21 ,  "-1.0000000000000000e+0021" ),
			_e80( -1.0e22 ,  "-1.0000000000000000e+0022" ),
			_e80( -1.0e23 ,  "-1.0000000000000000e+0023" ),
			_e80( -1.0e24 ,  "-1.0000000000000000e+0024" ),
			_e80( -1.0e25 ,  "-1.0000000000000000e+0025" ),
			_e80( -1.0e26 ,  "-1.0000000000000000e+0026" ),
			_e80( -1.0e27 ,  "-1.0000000000000000e+0027" ),
			_e80( -1.0e28 ,  "-1.0000000000000000e+0028" ),
			_e80( -1.0e29 ,  "-1.0000000000000000e+0029" ),
			_e80( -1.0e30 ,  "-1.0000000000000000e+0030" ),
			_e80( -1.0e31 ,  "-1.0000000000000000e+0031" ),
			_e80( -1.0e32 ,  "-1.0000000000000000e+0032" ),
			_e80( -1.0e33 ,  "-1.0000000000000000e+0033" ),
			_e80( -1.0e34 ,  "-1.0000000000000000e+0034" ),
			_e80( -1.0e35 ,  "-1.0000000000000000e+0035" ),
			_e80( -1.0e36 ,  "-1.0000000000000000e+0036" ),
			_e80( -1.0e37 ,  "-1.0000000000000000e+0037" ),
			_e80( -1.0e38 ,  "-1.0000000000000000e+0038" ),
			_e80( -1.0e40 ,  "-1.0000000000000000e+0040" ),
			_e80( -1.0e50 ,  "-1.0000000000000000e+0050" ),
			_e80( -1.0e60 ,  "-1.0000000000000000e+0060" ),
			_e80( -1.0e70 ,  "-1.0000000000000000e+0070" ),
			_e80( -1.0e80 ,  "-1.0000000000000000e+0080" ),
			_e80( -1.0e90 ,  "-1.0000000000000000e+0090" ),
			_e80( -1.0e100,  "-1.0000000000000000e+0100" ),
			_e80( -1.0e110,  "-1.0000000000000000e+0110" ),
			_e80( -1.0e120,     "-1.0000000000000e+0120" ),	// FPU inaccuracy
			_e80( -1.0e130,  "-1.0000000000000000e+0130" ),
			_e80( -1.0e140,  "-1.0000000000000000e+0140" ),
			_e80( -1.0e150,  "-1.0000000000000000e+0150" ),
			_e80( -1.0e160,  "-1.0000000000000000e+0160" ),
			_e80( -1.0e170,  "-1.0000000000000000e+0170" ),
			_e80( -1.0e180,  "-1.0000000000000000e+0180" ),
			_e80( -1.0e190,  "-1.0000000000000000e+0190" ),
			_e80( -1.0e200,  "-1.0000000000000000e+0200" ),
			_e80( -1.0e210,  "-1.0000000000000000e+0210" ),
			_e80( -1.0e220,  "-1.0000000000000000e+0220" ),
			_e80( -1.0e230,  "-1.0000000000000000e+0230" ),
			_e80( -1.0e240,     "-1.0000000000000e+0240" ),
			_e80( -1.0e250,  "-1.0000000000000000e+0250" ),
			_e80( -1.0e260,  "-1.0000000000000000e+0260" ),
			_e80( -1.0e270,  "-1.0000000000000000e+0270" ),
			_e80( -1.0e280,  "-1.0000000000000000e+0280" ),
			_e80( -1.0e290,  "-1.0000000000000000e+0290" ),
			_e80( -1.0e300,    "-1.00000000000000e+0300" ),
			_e80( -1.0e307,  "-1.0000000000000000e+0307" ),
			_e80( -1.0e400,  "-1.0000000000000000e+0400" ),
			_e80( -1.0e500,  "-1.0000000000000000e+0500" ),
			_e80( -1.0e600,  "-1.0000000000000000e+0600" ),
			_e80( -1.0e700,  "-1.0000000000000000e+0700" ),
			_e80( -1.0e800,  "-1.0000000000000000e+0800" ),
			_e80( -1.0e900,  "-1.0000000000000000e+0900" ),
			
			
			_e80( -1.0e-1  ,  "-1.0000000000000000e-0001" ),
			_e80( -1.0e-2  ,  "-1.0000000000000000e-0002" ),
			_e80( -1.0e-3  ,  "-1.0000000000000000e-0003" ),
			_e80( -1.0e-4  ,  "-1.0000000000000000e-0004" ),
			_e80( -1.0e-5  ,  "-1.0000000000000000e-0005" ),
			_e80( -1.0e-6  ,  "-1.0000000000000000e-0006" ),
			_e80( -1.0e-7  ,  "-1.0000000000000000e-0007" ),
			_e80( -1.0e-8  ,  "-1.0000000000000000e-0008" ),
			_e80( -1.0e-9  ,  "-1.0000000000000000e-0009" ),
			_e80( -1.0e-10 ,  "-1.0000000000000000e-0010" ),
			_e80( -1.0e-11 ,  "-1.0000000000000000e-0011" ),
			_e80( -1.0e-12 ,  "-1.0000000000000000e-0012" ),
			_e80( -1.0e-13 ,  "-1.0000000000000000e-0013" ),
			_e80( -1.0e-14 ,  "-1.0000000000000000e-0014" ),
			_e80( -1.0e-15 ,  "-1.0000000000000000e-0015" ),
			_e80( -1.0e-16 ,  "-1.0000000000000000e-0016" ),
			_e80( -1.0e-17 ,  "-1.0000000000000000e-0017" ),
			_e80( -1.0e-18 ,  "-1.0000000000000000e-0018" ),
			_e80( -1.0e-19 ,  "-1.0000000000000000e-0019" ),
			_e80( -1.0e-20 ,  "-1.0000000000000000e-0020" ),
			_e80( -1.0e-21 ,  "-1.0000000000000000e-0021" ),
			_e80( -1.0e-22 ,  "-1.0000000000000000e-0022" ),
			_e80( -1.0e-23 ,  "-1.0000000000000000e-0023" ),
			_e80( -1.0e-24 ,  "-1.0000000000000000e-0024" ),
			_e80( -1.0e-25 ,  "-1.0000000000000000e-0025" ),
			_e80( -1.0e-26 ,  "-1.0000000000000000e-0026" ),
			_e80( -1.0e-27 ,  "-1.0000000000000000e-0027" ),
			_e80( -1.0e-28 ,     "-1.0000000000000e-0028" ),
			_e80( -1.0e-29 ,  "-1.0000000000000000e-0029" ),
			_e80( -1.0e-30 ,  "-1.0000000000000000e-0030" ),
			_e80( -1.0e-31 ,  "-1.0000000000000000e-0031" ),
			_e80( -1.0e-32 ,  "-1.0000000000000000e-0032" ),
			_e80( -1.0e-33 ,  "-1.0000000000000000e-0033" ),
			_e80( -1.0e-34 ,  "-1.0000000000000000e-0034" ),
			_e80( -1.0e-35 ,  "-1.0000000000000000e-0035" ),
			_e80( -1.0e-36 ,  "-1.0000000000000000e-0036" ),
			_e80( -1.0e-37 ,  "-1.0000000000000000e-0037" ),
			_e80( -1.0e-38 ,  "-1.0000000000000000e-0038" ),
			_e80( -1.0e-40 ,  "-1.0000000000000000e-0040" ),
			_e80( -1.0e-50 ,  "-1.0000000000000000e-0050" ),
			_e80( -1.0e-60 ,     "-1.0000000000000e-0060" ),
			_e80( -1.0e-70 ,  "-1.0000000000000000e-0070" ),
			_e80( -1.0e-80 ,  "-1.0000000000000000e-0080" ),
			_e80( -1.0e-90 ,  "-1.0000000000000000e-0090" ),
			_e80( -1.0e-100,    "-1.00000000000000e-0100" ),
			_e80( -1.0e-110,  "-1.0000000000000000e-0110" ),
			_e80( -1.0e-120,   "-1.000000000000000e-0120" ),	// FPU inaccuracy
			_e80( -1.0e-130,  "-1.0000000000000000e-0130" ),
			_e80( -1.0e-140,    "-1.00000000000000e-0140" ),
			_e80( -1.0e-150,  "-1.0000000000000000e-0150" ),
			_e80( -1.0e-160,  "-1.0000000000000000e-0160" ),
			_e80( -1.0e-170,  "-1.0000000000000000e-0170" ),
			_e80( -1.0e-180,    "-1.00000000000000e-0180" ),
			_e80( -1.0e-190,   "-1.000000000000000e-0190" ),	// FPU inaccuracy
			_e80( -1.0e-200,  "-1.0000000000000000e-0200" ),
			_e80( -1.0e-210,    "-1.00000000000000e-0210" ),
			_e80( -1.0e-220,    "-1.00000000000000e-0220" ),
			_e80( -1.0e-230,  "-1.0000000000000000e-0230" ),
			_e80( -1.0e-240,    "-1.00000000000000e-0240" ),
			_e80( -1.0e-250,  "-1.0000000000000000e-0250" ),
			_e80( -1.0e-260,  "-1.0000000000000000e-0260" ),
			_e80( -1.0e-270,  "-1.0000000000000000e-0270" ),
			_e80( -1.0e-280,    "-1.00000000000000e-0280" ),
			_e80( -1.0e-290,    "-1.00000000000000e-0290" ),
			_e80( -1.0e-300,    "-1.00000000000000e-0300" ),
			_e80( -1.0e-400,  "-1.0000000000000000e-0400" ),
			_e80( -1.0e-500,    "-1.00000000000000e-0500" ),
			_e80( -1.0e-600,    "-1.00000000000000e-0600" ),
			_e80( -1.0e-700,    "-1.00000000000000e-0700" ),
			_e80( -1.0e-800,  "-1.0000000000000000e-0800" ),
			_e80( -1.0e-900,  "-1.0000000000000000e-0900" )
			
		];
		
		
	
begin convetostr_test;


	// Testing conv.e32ToStr

	try

		#for( i := 0 to @elements( e32Array )-1 )
		
			?s := "bufTest( e32ToStr, " +
					string( e32Array[i].e32 ) + ", """ +
					e32Array[i].str32 + """, " +
					string( e32Array[i].width ) + ", " +
					"$" + string( e32Array[i].xVal ) +  ")";
				
			@text(s);
			
		#endfor
	
		
		stderr.put( "conv.e32ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.e32ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



	// Testing conv.e64ToStr

	try

		#for( i := 0 to @elements( e64Array )-1 )
		
			?s := "bufTest( e64ToStr, " +
					string( e64Array[i].e64 ) + ", """ +
					e64Array[i].str64 + """, " +
					string( e64Array[i].width ) + ", " +
					"$" + string( e64Array[i].xVal ) +  ")";
					
//			#print( s )
			@text(s);
			
		#endfor
	
		
		stderr.put( "conv.e64ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.e64ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;


		





	// Testing conv.e80ToStr

	try

		#for( i := 0 to @elements( e80Array )-1 )
		
			?s := "bufTest( e80ToStr, " +
					string( e80Array[i].e80 ) + ", """ +
					e80Array[i].str80 + """, " +
					string( e80Array[i].width ) + ", " +
					"$" + string( e80Array[i].xVal ) +  ")";
					
//			#print( s )
			@text(s);
			
		#endfor
	
		
		stderr.put( "conv.e80ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.e80ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;


end convetostr_test;

													