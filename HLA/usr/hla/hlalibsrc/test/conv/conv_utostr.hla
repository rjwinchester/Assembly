program convutostr_test;
#include( "stdlib.hhf" )


static
	buf			:str.strvar(256);
	
	#macro bufTest( function, theValue, strValue, exceptionValue );
	
		@text( "conv." + @string( function )) ( theValue, 0, ' ', buf );
		if( str.ne( buf, strValue ) ) then

			printCmp( @string( function ), strValue );
			raise( exceptionValue );

		endif;


	#endmacro
	
	procedure printCmp( function:string; strValue:string );
	begin printCmp;
	
		stderr.put( function, " failed!" nl);
		stderr.put( "Should be '", strValue, "'" nl );
		stderr.put( "     was: '" );
		mov( buf, edi );
		while( (type byte [edi]) <> 0 ) do
		
			stderr.put( (type char [edi]) );
			inc( edi );
			
		endwhile;
		stderr.put( "'" nl );
	
	end printCmp;
	
	
	#macro strTest( function, theValue, strValue, exceptionValue, size, chr ):_s_;

		?_s_ := @string( function );	
		for( mov( 0, ecx); ecx <= size; inc( ecx )) do
		
			@text( "conv." + _s_) ( theValue, ecx, chr, buf );
			if( str.ne( buf, strValue[ecx*4] ) ) then

				stderr.put
				( 
					"conv." + _s_ + " failed on inputs (", 
					(type uns32 ecx), 
					"): " nl
					"Produced:  """, buf, """, and " nl
					"Should be: """, strValue[ecx*4], """" nl
				);
				raise( exceptionValue );

			endif;
			
		endfor

	#endmacro
	
	#macro strTest2( function, theValue, strValue, exceptionValue, size, chr ):_s_;

		?_s_ := @string( function );
		mov( 0, ecx );
		while( (type int32 ecx) >= -size ) do
		
			mov( ecx, edx );
			neg( edx );
			@text( "conv." + _s_) ( theValue, ecx, chr, buf );

			if( str.ne( buf, strValue[edx*4] ) ) then

				stderr.put
				( 
					"conv." + _s_ + " failed on inputs (", 
					(type uns32 edx), 
					"): " nl
					"Produced:  """, buf, """" nl
					"Should be: """, strValue[edx*4], """" nl
				);
				raise( exceptionValue );

			endif;
			dec( ecx );
			
		endwhile

	#endmacro
	
	#macro mkStr( s, fill, size );
	
		(@strset( fill, @max( 0, size-@length(s))) +s)
		
	#endmacro
	
	#macro mkStr2( s, fill, size );
	
		(s+@strset( fill, @max( 0, size-@length(s))))
		
	#endmacro
	
	
begin convutostr_test;

	conv.setUnderscores( true );

	// Testing conv.i8ToBuf

	try

		bufTest( i8ToStr,             0,           "0", $00080);
		bufTest( i8ToStr,             1,           "1", $00081);
		bufTest( i8ToStr,             2,           "2", $00082);
		bufTest( i8ToStr,             3,           "3", $00083);
		bufTest( i8ToStr,             4,           "4", $00084);
		bufTest( i8ToStr,             5,           "5", $00085);
		bufTest( i8ToStr,             6,           "6", $00086);
		bufTest( i8ToStr,             7,           "7", $00087);
		bufTest( i8ToStr,             8,           "8", $00088);
		bufTest( i8ToStr,             9,           "9", $00089);
		bufTest( i8ToStr,             0,           "0", $a00080);
		bufTest( i8ToStr,             0,           "0", $01080);
		bufTest( i8ToStr,            10,          "10", $01081);
		bufTest( i8ToStr,            20,          "20", $01082);
		bufTest( i8ToStr,            30,          "30", $01083);
		bufTest( i8ToStr,            40,          "40", $01084);
		bufTest( i8ToStr,            50,          "50", $01085);
		bufTest( i8ToStr,            60,          "60", $01086);
		bufTest( i8ToStr,            70,          "70", $01087);
		bufTest( i8ToStr,            80,          "80", $01088);
		bufTest( i8ToStr,            90,          "90", $01089);
		bufTest( i8ToStr,             0,           "0", $a01080);
		bufTest( i8ToStr,           100,         "100", $02081);
		
		readonly
			i8Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			i8Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "127", '.', i ),
								
							#endfor
							mkStr2( "127", '.', 63 )
						];
						
						
		endreadonly;
		strTest( i8ToStr, 0, i8Test_a, $F0A0, 63, ' ' );				
		strTest2( i8ToStr, 127, i8Test_b, $F0A1, 63, '.' );				
	
		
		stderr.put( "conv.i8ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.i8ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.i16ToStr

	try

		bufTest( i16ToStr,             0,           "0", $00160);
		bufTest( i16ToStr,             1,           "1", $00161);
		bufTest( i16ToStr,             2,           "2", $00162);
		bufTest( i16ToStr,             3,           "3", $00163);
		bufTest( i16ToStr,             4,           "4", $00164);
		bufTest( i16ToStr,             5,           "5", $00165);
		bufTest( i16ToStr,             6,           "6", $00166);
		bufTest( i16ToStr,             7,           "7", $00167);
		bufTest( i16ToStr,             8,           "8", $00168);
		bufTest( i16ToStr,             9,           "9", $00169);
		bufTest( i16ToStr,            10,          "10", $01161);
		bufTest( i16ToStr,            20,          "20", $01162);
		bufTest( i16ToStr,            30,          "30", $01163);
		bufTest( i16ToStr,            40,          "40", $01164);
		bufTest( i16ToStr,            50,          "50", $01165);
		bufTest( i16ToStr,            60,          "60", $01166);
		bufTest( i16ToStr,            70,          "70", $01167);
		bufTest( i16ToStr,            80,          "80", $01168);
		bufTest( i16ToStr,            90,          "90", $01169);
		bufTest( i16ToStr,           100,         "100", $02161);
		bufTest( i16ToStr,           200,         "200", $02162);
		bufTest( i16ToStr,           300,         "300", $02163);
		bufTest( i16ToStr,           400,         "400", $02164);
		bufTest( i16ToStr,           500,         "500", $02165);
		bufTest( i16ToStr,           600,         "600", $02166);
		bufTest( i16ToStr,           700,         "700", $02167);
		bufTest( i16ToStr,           800,         "800", $02168);
		bufTest( i16ToStr,           900,         "900", $02169);
		bufTest( i16ToStr,         1_000,        "1_000", $03161);
		bufTest( i16ToStr,         2_000,        "2_000", $03162);
		bufTest( i16ToStr,         3_000,        "3_000", $03163);
		bufTest( i16ToStr,         4_000,        "4_000", $03164);
		bufTest( i16ToStr,         5_000,        "5_000", $03165);
		bufTest( i16ToStr,         6_000,        "6_000", $03166);
		bufTest( i16ToStr,         7_000,        "7_000", $03167);
		bufTest( i16ToStr,         8_000,        "8_000", $03168);
		bufTest( i16ToStr,         9_000,        "9_000", $03169);
		bufTest( i16ToStr,        10_000,       "10_000", $04161);
		bufTest( i16ToStr,        20_000,       "20_000", $04162);
		bufTest( i16ToStr,        30_000,       "30_000", $04163);

		
		readonly
			i16Test_0	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			i16Test_1	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "1", '.', i ),
								
							#endfor
							mkStr2( "1", '.', 63 )
						];
						
			i16Test_3	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "32_767", '*', i ),
								
							#endfor
							mkStr2( "32_767", '*', 63 )
						];
						
		endreadonly;
		strTest(  i16ToStr, 0,  i16Test_0, $F0A0, 63, ' ' );				
		strTest2( i16ToStr, 1,  i16Test_1, $F0A1, 63, '.' );				
		strTest2( i16ToStr, 32767, i16Test_3, $F0A3, 63, '*' );				
	
		
		stderr.put( "conv.i16ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.i16ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.i32ToStr

	try

		bufTest( i32ToStr,             0,           "0", $00320);
		bufTest( i32ToStr,             1,           "1", $00321);
		bufTest( i32ToStr,             2,           "2", $00322);
		bufTest( i32ToStr,             3,           "3", $00323);
		bufTest( i32ToStr,             4,           "4", $00324);
		bufTest( i32ToStr,             5,           "5", $00325);
		bufTest( i32ToStr,             6,           "6", $00326);
		bufTest( i32ToStr,             7,           "7", $00327);
		bufTest( i32ToStr,             8,           "8", $00328);
		bufTest( i32ToStr,             9,           "9", $00329);
		bufTest( i32ToStr,            10,          "10", $01321);
		bufTest( i32ToStr,            20,          "20", $01322);
		bufTest( i32ToStr,            30,          "30", $01323);
		bufTest( i32ToStr,            40,          "40", $01324);
		bufTest( i32ToStr,            50,          "50", $01325);
		bufTest( i32ToStr,            60,          "60", $01326);
		bufTest( i32ToStr,            70,          "70", $01327);
		bufTest( i32ToStr,            80,          "80", $01328);
		bufTest( i32ToStr,            90,          "90", $01329);
		bufTest( i32ToStr,           100,         "100", $02321);
		bufTest( i32ToStr,           200,         "200", $02322);
		bufTest( i32ToStr,           300,         "300", $02323);
		bufTest( i32ToStr,           400,         "400", $02324);
		bufTest( i32ToStr,           500,         "500", $02325);
		bufTest( i32ToStr,           600,         "600", $02326);
		bufTest( i32ToStr,           700,         "700", $02327);
		bufTest( i32ToStr,           800,         "800", $02328);
		bufTest( i32ToStr,           900,         "900", $02329);
		bufTest( i32ToStr,         1_000,        "1_000", $03321);
		bufTest( i32ToStr,         2_000,        "2_000", $03322);
		bufTest( i32ToStr,         3_000,        "3_000", $03323);
		bufTest( i32ToStr,         4_000,        "4_000", $03324);
		bufTest( i32ToStr,         5_000,        "5_000", $03325);
		bufTest( i32ToStr,         6_000,        "6_000", $03326);
		bufTest( i32ToStr,         7_000,        "7_000", $03327);
		bufTest( i32ToStr,         8_000,        "8_000", $03328);
		bufTest( i32ToStr,         9_000,        "9_000", $03329);
		bufTest( i32ToStr,        10_000,       "10_000", $04321);
		bufTest( i32ToStr,        20_000,       "20_000", $04322);
		bufTest( i32ToStr,        30_000,       "30_000", $04323);
		bufTest( i32ToStr,        40_000,       "40_000", $04324);
		bufTest( i32ToStr,        50_000,       "50_000", $04325);
		bufTest( i32ToStr,        60_000,       "60_000", $04326);
		bufTest( i32ToStr,        70_000,       "70_000", $04327);
		bufTest( i32ToStr,        80_000,       "80_000", $04328);
		bufTest( i32ToStr,        90_000,       "90_000", $04329);
		bufTest( i32ToStr,       100_000,      "100_000", $05321);
		bufTest( i32ToStr,       200_000,      "200_000", $05322);
		bufTest( i32ToStr,       300_000,      "300_000", $05323);
		bufTest( i32ToStr,       400_000,      "400_000", $05324);
		bufTest( i32ToStr,       500_000,      "500_000", $05325);
		bufTest( i32ToStr,       600_000,      "600_000", $05326);
		bufTest( i32ToStr,       700_000,      "700_000", $05327);
		bufTest( i32ToStr,       800_000,      "800_000", $05328);
		bufTest( i32ToStr,       900_000,      "900_000", $05329);
		bufTest( i32ToStr,     1_000_000,     "1_000_000", $06321);
		bufTest( i32ToStr,     2_000_000,     "2_000_000", $06322);
		bufTest( i32ToStr,     3_000_000,     "3_000_000", $06323);
		bufTest( i32ToStr,     4_000_000,     "4_000_000", $06324);
		bufTest( i32ToStr,     5_000_000,     "5_000_000", $06325);
		bufTest( i32ToStr,     6_000_000,     "6_000_000", $06326);
		bufTest( i32ToStr,     7_000_000,     "7_000_000", $06327);
		bufTest( i32ToStr,     8_000_000,     "8_000_000", $06328);
		bufTest( i32ToStr,     9_000_000,     "9_000_000", $06329);
		bufTest( i32ToStr,    10_000_000,    "10_000_000", $07321);
		bufTest( i32ToStr,    20_000_000,    "20_000_000", $07322);
		bufTest( i32ToStr,    30_000_000,    "30_000_000", $07323);
		bufTest( i32ToStr,    40_000_000,    "40_000_000", $07324);
		bufTest( i32ToStr,    50_000_000,    "50_000_000", $07325);
		bufTest( i32ToStr,    60_000_000,    "60_000_000", $07326);
		bufTest( i32ToStr,    70_000_000,    "70_000_000", $07327);
		bufTest( i32ToStr,    80_000_000,    "80_000_000", $07328);
		bufTest( i32ToStr,    90_000_000,    "90_000_000", $07329);
		bufTest( i32ToStr,   100_000_000,   "100_000_000", $08321);
		bufTest( i32ToStr,   200_000_000,   "200_000_000", $08322);
		bufTest( i32ToStr,   300_000_000,   "300_000_000", $08323);
		bufTest( i32ToStr,   400_000_000,   "400_000_000", $08324);
		bufTest( i32ToStr,   500_000_000,   "500_000_000", $08325);
		bufTest( i32ToStr,   600_000_000,   "600_000_000", $08326);
		bufTest( i32ToStr,   700_000_000,   "700_000_000", $08327);
		bufTest( i32ToStr,   800_000_000,   "800_000_000", $08328);
		bufTest( i32ToStr,   900_000_000,   "900_000_000", $08329);
		bufTest( i32ToStr, 1_000_000_000,  "1_000_000_000", $09321);
		bufTest( i32ToStr, 2_000_000_000,  "2_000_000_000", $09322);

		
		readonly
			i32Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			i32Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "127", '.', i ),
								
							#endfor
							mkStr2( "127", '.', 63 )
						];
						
		endreadonly;
		strTest( i32ToStr, 0, i32Test_a, $a0F0A0, 63, ' ' );				
		strTest2( i32ToStr, 127, i32Test_b, $a0F0A1, 63, '.' );				

		
		stderr.put( "conv.i32ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.i32ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.i64ToStr

	try

		
		bufTest( i64ToStr,             0,           "0", $00640);
		bufTest( i64ToStr,             1,           "1", $00641);
		bufTest( i64ToStr,             2,           "2", $00642);
		bufTest( i64ToStr,             3,           "3", $00643);
		bufTest( i64ToStr,             4,           "4", $00644);
		bufTest( i64ToStr,             5,           "5", $00645);
		bufTest( i64ToStr,             6,           "6", $00646);
		bufTest( i64ToStr,             7,           "7", $00647);
		bufTest( i64ToStr,             8,           "8", $00648);
		bufTest( i64ToStr,             9,           "9", $00649);
		bufTest( i64ToStr,             0,           "0", $a00640);
		bufTest( i64ToStr,            10,          "10", $01641);
		bufTest( i64ToStr,            20,          "20", $01642);
		bufTest( i64ToStr,            30,          "30", $01643);
		bufTest( i64ToStr,            40,          "40", $01644);
		bufTest( i64ToStr,            50,          "50", $01645);
		bufTest( i64ToStr,            60,          "60", $01646);
		bufTest( i64ToStr,            70,          "70", $01647);
		bufTest( i64ToStr,            80,          "80", $01648);
		bufTest( i64ToStr,            90,          "90", $01649);
		bufTest( i64ToStr,           100,         "100", $02641);
		bufTest( i64ToStr,           200,         "200", $02642);
		bufTest( i64ToStr,           300,         "300", $02643);
		bufTest( i64ToStr,           400,         "400", $02644);
		bufTest( i64ToStr,           500,         "500", $02645);
		bufTest( i64ToStr,           600,         "600", $02646);
		bufTest( i64ToStr,           700,         "700", $02647);
		bufTest( i64ToStr,           800,         "800", $02648);
		bufTest( i64ToStr,           900,         "900", $02649);
		bufTest( i64ToStr,         1_000,        "1_000", $03641);
		bufTest( i64ToStr,         2_000,        "2_000", $03642);
		bufTest( i64ToStr,         3_000,        "3_000", $03643);
		bufTest( i64ToStr,         4_000,        "4_000", $03644);
		bufTest( i64ToStr,         5_000,        "5_000", $03645);
		bufTest( i64ToStr,         6_000,        "6_000", $03646);
		bufTest( i64ToStr,         7_000,        "7_000", $03647);
		bufTest( i64ToStr,         8_000,        "8_000", $03648);
		bufTest( i64ToStr,         9_000,        "9_000", $03649);
		bufTest( i64ToStr,        10_000,       "10_000", $04641);
		bufTest( i64ToStr,        20_000,       "20_000", $04642);
		bufTest( i64ToStr,        30_000,       "30_000", $04643);
		bufTest( i64ToStr,        40_000,       "40_000", $04644);
		bufTest( i64ToStr,        50_000,       "50_000", $04645);
		bufTest( i64ToStr,        60_000,       "60_000", $04646);
		bufTest( i64ToStr,        70_000,       "70_000", $04647);
		bufTest( i64ToStr,        80_000,       "80_000", $04648);
		bufTest( i64ToStr,        90_000,       "90_000", $04649);
		bufTest( i64ToStr,       100_000,      "100_000", $05641);
		bufTest( i64ToStr,       200_000,      "200_000", $05642);
		bufTest( i64ToStr,       300_000,      "300_000", $05643);
		bufTest( i64ToStr,       400_000,      "400_000", $05644);
		bufTest( i64ToStr,       500_000,      "500_000", $05645);
		bufTest( i64ToStr,       600_000,      "600_000", $05646);
		bufTest( i64ToStr,       700_000,      "700_000", $05647);
		bufTest( i64ToStr,       800_000,      "800_000", $05648);
		bufTest( i64ToStr,       900_000,      "900_000", $05649);
		bufTest( i64ToStr,     1_000_000,     "1_000_000", $06641);
		bufTest( i64ToStr,     2_000_000,     "2_000_000", $06642);
		bufTest( i64ToStr,     3_000_000,     "3_000_000", $06643);
		bufTest( i64ToStr,     4_000_000,     "4_000_000", $06644);
		bufTest( i64ToStr,     5_000_000,     "5_000_000", $06645);
		bufTest( i64ToStr,     6_000_000,     "6_000_000", $06646);
		bufTest( i64ToStr,     7_000_000,     "7_000_000", $06647);
		bufTest( i64ToStr,     8_000_000,     "8_000_000", $06648);
		bufTest( i64ToStr,     9_000_000,     "9_000_000", $06649);
		bufTest( i64ToStr,    10_000_000,    "10_000_000", $07641);
		bufTest( i64ToStr,    20_000_000,    "20_000_000", $07642);
		bufTest( i64ToStr,    30_000_000,    "30_000_000", $07643);
		bufTest( i64ToStr,    40_000_000,    "40_000_000", $07644);
		bufTest( i64ToStr,    50_000_000,    "50_000_000", $07645);
		bufTest( i64ToStr,    60_000_000,    "60_000_000", $07646);
		bufTest( i64ToStr,    70_000_000,    "70_000_000", $07647);
		bufTest( i64ToStr,    80_000_000,    "80_000_000", $07648);
		bufTest( i64ToStr,    90_000_000,    "90_000_000", $07649);
		bufTest( i64ToStr,   100_000_000,   "100_000_000", $08641);
		bufTest( i64ToStr,   200_000_000,   "200_000_000", $08642);
		bufTest( i64ToStr,   300_000_000,   "300_000_000", $08643);
		bufTest( i64ToStr,   400_000_000,   "400_000_000", $08644);
		bufTest( i64ToStr,   500_000_000,   "500_000_000", $08645);
		bufTest( i64ToStr,   600_000_000,   "600_000_000", $08646);
		bufTest( i64ToStr,   700_000_000,   "700_000_000", $08647);
		bufTest( i64ToStr,   800_000_000,   "800_000_000", $08648);
		bufTest( i64ToStr,   900_000_000,   "900_000_000", $08649);
		bufTest( i64ToStr, 1_000_000_000,  "1_000_000_000", $09641);
		bufTest( i64ToStr, 2_000_000_000,  "2_000_000_000", $09642);
		bufTest( i64ToStr, 3_000_000_000,  "3_000_000_000", $09643);
		bufTest( i64ToStr, 4_000_000_000,  "4_000_000_000", $09644);
		bufTest( i64ToStr, 5_000_000_000,  "5_000_000_000", $09645);
		bufTest( i64ToStr, 6_000_000_000,  "6_000_000_000", $09646);
		bufTest( i64ToStr, 7_000_000_000,  "7_000_000_000", $09647);
		bufTest( i64ToStr, 8_000_000_000,  "8_000_000_000", $09648);
		bufTest( i64ToStr, 9_000_000_000,  "9_000_000_000", $09649);
		bufTest( i64ToStr,10_000_000_000, "10_000_000_000", $0A641);
		bufTest( i64ToStr,20_000_000_000, "20_000_000_000", $0A642);
		bufTest( i64ToStr,30_000_000_000, "30_000_000_000", $0A643);
		bufTest( i64ToStr,40_000_000_000, "40_000_000_000", $0A644);
		bufTest( i64ToStr,50_000_000_000, "50_000_000_000", $0A645);
		bufTest( i64ToStr,60_000_000_000, "60_000_000_000", $0A646);
		bufTest( i64ToStr,70_000_000_000, "70_000_000_000", $0A647);
		bufTest( i64ToStr,80_000_000_000, "80_000_000_000", $0A648);
		bufTest( i64ToStr,90_000_000_000, "90_000_000_000", $0A649);
		bufTest( i64ToStr,100_000_000_000,       "100_000_000_000", $0B641);
		bufTest( i64ToStr,200_000_000_000,       "200_000_000_000", $0B642);
		bufTest( i64ToStr,300_000_000_000,       "300_000_000_000", $0B643);
		bufTest( i64ToStr,400_000_000_000,       "400_000_000_000", $0B644);
		bufTest( i64ToStr,500_000_000_000,       "500_000_000_000", $0B645);
		bufTest( i64ToStr,600_000_000_000,       "600_000_000_000", $0B646);
		bufTest( i64ToStr,700_000_000_000,       "700_000_000_000", $0B647);
		bufTest( i64ToStr,800_000_000_000,       "800_000_000_000", $0B648);
		bufTest( i64ToStr,900_000_000_000,       "900_000_000_000", $0B649);
		bufTest( i64ToStr,1_000_000_000_000,    "1_000_000_000_000", $0C641);
		bufTest( i64ToStr,2_000_000_000_000,    "2_000_000_000_000", $0C642);
		bufTest( i64ToStr,3_000_000_000_000,    "3_000_000_000_000", $0C643);
		bufTest( i64ToStr,4_000_000_000_000,    "4_000_000_000_000", $0C644);
		bufTest( i64ToStr,5_000_000_000_000,    "5_000_000_000_000", $0C645);
		bufTest( i64ToStr,6_000_000_000_000,    "6_000_000_000_000", $0C646);
		bufTest( i64ToStr,7_000_000_000_000,    "7_000_000_000_000", $0C647);
		bufTest( i64ToStr,8_000_000_000_000,    "8_000_000_000_000", $0C648);
		bufTest( i64ToStr,9_000_000_000_000,    "9_000_000_000_000", $0C649);
		bufTest( i64ToStr,10_000_000_000_000,  "10_000_000_000_000", $0D641);
		bufTest( i64ToStr,20_000_000_000_000,  "20_000_000_000_000", $0D642);
		bufTest( i64ToStr,30_000_000_000_000,  "30_000_000_000_000", $0D643);
		bufTest( i64ToStr,40_000_000_000_000,  "40_000_000_000_000", $0D644);
		bufTest( i64ToStr,50_000_000_000_000,  "50_000_000_000_000", $0D645);
		bufTest( i64ToStr,60_000_000_000_000,  "60_000_000_000_000", $0D646);
		bufTest( i64ToStr,70_000_000_000_000,  "70_000_000_000_000", $0D647);
		bufTest( i64ToStr,80_000_000_000_000,  "80_000_000_000_000", $0D648);
		bufTest( i64ToStr,90_000_000_000_000,  "90_000_000_000_000", $0D649);
		bufTest( i64ToStr,100_000_000_000_000,          "100_000_000_000_000", $0E641);
		bufTest( i64ToStr,200_000_000_000_000,          "200_000_000_000_000", $0E642);
		bufTest( i64ToStr,300_000_000_000_000,          "300_000_000_000_000", $0E643);
		bufTest( i64ToStr,400_000_000_000_000,          "400_000_000_000_000", $0E644);
		bufTest( i64ToStr,500_000_000_000_000,          "500_000_000_000_000", $0E645);
		bufTest( i64ToStr,600_000_000_000_000,          "600_000_000_000_000", $0E646);
		bufTest( i64ToStr,700_000_000_000_000,          "700_000_000_000_000", $0E647);
		bufTest( i64ToStr,800_000_000_000_000,          "800_000_000_000_000", $0E648);
		bufTest( i64ToStr,900_000_000_000_000,          "900_000_000_000_000", $0E649);
		bufTest( i64ToStr,1_000_000_000_000_000,       "1_000_000_000_000_000", $0F641);
		bufTest( i64ToStr,2_000_000_000_000_000,       "2_000_000_000_000_000", $0F642);
		bufTest( i64ToStr,3_000_000_000_000_000,       "3_000_000_000_000_000", $0F643);
		bufTest( i64ToStr,4_000_000_000_000_000,       "4_000_000_000_000_000", $0F644);
		bufTest( i64ToStr,5_000_000_000_000_000,       "5_000_000_000_000_000", $0F645);
		bufTest( i64ToStr,6_000_000_000_000_000,       "6_000_000_000_000_000", $0F646);
		bufTest( i64ToStr,7_000_000_000_000_000,       "7_000_000_000_000_000", $0F647);
		bufTest( i64ToStr,8_000_000_000_000_000,       "8_000_000_000_000_000", $0F648);
		bufTest( i64ToStr,9_000_000_000_000_000,       "9_000_000_000_000_000", $0F649);
		bufTest( i64ToStr,10_000_000_000_000_000,     "10_000_000_000_000_000", $10641);
		bufTest( i64ToStr,20_000_000_000_000_000,     "20_000_000_000_000_000", $10642);
		bufTest( i64ToStr,30_000_000_000_000_000,     "30_000_000_000_000_000", $10643);
		bufTest( i64ToStr,40_000_000_000_000_000,     "40_000_000_000_000_000", $10644);
		bufTest( i64ToStr,50_000_000_000_000_000,     "50_000_000_000_000_000", $10645);
		bufTest( i64ToStr,60_000_000_000_000_000,     "60_000_000_000_000_000", $10646);
		bufTest( i64ToStr,70_000_000_000_000_000,     "70_000_000_000_000_000", $10647);
		bufTest( i64ToStr,80_000_000_000_000_000,     "80_000_000_000_000_000", $10648);
		bufTest( i64ToStr,90_000_000_000_000_000,     "90_000_000_000_000_000", $10649);
		bufTest( i64ToStr,100_000_000_000_000_000,             "100_000_000_000_000_000", $11641);
		bufTest( i64ToStr,200_000_000_000_000_000,             "200_000_000_000_000_000", $11642);
		bufTest( i64ToStr,300_000_000_000_000_000,             "300_000_000_000_000_000", $11643);
		bufTest( i64ToStr,400_000_000_000_000_000,             "400_000_000_000_000_000", $11644);
		bufTest( i64ToStr,500_000_000_000_000_000,             "500_000_000_000_000_000", $11645);
		bufTest( i64ToStr,600_000_000_000_000_000,             "600_000_000_000_000_000", $11646);
		bufTest( i64ToStr,700_000_000_000_000_000,             "700_000_000_000_000_000", $11647);
		bufTest( i64ToStr,800_000_000_000_000_000,             "800_000_000_000_000_000", $11648);
		bufTest( i64ToStr,900_000_000_000_000_000,             "900_000_000_000_000_000", $11649);
		bufTest( i64ToStr,1_000_000_000_000_000_000,          "1_000_000_000_000_000_000", $12641);
		bufTest( i64ToStr,2_000_000_000_000_000_000,          "2_000_000_000_000_000_000", $12642);
		bufTest( i64ToStr,3_000_000_000_000_000_000,          "3_000_000_000_000_000_000", $12643);
		bufTest( i64ToStr,4_000_000_000_000_000_000,          "4_000_000_000_000_000_000", $12644);
		bufTest( i64ToStr,5_000_000_000_000_000_000,          "5_000_000_000_000_000_000", $12645);
		bufTest( i64ToStr,6_000_000_000_000_000_000,          "6_000_000_000_000_000_000", $12646);
		bufTest( i64ToStr,7_000_000_000_000_000_000,          "7_000_000_000_000_000_000", $12647);
		bufTest( i64ToStr,8_000_000_000_000_000_000,          "8_000_000_000_000_000_000", $12648);
		bufTest( i64ToStr,9_000_000_000_000_000_000,          "9_000_000_000_000_000_000", $12649);

		
		readonly
			i64Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			i64Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "127", '.', i ),
								
							#endfor
							mkStr2( "127", '.', 63 )
						];
						
		endreadonly;
		strTest( i64ToStr, 0, i64Test_a, $a0F0A0, 63, ' ' );				
		strTest2( i64ToStr, 127, i64Test_b, $a0F0A1, 63, '.' );				


		stderr.put( "conv.i64ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.i64ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.i128ToStr

	try

		bufTest( i128ToStr,0,"0", $0_1280);
		bufTest( i128ToStr,1,"1", $0_1281);
		bufTest( i128ToStr,2,"2", $0_1282);
		bufTest( i128ToStr,3,"3", $0_1283);
		bufTest( i128ToStr,4,"4", $0_1284);
		bufTest( i128ToStr,5,"5", $0_1285);
		bufTest( i128ToStr,6,"6", $0_1286);
		bufTest( i128ToStr,7,"7", $0_1287);
		bufTest( i128ToStr,8,"8", $0_1288);
		bufTest( i128ToStr,9,"9", $0_1289);
		bufTest( i128ToStr,0,"0", $a0_1280);
		bufTest( i128ToStr,10,"10", $1_1281);
		bufTest( i128ToStr,20,"20", $1_1282);
		bufTest( i128ToStr,30,"30", $1_1283);
		bufTest( i128ToStr,40,"40", $1_1284);
		bufTest( i128ToStr,50,"50", $1_1285);
		bufTest( i128ToStr,60,"60", $1_1286);
		bufTest( i128ToStr,70,"70", $1_1287);
		bufTest( i128ToStr,80,"80", $1_1288);
		bufTest( i128ToStr,90,"90", $1_1289);
		bufTest( i128ToStr,100,"100", $2_1281);
		bufTest( i128ToStr,200,"200", $2_1282);
		bufTest( i128ToStr,300,"300", $2_1283);
		bufTest( i128ToStr,400,"400", $2_1284);
		bufTest( i128ToStr,500,"500", $2_1285);
		bufTest( i128ToStr,600,"600", $2_1286);
		bufTest( i128ToStr,700,"700", $2_1287);
		bufTest( i128ToStr,800,"800", $2_1288);
		bufTest( i128ToStr,900,"900", $2_1289);
		bufTest( i128ToStr,1_000,         "1_000", $3_1281);
		bufTest( i128ToStr,2_000,         "2_000", $3_1282);
		bufTest( i128ToStr,3_000,         "3_000", $3_1283);
		bufTest( i128ToStr,4_000,         "4_000", $3_1284);
		bufTest( i128ToStr,5_000,         "5_000", $3_1285);
		bufTest( i128ToStr,6_000,         "6_000", $3_1286);
		bufTest( i128ToStr,7_000,         "7_000", $3_1287);
		bufTest( i128ToStr,8_000,         "8_000", $3_1288);
		bufTest( i128ToStr,9_000,         "9_000", $3_1289);
		bufTest( i128ToStr,10_000,       "10_000", $4_1281);
		bufTest( i128ToStr,20_000,       "20_000", $4_1282);
		bufTest( i128ToStr,30_000,       "30_000", $4_1283);
		bufTest( i128ToStr,40_000,       "40_000", $4_1284);
		bufTest( i128ToStr,50_000,       "50_000", $4_1285);
		bufTest( i128ToStr,60_000,       "60_000", $4_1286);
		bufTest( i128ToStr,70_000,       "70_000", $4_1287);
		bufTest( i128ToStr,80_000,       "80_000", $4_1288);
		bufTest( i128ToStr,90_000,       "90_000", $4_1289);
		bufTest( i128ToStr,100_000,     "100_000", $5_1281);
		bufTest( i128ToStr,200_000,     "200_000", $5_1282);
		bufTest( i128ToStr,300_000,     "300_000", $5_1283);
		bufTest( i128ToStr,400_000,     "400_000", $5_1284);
		bufTest( i128ToStr,500_000,     "500_000", $5_1285);
		bufTest( i128ToStr,600_000,     "600_000", $5_1286);
		bufTest( i128ToStr,700_000,     "700_000", $5_1287);
		bufTest( i128ToStr,800_000,     "800_000", $5_1288);
		bufTest( i128ToStr,900_000,     "900_000", $5_1289);
		bufTest( i128ToStr,1_000_000,  "1_000_000", $6_1281);
		bufTest( i128ToStr,2_000_000,  "2_000_000", $6_1282);
		bufTest( i128ToStr,3_000_000,  "3_000_000", $6_1283);
		bufTest( i128ToStr,4_000_000,  "4_000_000", $6_1284);
		bufTest( i128ToStr,5_000_000,  "5_000_000", $6_1285);
		bufTest( i128ToStr,6_000_000,  "6_000_000", $6_1286);
		bufTest( i128ToStr,7_000_000,  "7_000_000", $6_1287);
		bufTest( i128ToStr,8_000_000,  "8_000_000", $6_1288);
		bufTest( i128ToStr,9_000_000,  "9_000_000", $6_1289);
		bufTest( i128ToStr,10_000_000,"10_000_000", $7_1281);
		bufTest( i128ToStr,20_000_000,"20_000_000", $7_1282);
		bufTest( i128ToStr,30_000_000,"30_000_000", $7_1283);
		bufTest( i128ToStr,40_000_000,"40_000_000", $7_1284);
		bufTest( i128ToStr,50_000_000,"50_000_000", $7_1285);
		bufTest( i128ToStr,60_000_000,"60_000_000", $7_1286);
		bufTest( i128ToStr,70_000_000,"70_000_000", $7_1287);
		bufTest( i128ToStr,80_000_000,"80_000_000", $7_1288);
		bufTest( i128ToStr,90_000_000,"90_000_000", $7_1289);
		bufTest( i128ToStr,100_000_000,     "100_000_000", $8_1281);
		bufTest( i128ToStr,200_000_000,     "200_000_000", $8_1282);
		bufTest( i128ToStr,300_000_000,     "300_000_000", $8_1283);
		bufTest( i128ToStr,400_000_000,     "400_000_000", $8_1284);
		bufTest( i128ToStr,500_000_000,     "500_000_000", $8_1285);
		bufTest( i128ToStr,600_000_000,     "600_000_000", $8_1286);
		bufTest( i128ToStr,700_000_000,     "700_000_000", $8_1287);
		bufTest( i128ToStr,800_000_000,     "800_000_000", $8_1288);
		bufTest( i128ToStr,900_000_000,     "900_000_000", $8_1289);
		bufTest( i128ToStr,1_000_000_000,  "1_000_000_000", $9_1281);
		bufTest( i128ToStr,2_000_000_000,  "2_000_000_000", $9_1282);
		bufTest( i128ToStr,3_000_000_000,  "3_000_000_000", $9_1283);
		bufTest( i128ToStr,4_000_000_000,  "4_000_000_000", $9_1284);
		bufTest( i128ToStr,5_000_000_000,  "5_000_000_000", $9_1285);
		bufTest( i128ToStr,6_000_000_000,  "6_000_000_000", $9_1286);
		bufTest( i128ToStr,7_000_000_000,  "7_000_000_000", $9_1287);
		bufTest( i128ToStr,8_000_000_000,  "8_000_000_000", $9_1288);
		bufTest( i128ToStr,9_000_000_000,  "9_000_000_000", $9_1289);
		bufTest( i128ToStr,10_000_000_000,"10_000_000_000", $A_1281);
		bufTest( i128ToStr,20_000_000_000,"20_000_000_000", $A_1282);
		bufTest( i128ToStr,30_000_000_000,"30_000_000_000", $A_1283);
		bufTest( i128ToStr,40_000_000_000,"40_000_000_000", $A_1284);
		bufTest( i128ToStr,50_000_000_000,"50_000_000_000", $A_1285);
		bufTest( i128ToStr,60_000_000_000,"60_000_000_000", $A_1286);
		bufTest( i128ToStr,70_000_000_000,"70_000_000_000", $A_1287);
		bufTest( i128ToStr,80_000_000_000,"80_000_000_000", $A_1288);
		bufTest( i128ToStr,90_000_000_000,"90_000_000_000", $A_1289);
		bufTest( i128ToStr,100_000_000_000,     "100_000_000_000", $B_1281);
		bufTest( i128ToStr,200_000_000_000,     "200_000_000_000", $B_1282);
		bufTest( i128ToStr,300_000_000_000,     "300_000_000_000", $B_1283);
		bufTest( i128ToStr,400_000_000_000,     "400_000_000_000", $B_1284);
		bufTest( i128ToStr,500_000_000_000,     "500_000_000_000", $B_1285);
		bufTest( i128ToStr,600_000_000_000,     "600_000_000_000", $B_1286);
		bufTest( i128ToStr,700_000_000_000,     "700_000_000_000", $B_1287);
		bufTest( i128ToStr,800_000_000_000,     "800_000_000_000", $B_1288);
		bufTest( i128ToStr,900_000_000_000,     "900_000_000_000", $B_1289);
		bufTest( i128ToStr,1_000_000_000_000,  "1_000_000_000_000", $C_1281);
		bufTest( i128ToStr,2_000_000_000_000,  "2_000_000_000_000", $C_1282);
		bufTest( i128ToStr,3_000_000_000_000,  "3_000_000_000_000", $C_1283);
		bufTest( i128ToStr,4_000_000_000_000,  "4_000_000_000_000", $C_1284);
		bufTest( i128ToStr,5_000_000_000_000,  "5_000_000_000_000", $C_1285);
		bufTest( i128ToStr,6_000_000_000_000,  "6_000_000_000_000", $C_1286);
		bufTest( i128ToStr,7_000_000_000_000,  "7_000_000_000_000", $C_1287);
		bufTest( i128ToStr,8_000_000_000_000,  "8_000_000_000_000", $C_1288);
		bufTest( i128ToStr,9_000_000_000_000,  "9_000_000_000_000", $C_1289);
		bufTest( i128ToStr,10_000_000_000_000,"10_000_000_000_000", $D_1281);
		bufTest( i128ToStr,20_000_000_000_000,"20_000_000_000_000", $D_1282);
		bufTest( i128ToStr,30_000_000_000_000,"30_000_000_000_000", $D_1283);
		bufTest( i128ToStr,40_000_000_000_000,"40_000_000_000_000", $D_1284);
		bufTest( i128ToStr,50_000_000_000_000,"50_000_000_000_000", $D_1285);
		bufTest( i128ToStr,60_000_000_000_000,"60_000_000_000_000", $D_1286);
		bufTest( i128ToStr,70_000_000_000_000,"70_000_000_000_000", $D_1287);
		bufTest( i128ToStr,80_000_000_000_000,"80_000_000_000_000", $D_1288);
		bufTest( i128ToStr,90_000_000_000_000,"90_000_000_000_000", $D_1289);
		bufTest( i128ToStr,100_000_000_000_000,     "100_000_000_000_000", $E_1281);
		bufTest( i128ToStr,200_000_000_000_000,     "200_000_000_000_000", $E_1282);
		bufTest( i128ToStr,300_000_000_000_000,     "300_000_000_000_000", $E_1283);
		bufTest( i128ToStr,400_000_000_000_000,     "400_000_000_000_000", $E_1284);
		bufTest( i128ToStr,500_000_000_000_000,     "500_000_000_000_000", $E_1285);
		bufTest( i128ToStr,600_000_000_000_000,     "600_000_000_000_000", $E_1286);
		bufTest( i128ToStr,700_000_000_000_000,     "700_000_000_000_000", $E_1287);
		bufTest( i128ToStr,800_000_000_000_000,     "800_000_000_000_000", $E_1288);
		bufTest( i128ToStr,900_000_000_000_000,     "900_000_000_000_000", $E_1289);
		bufTest( i128ToStr,1_000_000_000_000_000,  "1_000_000_000_000_000", $F_1281);
		bufTest( i128ToStr,2_000_000_000_000_000,  "2_000_000_000_000_000", $F_1282);
		bufTest( i128ToStr,3_000_000_000_000_000,  "3_000_000_000_000_000", $F_1283);
		bufTest( i128ToStr,4_000_000_000_000_000,  "4_000_000_000_000_000", $F_1284);
		bufTest( i128ToStr,5_000_000_000_000_000,  "5_000_000_000_000_000", $F_1285);
		bufTest( i128ToStr,6_000_000_000_000_000,  "6_000_000_000_000_000", $F_1286);
		bufTest( i128ToStr,7_000_000_000_000_000,  "7_000_000_000_000_000", $F_1287);
		bufTest( i128ToStr,8_000_000_000_000_000,  "8_000_000_000_000_000", $F_1288);
		bufTest( i128ToStr,9_000_000_000_000_000,  "9_000_000_000_000_000", $F_1289);
		bufTest( i128ToStr,10_000_000_000_000_000,"10_000_000_000_000_000", $0_1281);
		bufTest( i128ToStr,20_000_000_000_000_000,"20_000_000_000_000_000", $0_1282);
		bufTest( i128ToStr,30_000_000_000_000_000,"30_000_000_000_000_000", $0_1283);
		bufTest( i128ToStr,40_000_000_000_000_000,"40_000_000_000_000_000", $0_1284);
		bufTest( i128ToStr,50_000_000_000_000_000,"50_000_000_000_000_000", $0_1285);
		bufTest( i128ToStr,60_000_000_000_000_000,"60_000_000_000_000_000", $0_1286);
		bufTest( i128ToStr,70_000_000_000_000_000,"70_000_000_000_000_000", $0_1287);
		bufTest( i128ToStr,80_000_000_000_000_000,"80_000_000_000_000_000", $0_1288);
		bufTest( i128ToStr,90_000_000_000_000_000,"90_000_000_000_000_000", $0_1289);
		bufTest( i128ToStr,100_000_000_000_000_000,     "100_000_000_000_000_000", $1_1281);
		bufTest( i128ToStr,200_000_000_000_000_000,     "200_000_000_000_000_000", $1_1282);
		bufTest( i128ToStr,300_000_000_000_000_000,     "300_000_000_000_000_000", $1_1283);
		bufTest( i128ToStr,400_000_000_000_000_000,     "400_000_000_000_000_000", $1_1284);
		bufTest( i128ToStr,500_000_000_000_000_000,     "500_000_000_000_000_000", $1_1285);
		bufTest( i128ToStr,600_000_000_000_000_000,     "600_000_000_000_000_000", $1_1286);
		bufTest( i128ToStr,700_000_000_000_000_000,     "700_000_000_000_000_000", $1_1287);
		bufTest( i128ToStr,800_000_000_000_000_000,     "800_000_000_000_000_000", $1_1288);
		bufTest( i128ToStr,900_000_000_000_000_000,     "900_000_000_000_000_000", $1_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000,  "1_000_000_000_000_000_000", $2_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000,  "2_000_000_000_000_000_000", $2_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000,  "3_000_000_000_000_000_000", $2_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000,  "4_000_000_000_000_000_000", $2_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000,  "5_000_000_000_000_000_000", $2_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000,  "6_000_000_000_000_000_000", $2_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000,  "7_000_000_000_000_000_000", $2_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000,  "8_000_000_000_000_000_000", $2_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000,  "9_000_000_000_000_000_000", $2_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000,"10_000_000_000_000_000_000", $3_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000,"20_000_000_000_000_000_000", $3_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000,"30_000_000_000_000_000_000", $3_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000,"40_000_000_000_000_000_000", $3_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000,"50_000_000_000_000_000_000", $3_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000,"60_000_000_000_000_000_000", $3_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000,"70_000_000_000_000_000_000", $3_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000,"80_000_000_000_000_000_000", $3_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000,"90_000_000_000_000_000_000", $3_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000,     "100_000_000_000_000_000_000", $4_1281);
		bufTest( i128ToStr,200_000_000_000_000_000_000,     "200_000_000_000_000_000_000", $4_1282);
		bufTest( i128ToStr,300_000_000_000_000_000_000,     "300_000_000_000_000_000_000", $4_1283);
		bufTest( i128ToStr,400_000_000_000_000_000_000,     "400_000_000_000_000_000_000", $4_1284);
		bufTest( i128ToStr,500_000_000_000_000_000_000,     "500_000_000_000_000_000_000", $4_1285);
		bufTest( i128ToStr,600_000_000_000_000_000_000,     "600_000_000_000_000_000_000", $4_1286);
		bufTest( i128ToStr,700_000_000_000_000_000_000,     "700_000_000_000_000_000_000", $4_1287);
		bufTest( i128ToStr,800_000_000_000_000_000_000,     "800_000_000_000_000_000_000", $4_1288);
		bufTest( i128ToStr,900_000_000_000_000_000_000,     "900_000_000_000_000_000_000", $4_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000_000,  "1_000_000_000_000_000_000_000", $5_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000_000,  "2_000_000_000_000_000_000_000", $5_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000_000,  "3_000_000_000_000_000_000_000", $5_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000_000,  "4_000_000_000_000_000_000_000", $5_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000_000,  "5_000_000_000_000_000_000_000", $5_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000_000,  "6_000_000_000_000_000_000_000", $5_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000_000,  "7_000_000_000_000_000_000_000", $5_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000_000,  "8_000_000_000_000_000_000_000", $5_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000_000,  "9_000_000_000_000_000_000_000", $5_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000_000,"10_000_000_000_000_000_000_000", $6_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000_000,"20_000_000_000_000_000_000_000", $6_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000_000,"30_000_000_000_000_000_000_000", $6_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000_000,"40_000_000_000_000_000_000_000", $6_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000_000,"50_000_000_000_000_000_000_000", $6_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000_000,"60_000_000_000_000_000_000_000", $6_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000_000,"70_000_000_000_000_000_000_000", $6_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000_000,"80_000_000_000_000_000_000_000", $6_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000_000,"90_000_000_000_000_000_000_000", $6_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000_000,     "100_000_000_000_000_000_000_000", $7_1281);
		bufTest( i128ToStr,200_000_000_000_000_000_000_000,     "200_000_000_000_000_000_000_000", $7_1282);
		bufTest( i128ToStr,300_000_000_000_000_000_000_000,     "300_000_000_000_000_000_000_000", $7_1283);
		bufTest( i128ToStr,400_000_000_000_000_000_000_000,     "400_000_000_000_000_000_000_000", $7_1284);
		bufTest( i128ToStr,500_000_000_000_000_000_000_000,     "500_000_000_000_000_000_000_000", $7_1285);
		bufTest( i128ToStr,600_000_000_000_000_000_000_000,     "600_000_000_000_000_000_000_000", $7_1286);
		bufTest( i128ToStr,700_000_000_000_000_000_000_000,     "700_000_000_000_000_000_000_000", $7_1287);
		bufTest( i128ToStr,800_000_000_000_000_000_000_000,     "800_000_000_000_000_000_000_000", $7_1288);
		bufTest( i128ToStr,900_000_000_000_000_000_000_000,     "900_000_000_000_000_000_000_000", $7_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000_000_000,  "1_000_000_000_000_000_000_000_000", $8_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000_000_000,  "2_000_000_000_000_000_000_000_000", $8_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000_000_000,  "3_000_000_000_000_000_000_000_000", $8_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000_000_000,  "4_000_000_000_000_000_000_000_000", $8_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000_000_000,  "5_000_000_000_000_000_000_000_000", $8_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000_000_000,  "6_000_000_000_000_000_000_000_000", $8_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000_000_000,  "7_000_000_000_000_000_000_000_000", $8_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000_000_000,  "8_000_000_000_000_000_000_000_000", $8_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000_000_000,  "9_000_000_000_000_000_000_000_000", $8_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000_000_000,"10_000_000_000_000_000_000_000_000", $9_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000_000_000,"20_000_000_000_000_000_000_000_000", $9_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000_000_000,"30_000_000_000_000_000_000_000_000", $9_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000_000_000,"40_000_000_000_000_000_000_000_000", $9_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000_000_000,"50_000_000_000_000_000_000_000_000", $9_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000_000_000,"60_000_000_000_000_000_000_000_000", $9_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000_000_000,"70_000_000_000_000_000_000_000_000", $9_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000_000_000,"80_000_000_000_000_000_000_000_000", $9_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000_000_000,"90_000_000_000_000_000_000_000_000", $9_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000_000_000,     "100_000_000_000_000_000_000_000_000", $A_1281);
		bufTest( i128ToStr,200_000_000_000_000_000_000_000_000,     "200_000_000_000_000_000_000_000_000", $A_1282);
		bufTest( i128ToStr,300_000_000_000_000_000_000_000_000,     "300_000_000_000_000_000_000_000_000", $A_1283);
		bufTest( i128ToStr,400_000_000_000_000_000_000_000_000,     "400_000_000_000_000_000_000_000_000", $A_1284);
		bufTest( i128ToStr,500_000_000_000_000_000_000_000_000,     "500_000_000_000_000_000_000_000_000", $A_1285);
		bufTest( i128ToStr,600_000_000_000_000_000_000_000_000,     "600_000_000_000_000_000_000_000_000", $A_1286);
		bufTest( i128ToStr,700_000_000_000_000_000_000_000_000,     "700_000_000_000_000_000_000_000_000", $A_1287);
		bufTest( i128ToStr,800_000_000_000_000_000_000_000_000,     "800_000_000_000_000_000_000_000_000", $A_1288);
		bufTest( i128ToStr,900_000_000_000_000_000_000_000_000,     "900_000_000_000_000_000_000_000_000", $A_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000_000_000_000,  "1_000_000_000_000_000_000_000_000_000", $B_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000_000_000_000,  "2_000_000_000_000_000_000_000_000_000", $B_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000_000_000_000,  "3_000_000_000_000_000_000_000_000_000", $B_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000_000_000_000,  "4_000_000_000_000_000_000_000_000_000", $B_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000_000_000_000,  "5_000_000_000_000_000_000_000_000_000", $B_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000_000_000_000,  "6_000_000_000_000_000_000_000_000_000", $B_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000_000_000_000,  "7_000_000_000_000_000_000_000_000_000", $B_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000_000_000_000,  "8_000_000_000_000_000_000_000_000_000", $B_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000_000_000_000,  "9_000_000_000_000_000_000_000_000_000", $B_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000_000_000_000,"10_000_000_000_000_000_000_000_000_000", $C_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000_000_000_000,"20_000_000_000_000_000_000_000_000_000", $C_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000_000_000_000,"30_000_000_000_000_000_000_000_000_000", $C_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000_000_000_000,"40_000_000_000_000_000_000_000_000_000", $C_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000_000_000_000,"50_000_000_000_000_000_000_000_000_000", $C_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000_000_000_000,"60_000_000_000_000_000_000_000_000_000", $C_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000_000_000_000,"70_000_000_000_000_000_000_000_000_000", $C_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000_000_000_000,"80_000_000_000_000_000_000_000_000_000", $C_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000_000_000_000,"90_000_000_000_000_000_000_000_000_000", $C_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000_000_000_000,     "100_000_000_000_000_000_000_000_000_000", $D_1281);
		bufTest( i128ToStr,200_000_000_000_000_000_000_000_000_000,     "200_000_000_000_000_000_000_000_000_000", $D_1282);
		bufTest( i128ToStr,300_000_000_000_000_000_000_000_000_000,     "300_000_000_000_000_000_000_000_000_000", $D_1283);
		bufTest( i128ToStr,400_000_000_000_000_000_000_000_000_000,     "400_000_000_000_000_000_000_000_000_000", $D_1284);
		bufTest( i128ToStr,500_000_000_000_000_000_000_000_000_000,     "500_000_000_000_000_000_000_000_000_000", $D_1285);
		bufTest( i128ToStr,600_000_000_000_000_000_000_000_000_000,     "600_000_000_000_000_000_000_000_000_000", $D_1286);
		bufTest( i128ToStr,700_000_000_000_000_000_000_000_000_000,     "700_000_000_000_000_000_000_000_000_000", $D_1287);
		bufTest( i128ToStr,800_000_000_000_000_000_000_000_000_000,     "800_000_000_000_000_000_000_000_000_000", $D_1288);
		bufTest( i128ToStr,900_000_000_000_000_000_000_000_000_000,     "900_000_000_000_000_000_000_000_000_000", $D_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000_000_000_000_000,  "1_000_000_000_000_000_000_000_000_000_000", $E_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000_000_000_000_000,  "2_000_000_000_000_000_000_000_000_000_000", $E_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000_000_000_000_000,  "3_000_000_000_000_000_000_000_000_000_000", $E_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000_000_000_000_000,  "4_000_000_000_000_000_000_000_000_000_000", $E_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000_000_000_000_000,  "5_000_000_000_000_000_000_000_000_000_000", $E_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000_000_000_000_000,  "6_000_000_000_000_000_000_000_000_000_000", $E_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000_000_000_000_000,  "7_000_000_000_000_000_000_000_000_000_000", $E_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000_000_000_000_000,  "8_000_000_000_000_000_000_000_000_000_000", $E_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000_000_000_000_000,  "9_000_000_000_000_000_000_000_000_000_000", $E_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000_000_000_000_000,"10_000_000_000_000_000_000_000_000_000_000", $F_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000_000_000_000_000,"20_000_000_000_000_000_000_000_000_000_000", $F_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000_000_000_000_000,"30_000_000_000_000_000_000_000_000_000_000", $F_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000_000_000_000_000,"40_000_000_000_000_000_000_000_000_000_000", $F_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000_000_000_000_000,"50_000_000_000_000_000_000_000_000_000_000", $F_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000_000_000_000_000,"60_000_000_000_000_000_000_000_000_000_000", $F_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000_000_000_000_000,"70_000_000_000_000_000_000_000_000_000_000", $F_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000_000_000_000_000,"80_000_000_000_000_000_000_000_000_000_000", $F_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000_000_000_000_000,"90_000_000_000_000_000_000_000_000_000_000", $F_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000_000_000_000_000,     "100_000_000_000_000_000_000_000_000_000_000", $0_1281);
		bufTest( i128ToStr,200_000_000_000_000_000_000_000_000_000_000,     "200_000_000_000_000_000_000_000_000_000_000", $0_1282);
		bufTest( i128ToStr,300_000_000_000_000_000_000_000_000_000_000,     "300_000_000_000_000_000_000_000_000_000_000", $0_1283);
		bufTest( i128ToStr,400_000_000_000_000_000_000_000_000_000_000,     "400_000_000_000_000_000_000_000_000_000_000", $0_1284);
		bufTest( i128ToStr,500_000_000_000_000_000_000_000_000_000_000,     "500_000_000_000_000_000_000_000_000_000_000", $0_1285);
		bufTest( i128ToStr,600_000_000_000_000_000_000_000_000_000_000,     "600_000_000_000_000_000_000_000_000_000_000", $0_1286);
		bufTest( i128ToStr,700_000_000_000_000_000_000_000_000_000_000,     "700_000_000_000_000_000_000_000_000_000_000", $0_1287);
		bufTest( i128ToStr,800_000_000_000_000_000_000_000_000_000_000,     "800_000_000_000_000_000_000_000_000_000_000", $0_1288);
		bufTest( i128ToStr,900_000_000_000_000_000_000_000_000_000_000,     "900_000_000_000_000_000_000_000_000_000_000", $0_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000_000_000_000_000_000,  "1_000_000_000_000_000_000_000_000_000_000_000", $1_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000_000_000_000_000_000,  "2_000_000_000_000_000_000_000_000_000_000_000", $1_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000_000_000_000_000_000,  "3_000_000_000_000_000_000_000_000_000_000_000", $1_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000_000_000_000_000_000,  "4_000_000_000_000_000_000_000_000_000_000_000", $1_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000_000_000_000_000_000,  "5_000_000_000_000_000_000_000_000_000_000_000", $1_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000_000_000_000_000_000,  "6_000_000_000_000_000_000_000_000_000_000_000", $1_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000_000_000_000_000_000,  "7_000_000_000_000_000_000_000_000_000_000_000", $1_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000_000_000_000_000_000,  "8_000_000_000_000_000_000_000_000_000_000_000", $1_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000_000_000_000_000_000,  "9_000_000_000_000_000_000_000_000_000_000_000", $1_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000_000_000_000_000_000,"10_000_000_000_000_000_000_000_000_000_000_000", $2_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000_000_000_000_000_000,"20_000_000_000_000_000_000_000_000_000_000_000", $2_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000_000_000_000_000_000,"30_000_000_000_000_000_000_000_000_000_000_000", $2_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000_000_000_000_000_000,"40_000_000_000_000_000_000_000_000_000_000_000", $2_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000_000_000_000_000_000,"50_000_000_000_000_000_000_000_000_000_000_000", $2_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000_000_000_000_000_000,"60_000_000_000_000_000_000_000_000_000_000_000", $2_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000_000_000_000_000_000,"70_000_000_000_000_000_000_000_000_000_000_000", $2_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000_000_000_000_000_000,"80_000_000_000_000_000_000_000_000_000_000_000", $2_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000_000_000_000_000_000,"90_000_000_000_000_000_000_000_000_000_000_000", $2_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000_000_000_000_000_000,     "100_000_000_000_000_000_000_000_000_000_000_000", $3_1281);
		bufTest( i128ToStr,200_000_000_000_000_000_000_000_000_000_000_000,     "200_000_000_000_000_000_000_000_000_000_000_000", $3_1282);
		bufTest( i128ToStr,300_000_000_000_000_000_000_000_000_000_000_000,     "300_000_000_000_000_000_000_000_000_000_000_000", $3_1283);
		bufTest( i128ToStr,400_000_000_000_000_000_000_000_000_000_000_000,     "400_000_000_000_000_000_000_000_000_000_000_000", $3_1284);
		bufTest( i128ToStr,500_000_000_000_000_000_000_000_000_000_000_000,     "500_000_000_000_000_000_000_000_000_000_000_000", $3_1285);
		bufTest( i128ToStr,600_000_000_000_000_000_000_000_000_000_000_000,     "600_000_000_000_000_000_000_000_000_000_000_000", $3_1286);
		bufTest( i128ToStr,700_000_000_000_000_000_000_000_000_000_000_000,     "700_000_000_000_000_000_000_000_000_000_000_000", $3_1287);
		bufTest( i128ToStr,800_000_000_000_000_000_000_000_000_000_000_000,     "800_000_000_000_000_000_000_000_000_000_000_000", $3_1288);
		bufTest( i128ToStr,900_000_000_000_000_000_000_000_000_000_000_000,     "900_000_000_000_000_000_000_000_000_000_000_000", $3_1289);
		bufTest( i128ToStr,1_000_000_000_000_000_000_000_000_000_000_000_000,  "1_000_000_000_000_000_000_000_000_000_000_000_000", $4_1281);
		bufTest( i128ToStr,2_000_000_000_000_000_000_000_000_000_000_000_000,  "2_000_000_000_000_000_000_000_000_000_000_000_000", $4_1282);
		bufTest( i128ToStr,3_000_000_000_000_000_000_000_000_000_000_000_000,  "3_000_000_000_000_000_000_000_000_000_000_000_000", $4_1283);
		bufTest( i128ToStr,4_000_000_000_000_000_000_000_000_000_000_000_000,  "4_000_000_000_000_000_000_000_000_000_000_000_000", $4_1284);
		bufTest( i128ToStr,5_000_000_000_000_000_000_000_000_000_000_000_000,  "5_000_000_000_000_000_000_000_000_000_000_000_000", $4_1285);
		bufTest( i128ToStr,6_000_000_000_000_000_000_000_000_000_000_000_000,  "6_000_000_000_000_000_000_000_000_000_000_000_000", $4_1286);
		bufTest( i128ToStr,7_000_000_000_000_000_000_000_000_000_000_000_000,  "7_000_000_000_000_000_000_000_000_000_000_000_000", $4_1287);
		bufTest( i128ToStr,8_000_000_000_000_000_000_000_000_000_000_000_000,  "8_000_000_000_000_000_000_000_000_000_000_000_000", $4_1288);
		bufTest( i128ToStr,9_000_000_000_000_000_000_000_000_000_000_000_000,  "9_000_000_000_000_000_000_000_000_000_000_000_000", $4_1289);
		bufTest( i128ToStr,10_000_000_000_000_000_000_000_000_000_000_000_000,"10_000_000_000_000_000_000_000_000_000_000_000_000", $5_1281);
		bufTest( i128ToStr,20_000_000_000_000_000_000_000_000_000_000_000_000,"20_000_000_000_000_000_000_000_000_000_000_000_000", $5_1282);
		bufTest( i128ToStr,30_000_000_000_000_000_000_000_000_000_000_000_000,"30_000_000_000_000_000_000_000_000_000_000_000_000", $5_1283);
		bufTest( i128ToStr,40_000_000_000_000_000_000_000_000_000_000_000_000,"40_000_000_000_000_000_000_000_000_000_000_000_000", $5_1284);
		bufTest( i128ToStr,50_000_000_000_000_000_000_000_000_000_000_000_000,"50_000_000_000_000_000_000_000_000_000_000_000_000", $5_1285);
		bufTest( i128ToStr,60_000_000_000_000_000_000_000_000_000_000_000_000,"60_000_000_000_000_000_000_000_000_000_000_000_000", $5_1286);
		bufTest( i128ToStr,70_000_000_000_000_000_000_000_000_000_000_000_000,"70_000_000_000_000_000_000_000_000_000_000_000_000", $5_1287);
		bufTest( i128ToStr,80_000_000_000_000_000_000_000_000_000_000_000_000,"80_000_000_000_000_000_000_000_000_000_000_000_000", $5_1288);
		bufTest( i128ToStr,90_000_000_000_000_000_000_000_000_000_000_000_000,"90_000_000_000_000_000_000_000_000_000_000_000_000", $5_1289);
		bufTest( i128ToStr,100_000_000_000_000_000_000_000_000_000_000_000_000,  "100_000_000_000_000_000_000_000_000_000_000_000_000", $6_1281);

		
		readonly
			i128Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			i128Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "127", '.', i ),
								
							#endfor
							mkStr2( "127", '.', 63 )
						];
						

		endreadonly;
		strTest( i128ToStr, 0, i128Test_a, $a0F0A0, 63, ' ' );				
		strTest2( i128ToStr, 127, i128Test_b, $a0F0A1, 63, '.' );				

		stderr.put( "conv.i128ToStr succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.i128ToStr failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



end convutostr_test;

													