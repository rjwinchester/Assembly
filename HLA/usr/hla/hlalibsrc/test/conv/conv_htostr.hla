program convhtostr_test;
#include( "stdlib.hhf" )

	
static
	bufstr		:string;
	buf			:str.strvar(256);

	procedure cmpbuf( buf:string; cmpto:string ); @returns( "@ne" );
	begin cmpbuf;

		push( esi );
		push( edi );
		push( ecx );

		mov( buf, esi );
		mov( cmpto, edi );
		mov( (type str.strRec [edi]).length, ecx );
		add( 1, ecx );
		repe.cmpsb();

		pop( ecx );
		pop( edi );
		pop( esi );

	end cmpbuf;
	
	#macro bufTest( function, theValue, strValue, exceptionValue );
	
		@text( "conv." + @string( function )) ( theValue, 0, ' ', buf );
		if( str.ne( buf, strValue ) ) then

			printCmp( @string( function ), strValue );
			raise( exceptionValue );

		endif;

	
		@text( "conv.a_" + @string( function )) ( theValue, 0, ' ' );
		mov( eax, bufstr );
		if( str.ne( bufstr, strValue ) ) then

			printCmp( @string( function ), strValue );
			raise( exceptionValue );

		endif;
		str.free( bufstr );

	#endmacro
	
	#macro hexTest( function, theValue, strValue, exceptionValue );
	
		@text( "conv." + @string( function )) ( theValue, buf );
		if( str.ne( buf, strValue ) ) then

			printCmp( @string( function ), strValue );
			raise( exceptionValue );

		endif;

	
		@text( "conv.a_" + @string( function )) ( theValue );
		mov( eax, bufstr );
		if( str.ne( bufstr, strValue ) ) then

			printCmp( @string( function ), strValue );
			raise( exceptionValue );

		endif;
		str.free( bufstr );

	#endmacro
	
	
	procedure printCmp( function:string; strValue:string );
	begin printCmp;
	
		stderr.put( function, " failed!" nl);
		stderr.put( "Should be '", strValue, "'" nl );
		stderr.put( "     was: '" );
		mov( buf, edi );
		while( (type byte [edi]) <> 0 ) do
		
			stderr.put( (type char [edi]) );
			inc( edi );
			
		endwhile;
		stderr.put( "'" nl );
	
	end printCmp;
	
	
	
	#macro strTest( function, theValue, strValue, exceptionValue, size, chr ):_s_;

		?_s_ := @string( function );	
		for( mov( 0, ecx); ecx <= size; inc( ecx )) do
		
			@text( "conv." + _s_) ( theValue, ecx, chr, buf );
			if( str.ne( buf, strValue[ecx*4] ) ) then

				stderr.put
				( 
					"conv." + _s_ + " failed on inputs (", 
					(type uns32 ecx), 
					"): " nl
					"""", buf, """, and " nl
					"""", strValue[ecx*4], """" nl
				);
				raise( exceptionValue );

			endif;
			
		endfor

	#endmacro
	
	#macro strTest2( function, theValue, strValue, exceptionValue, size, chr ):_s_;

		?_s_ := @string( function );
		mov( 0, ecx );
		while( (type int32 ecx) >= -size ) do
		
			mov( ecx, edx );
			neg( edx );
			@text( "conv." + _s_) ( theValue, ecx, chr, buf );

			if( str.ne( buf, strValue[edx*4] ) ) then

				stderr.put
				( 
					"conv." + _s_ + " failed on inputs (", 
					(type uns32 edx), 
					"): " nl
					"Produced: """, buf, """" nl
					"Should be: """, strValue[edx*4], """" nl
				);
				raise( exceptionValue );

			endif;
			dec( ecx );
			
		endwhile

	#endmacro
	
	#macro mkStr( s, fill, size ):_i_, _s_;
	
		?_s_ := "";
		#for( _i_ := @length(s)+1 to size )
		
			?_s_ += fill;
			
		#endfor
		(_s_+s)
		
	#endmacro
	
	#macro mkStr2( s, fill, size ):_i_, _s_;
	
		?_s_ := "";
		#for( _i_ := @length(s)+1 to size )
		
			?_s_ += fill;
			
		#endfor
		(s+_s_)
		
	#endmacro
	
	
begin convhtostr_test;


	conv.setUnderscores( true );
	
	// Testing conv.h8ToStr

	try
	

		bufTest( h8ToStr, $0,  "0", $1080 );
		bufTest( h8ToStr, $1,  "1", $1081 );
		bufTest( h8ToStr, $2,  "2", $1082 );
		bufTest( h8ToStr, $3,  "3", $1083 );
		bufTest( h8ToStr, $4,  "4", $1084 );
		bufTest( h8ToStr, $5,  "5", $1085 );
		bufTest( h8ToStr, $6,  "6", $1086 );
		bufTest( h8ToStr, $7,  "7", $1087 );
		bufTest( h8ToStr, $8,  "8", $1088 );
		bufTest( h8ToStr, $9,  "9", $1089 );
		bufTest( h8ToStr, $a,  "A", $108a );
		bufTest( h8ToStr, $b,  "B", $108b );
		bufTest( h8ToStr, $c,  "C", $108c );
		bufTest( h8ToStr, $d,  "D", $108d );
		bufTest( h8ToStr, $e,  "E", $108e );
		bufTest( h8ToStr, $f,  "F", $108f );

		bufTest( h8ToStr, $10, "10", $2081 );
		bufTest( h8ToStr, $20, "20", $2082 );
		bufTest( h8ToStr, $30, "30", $2083 );
		bufTest( h8ToStr, $40, "40", $2084 );
		bufTest( h8ToStr, $50, "50", $2085 );
		bufTest( h8ToStr, $60, "60", $2086 );
		bufTest( h8ToStr, $70, "70", $2087 );
		bufTest( h8ToStr, $80, "80", $2088 );
		bufTest( h8ToStr, $90, "90", $2089 );
		bufTest( h8ToStr, $a0, "A0", $208a );
		bufTest( h8ToStr, $b0, "B0", $208b );
		bufTest( h8ToStr, $c0, "C0", $208c );
		bufTest( h8ToStr, $d0, "D0", $208d );
		bufTest( h8ToStr, $e0, "E0", $208e );
		bufTest( h8ToStr, $f0, "F0", $208f );

		bufTest( h8ToStr, $11, "11", $F084 );
		bufTest( h8ToStr, $7F, "7F", $F085 );
		bufTest( h8ToStr, $FF, "FF", $F086 );
		
		readonly
			h8Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			h8Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "FF", '.', i ),
								
							#endfor
							mkStr2( "FF", '.', 63 )
						];
						
		endreadonly;
		strTest( h8ToStr, 0, h8Test_a, $F0A0, 63, ' ' );				
		strTest2( h8ToStr, $FF, h8Test_b, $F0A1, 63, '.' );				
		
		stderr.put( "conv.h8ToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.h8ToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.bToStr

	try
	

		hexTest( bToStr, $0,  "00", $1080 );
		hexTest( bToStr, $1,  "01", $1081 );
		hexTest( bToStr, $2,  "02", $1082 );
		hexTest( bToStr, $3,  "03", $1083 );
		hexTest( bToStr, $4,  "04", $1084 );
		hexTest( bToStr, $5,  "05", $1085 );
		hexTest( bToStr, $6,  "06", $1086 );
		hexTest( bToStr, $7,  "07", $1087 );
		hexTest( bToStr, $8,  "08", $1088 );
		hexTest( bToStr, $9,  "09", $1089 );
		hexTest( bToStr, $a,  "0A", $108a );
		hexTest( bToStr, $b,  "0B", $108b );
		hexTest( bToStr, $c,  "0C", $108c );
		hexTest( bToStr, $d,  "0D", $108d );
		hexTest( bToStr, $e,  "0E", $108e );
		hexTest( bToStr, $f,  "0F", $108f );

		hexTest( bToStr, $10, "10", $2081 );
		hexTest( bToStr, $20, "20", $2082 );
		hexTest( bToStr, $30, "30", $2083 );
		hexTest( bToStr, $40, "40", $2084 );
		hexTest( bToStr, $50, "50", $2085 );
		hexTest( bToStr, $60, "60", $2086 );
		hexTest( bToStr, $70, "70", $2087 );
		hexTest( bToStr, $80, "80", $2088 );
		hexTest( bToStr, $90, "90", $2089 );
		hexTest( bToStr, $a0, "A0", $208a );
		hexTest( bToStr, $b0, "B0", $208b );
		hexTest( bToStr, $c0, "C0", $208c );
		hexTest( bToStr, $d0, "D0", $208d );
		hexTest( bToStr, $e0, "E0", $208e );
		hexTest( bToStr, $f0, "F0", $208f );

		hexTest( bToStr, $11, "11", $F084 );
		hexTest( bToStr, $7F, "7F", $F085 );
		hexTest( bToStr, $FF, "FF", $F086 );
		
		
		stderr.put( "conv.bToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.bToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.h16ToStr

	try

		bufTest( h16ToStr, $0,  "0", $1160 );
		bufTest( h16ToStr, $1,  "1", $1161 );
		bufTest( h16ToStr, $2,  "2", $1162 );
		bufTest( h16ToStr, $3,  "3", $1163 );
		bufTest( h16ToStr, $4,  "4", $1164 );
		bufTest( h16ToStr, $5,  "5", $1165 );
		bufTest( h16ToStr, $6,  "6", $1166 );
		bufTest( h16ToStr, $7,  "7", $1167 );
		bufTest( h16ToStr, $8,  "8", $1168 );
		bufTest( h16ToStr, $9,  "9", $1169 );
		bufTest( h16ToStr, $a,  "A", $116a );
		bufTest( h16ToStr, $b,  "B", $116b );
		bufTest( h16ToStr, $c,  "C", $116c );
		bufTest( h16ToStr, $d,  "D", $116d );
		bufTest( h16ToStr, $e,  "E", $116e );
		bufTest( h16ToStr, $f,  "F", $116f );

		bufTest( h16ToStr, $10, "10", $2161 );
		bufTest( h16ToStr, $20, "20", $2162 );
		bufTest( h16ToStr, $30, "30", $2163 );
		bufTest( h16ToStr, $40, "40", $2164 );
		bufTest( h16ToStr, $50, "50", $2165 );
		bufTest( h16ToStr, $60, "60", $2166 );
		bufTest( h16ToStr, $70, "70", $2167 );
		bufTest( h16ToStr, $80, "80", $2168 );
		bufTest( h16ToStr, $90, "90", $2169 );
		bufTest( h16ToStr, $a0, "A0", $216a );
		bufTest( h16ToStr, $b0, "B0", $216b );
		bufTest( h16ToStr, $c0, "C0", $216c );
		bufTest( h16ToStr, $d0, "D0", $216d );
		bufTest( h16ToStr, $e0, "E0", $216e );
		bufTest( h16ToStr, $f0, "F0", $216f );

		bufTest( h16ToStr, $100, "100", $3161 );
		bufTest( h16ToStr, $200, "200", $3162 );
		bufTest( h16ToStr, $300, "300", $3163 );
		bufTest( h16ToStr, $400, "400", $3164 );
		bufTest( h16ToStr, $500, "500", $3165 );
		bufTest( h16ToStr, $600, "600", $3166 );
		bufTest( h16ToStr, $700, "700", $3167 );
		bufTest( h16ToStr, $800, "800", $3168 );
		bufTest( h16ToStr, $900, "900", $3169 );
		bufTest( h16ToStr, $a00, "A00", $316a );
		bufTest( h16ToStr, $b00, "B00", $316b );
		bufTest( h16ToStr, $c00, "C00", $316c );
		bufTest( h16ToStr, $d00, "D00", $316d );
		bufTest( h16ToStr, $e00, "E00", $316e );
		bufTest( h16ToStr, $f00, "F00", $316f );

		bufTest( h16ToStr, $1000, "1000", $4161 );
		bufTest( h16ToStr, $2000, "2000", $4162 );
		bufTest( h16ToStr, $3000, "3000", $4163 );
		bufTest( h16ToStr, $4000, "4000", $4164 );
		bufTest( h16ToStr, $5000, "5000", $4165 );
		bufTest( h16ToStr, $6000, "6000", $4166 );
		bufTest( h16ToStr, $7000, "7000", $4167 );
		bufTest( h16ToStr, $8000, "8000", $4168 );
		bufTest( h16ToStr, $9000, "9000", $4169 );
		bufTest( h16ToStr, $a000, "A000", $416a );
		bufTest( h16ToStr, $b000, "B000", $416b );
		bufTest( h16ToStr, $c000, "C000", $416c );
		bufTest( h16ToStr, $d000, "D000", $416d );
		bufTest( h16ToStr, $e000, "E000", $416e );
		bufTest( h16ToStr, $f000, "F000", $416f );

		bufTest( h16ToStr, $11,   "11", $f160 );
		bufTest( h16ToStr, $7F,   "7F", $f161 );
		bufTest( h16ToStr, $FF,   "FF", $f162 );
		bufTest( h16ToStr, $11F,  "11F", $f163 );
		bufTest( h16ToStr, $7FF,  "7FF", $f164 );
		bufTest( h16ToStr, $FFFf, "FFFF", $f165 );
		bufTest( h16ToStr, $11Ff, "11FF", $f166 );
		bufTest( h16ToStr, $7FFf, "7FFF", $f167 );
		bufTest( h16ToStr, $FFFf, "FFFF", $f168 );

		readonly
			h16Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			h16Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "FFFF", '.', i ),
								
							#endfor
							mkStr2( "FFFF", '.', 63 )
						];
						
		endreadonly;
		strTest( h16ToStr, 0, h16Test_a, $F0A0, 63, ' ' );				
		strTest2( h16ToStr, $FFFF, h16Test_b, $F0A1, 63, '.' );				
	
		
		stderr.put( "conv.h16ToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.h16ToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;












	// Testing conv.wToStr

	try

		hexTest( wToStr, $0,  "0000", $1160 );
		hexTest( wToStr, $1,  "0001", $1161 );
		hexTest( wToStr, $2,  "0002", $1162 );
		hexTest( wToStr, $3,  "0003", $1163 );
		hexTest( wToStr, $4,  "0004", $1164 );
		hexTest( wToStr, $5,  "0005", $1165 );
		hexTest( wToStr, $6,  "0006", $1166 );
		hexTest( wToStr, $7,  "0007", $1167 );
		hexTest( wToStr, $8,  "0008", $1168 );
		hexTest( wToStr, $9,  "0009", $1169 );
		hexTest( wToStr, $a,  "000A", $116a );
		hexTest( wToStr, $b,  "000B", $116b );
		hexTest( wToStr, $c,  "000C", $116c );
		hexTest( wToStr, $d,  "000D", $116d );
		hexTest( wToStr, $e,  "000E", $116e );
		hexTest( wToStr, $f,  "000F", $116f );

		hexTest( wToStr, $10, "0010", $2161 );
		hexTest( wToStr, $20, "0020", $2162 );
		hexTest( wToStr, $30, "0030", $2163 );
		hexTest( wToStr, $40, "0040", $2164 );
		hexTest( wToStr, $50, "0050", $2165 );
		hexTest( wToStr, $60, "0060", $2166 );
		hexTest( wToStr, $70, "0070", $2167 );
		hexTest( wToStr, $80, "0080", $2168 );
		hexTest( wToStr, $90, "0090", $2169 );
		hexTest( wToStr, $a0, "00A0", $216a );
		hexTest( wToStr, $b0, "00B0", $216b );
		hexTest( wToStr, $c0, "00C0", $216c );
		hexTest( wToStr, $d0, "00D0", $216d );
		hexTest( wToStr, $e0, "00E0", $216e );
		hexTest( wToStr, $f0, "00F0", $216f );

		hexTest( wToStr, $100, "0100", $3161 );
		hexTest( wToStr, $200, "0200", $3162 );
		hexTest( wToStr, $300, "0300", $3163 );
		hexTest( wToStr, $400, "0400", $3164 );
		hexTest( wToStr, $500, "0500", $3165 );
		hexTest( wToStr, $600, "0600", $3166 );
		hexTest( wToStr, $700, "0700", $3167 );
		hexTest( wToStr, $800, "0800", $3168 );
		hexTest( wToStr, $900, "0900", $3169 );
		hexTest( wToStr, $a00, "0A00", $316a );
		hexTest( wToStr, $b00, "0B00", $316b );
		hexTest( wToStr, $c00, "0C00", $316c );
		hexTest( wToStr, $d00, "0D00", $316d );
		hexTest( wToStr, $e00, "0E00", $316e );
		hexTest( wToStr, $f00, "0F00", $316f );

		hexTest( wToStr, $1000, "1000", $4161 );
		hexTest( wToStr, $2000, "2000", $4162 );
		hexTest( wToStr, $3000, "3000", $4163 );
		hexTest( wToStr, $4000, "4000", $4164 );
		hexTest( wToStr, $5000, "5000", $4165 );
		hexTest( wToStr, $6000, "6000", $4166 );
		hexTest( wToStr, $7000, "7000", $4167 );
		hexTest( wToStr, $8000, "8000", $4168 );
		hexTest( wToStr, $9000, "9000", $4169 );
		hexTest( wToStr, $a000, "A000", $416a );
		hexTest( wToStr, $b000, "B000", $416b );
		hexTest( wToStr, $c000, "C000", $416c );
		hexTest( wToStr, $d000, "D000", $416d );
		hexTest( wToStr, $e000, "E000", $416e );
		hexTest( wToStr, $f000, "F000", $416f );

		hexTest( wToStr, $11,   "0011", $f160 );
		hexTest( wToStr, $7F,   "007F", $f161 );
		hexTest( wToStr, $FF,   "00FF", $f162 );
		hexTest( wToStr, $11F,  "011F", $f163 );
		hexTest( wToStr, $7FF,  "07FF", $f164 );
		hexTest( wToStr, $FFFf, "FFFF", $f165 );
		hexTest( wToStr, $11Ff, "11FF", $f166 );
		hexTest( wToStr, $7FFf, "7FFF", $f167 );
		hexTest( wToStr, $FFFf, "FFFF", $f168 );

		
		stderr.put( "conv.wToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.wToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.h32ToStr

	try

		bufTest( h32ToStr, $0,  "0", $1320 );
		bufTest( h32ToStr, $1,  "1", $1321 );
		bufTest( h32ToStr, $2,  "2", $1322 );
		bufTest( h32ToStr, $3,  "3", $1323 );
		bufTest( h32ToStr, $4,  "4", $1324 );
		bufTest( h32ToStr, $5,  "5", $1325 );
		bufTest( h32ToStr, $6,  "6", $1326 );
		bufTest( h32ToStr, $7,  "7", $1327 );
		bufTest( h32ToStr, $8,  "8", $1328 );
		bufTest( h32ToStr, $9,  "9", $1329 );
		bufTest( h32ToStr, $a,  "A", $132a );
		bufTest( h32ToStr, $b,  "B", $132b );
		bufTest( h32ToStr, $c,  "C", $132c );
		bufTest( h32ToStr, $d,  "D", $132d );
		bufTest( h32ToStr, $e,  "E", $132e );
		bufTest( h32ToStr, $f,  "F", $132f );

		bufTest( h32ToStr, $10, "10", $2321 );
		bufTest( h32ToStr, $20, "20", $2322 );
		bufTest( h32ToStr, $30, "30", $2323 );
		bufTest( h32ToStr, $40, "40", $2324 );
		bufTest( h32ToStr, $50, "50", $2325 );
		bufTest( h32ToStr, $60, "60", $2326 );
		bufTest( h32ToStr, $70, "70", $2327 );
		bufTest( h32ToStr, $80, "80", $2328 );
		bufTest( h32ToStr, $90, "90", $2329 );
		bufTest( h32ToStr, $a0, "A0", $232a );
		bufTest( h32ToStr, $b0, "B0", $232b );
		bufTest( h32ToStr, $c0, "C0", $232c );
		bufTest( h32ToStr, $d0, "D0", $232d );
		bufTest( h32ToStr, $e0, "E0", $232e );
		bufTest( h32ToStr, $f0, "F0", $232f );

		bufTest( h32ToStr, $100, "100", $3321 );
		bufTest( h32ToStr, $200, "200", $3322 );
		bufTest( h32ToStr, $300, "300", $3323 );
		bufTest( h32ToStr, $400, "400", $3324 );
		bufTest( h32ToStr, $500, "500", $3325 );
		bufTest( h32ToStr, $600, "600", $3326 );
		bufTest( h32ToStr, $700, "700", $3327 );
		bufTest( h32ToStr, $800, "800", $3328 );
		bufTest( h32ToStr, $900, "900", $3329 );
		bufTest( h32ToStr, $a00, "A00", $332a );
		bufTest( h32ToStr, $b00, "B00", $332b );
		bufTest( h32ToStr, $c00, "C00", $332c );
		bufTest( h32ToStr, $d00, "D00", $332d );
		bufTest( h32ToStr, $e00, "E00", $332e );
		bufTest( h32ToStr, $f00, "F00", $332f );

		bufTest( h32ToStr, $1000, "1000", $4321 );
		bufTest( h32ToStr, $2000, "2000", $4322 );
		bufTest( h32ToStr, $3000, "3000", $4323 );
		bufTest( h32ToStr, $4000, "4000", $4324 );
		bufTest( h32ToStr, $5000, "5000", $4325 );
		bufTest( h32ToStr, $6000, "6000", $4326 );
		bufTest( h32ToStr, $7000, "7000", $4327 );
		bufTest( h32ToStr, $8000, "8000", $4328 );
		bufTest( h32ToStr, $9000, "9000", $4329 );
		bufTest( h32ToStr, $a000, "A000", $432a );
		bufTest( h32ToStr, $b000, "B000", $432b );
		bufTest( h32ToStr, $c000, "C000", $432c );
		bufTest( h32ToStr, $d000, "D000", $432d );
		bufTest( h32ToStr, $e000, "E000", $432e );
		bufTest( h32ToStr, $f000, "F000", $432f );

		bufTest( h32ToStr, $1_0000, "1_0000", $5321 );
		bufTest( h32ToStr, $2_0000, "2_0000", $5322 );
		bufTest( h32ToStr, $3_0000, "3_0000", $5323 );
		bufTest( h32ToStr, $4_0000, "4_0000", $5324 );
		bufTest( h32ToStr, $5_0000, "5_0000", $5325 );
		bufTest( h32ToStr, $6_0000, "6_0000", $5326 );
		bufTest( h32ToStr, $7_0000, "7_0000", $5327 );
		bufTest( h32ToStr, $8_0000, "8_0000", $5328 );
		bufTest( h32ToStr, $9_0000, "9_0000", $5329 );
		bufTest( h32ToStr, $a_0000, "A_0000", $532a );
		bufTest( h32ToStr, $b_0000, "B_0000", $532b );
		bufTest( h32ToStr, $c_0000, "C_0000", $532c );
		bufTest( h32ToStr, $d_0000, "D_0000", $532d );
		bufTest( h32ToStr, $e_0000, "E_0000", $532e );
		bufTest( h32ToStr, $f_0000, "F_0000", $532f );

		bufTest( h32ToStr, $10_0000, "10_0000", $6321 );
		bufTest( h32ToStr, $20_0000, "20_0000", $6322 );
		bufTest( h32ToStr, $30_0000, "30_0000", $6323 );
		bufTest( h32ToStr, $40_0000, "40_0000", $6324 );
		bufTest( h32ToStr, $50_0000, "50_0000", $6325 );
		bufTest( h32ToStr, $60_0000, "60_0000", $6326 );
		bufTest( h32ToStr, $70_0000, "70_0000", $6327 );
		bufTest( h32ToStr, $80_0000, "80_0000", $6328 );
		bufTest( h32ToStr, $90_0000, "90_0000", $6329 );
		bufTest( h32ToStr, $a0_0000, "A0_0000", $632a );
		bufTest( h32ToStr, $b0_0000, "B0_0000", $632b );
		bufTest( h32ToStr, $c0_0000, "C0_0000", $632c );
		bufTest( h32ToStr, $d0_0000, "D0_0000", $632d );
		bufTest( h32ToStr, $e0_0000, "E0_0000", $632e );
		bufTest( h32ToStr, $f0_0000, "F0_0000", $632f );

		bufTest( h32ToStr, $100_0000, "100_0000", $7321 );
		bufTest( h32ToStr, $200_0000, "200_0000", $7322 );
		bufTest( h32ToStr, $300_0000, "300_0000", $7323 );
		bufTest( h32ToStr, $400_0000, "400_0000", $7324 );
		bufTest( h32ToStr, $500_0000, "500_0000", $7325 );
		bufTest( h32ToStr, $600_0000, "600_0000", $7326 );
		bufTest( h32ToStr, $700_0000, "700_0000", $7327 );
		bufTest( h32ToStr, $800_0000, "800_0000", $7328 );
		bufTest( h32ToStr, $900_0000, "900_0000", $7329 );
		bufTest( h32ToStr, $a00_0000, "A00_0000", $732a );
		bufTest( h32ToStr, $b00_0000, "B00_0000", $732b );
		bufTest( h32ToStr, $c00_0000, "C00_0000", $732c );
		bufTest( h32ToStr, $d00_0000, "D00_0000", $732d );
		bufTest( h32ToStr, $e00_0000, "E00_0000", $732e );
		bufTest( h32ToStr, $f00_0000, "F00_0000", $732f );

		bufTest( h32ToStr, $1000_0000, "1000_0000", $8321 );
		bufTest( h32ToStr, $2000_0000, "2000_0000", $8322 );
		bufTest( h32ToStr, $3000_0000, "3000_0000", $8323 );
		bufTest( h32ToStr, $4000_0000, "4000_0000", $8324 );
		bufTest( h32ToStr, $5000_0000, "5000_0000", $8325 );
		bufTest( h32ToStr, $6000_0000, "6000_0000", $8326 );
		bufTest( h32ToStr, $7000_0000, "7000_0000", $8327 );
		bufTest( h32ToStr, $8000_0000, "8000_0000", $8328 );
		bufTest( h32ToStr, $9000_0000, "9000_0000", $8329 );
		bufTest( h32ToStr, $a000_0000, "A000_0000", $832a );
		bufTest( h32ToStr, $b000_0000, "B000_0000", $832b );
		bufTest( h32ToStr, $c000_0000, "C000_0000", $832c );
		bufTest( h32ToStr, $d000_0000, "D000_0000", $832d );
		bufTest( h32ToStr, $e000_0000, "E000_0000", $832e );
		bufTest( h32ToStr, $f000_0000, "F000_0000", $832f );

		bufTest( h32ToStr, $11,               "11", $f320 );
		bufTest( h32ToStr, $7F,               "7F", $f321 );
		bufTest( h32ToStr, $FF,               "FF", $f322 );
		bufTest( h32ToStr, $11F,             "11F", $f323 );
		bufTest( h32ToStr, $7FF,             "7FF", $f324 );
		bufTest( h32ToStr, $FFFf,           "FFFF", $f325 );
		bufTest( h32ToStr, $11Ff,           "11FF", $f326 );
		bufTest( h32ToStr, $7FFf,           "7FFF", $f327 );
		bufTest( h32ToStr, $FFFf,           "FFFF", $f328 );
		bufTest( h32ToStr, $F_FFFF,       "F_FFFF", $f329 );
		bufTest( h32ToStr, $FF_FFFF,     "FF_FFFF", $f32a );
		bufTest( h32ToStr, $FFF_FFFF,   "FFF_FFFF", $f32b );
		bufTest( h32ToStr, $FFFF_FFFf, "FFFF_FFFF", $f32c );



		readonly
			h32Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			h32Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "FFFF_FFFF", '.', i ),
								
							#endfor
							mkStr2( "FFFF_FFFF", '.', 63 )
						];
						
		endreadonly;
		strTest( h32ToStr, 0, h32Test_a, $F0A0, 63, ' ' );				
		strTest2( h32ToStr, $FFFF_FFFF, h32Test_b, $F0A1, 63, '.' );				
	
		
		stderr.put( "conv.h32ToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.h32ToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;












	// Testing conv.dToStr

	try

		hexTest( dToStr, $0,  "0000_0000", $1320 );
		hexTest( dToStr, $1,  "0000_0001", $1321 );
		hexTest( dToStr, $2,  "0000_0002", $1322 );
		hexTest( dToStr, $3,  "0000_0003", $1323 );
		hexTest( dToStr, $4,  "0000_0004", $1324 );
		hexTest( dToStr, $5,  "0000_0005", $1325 );
		hexTest( dToStr, $6,  "0000_0006", $1326 );
		hexTest( dToStr, $7,  "0000_0007", $1327 );
		hexTest( dToStr, $8,  "0000_0008", $1328 );
		hexTest( dToStr, $9,  "0000_0009", $1329 );
		hexTest( dToStr, $a,  "0000_000A", $132a );
		hexTest( dToStr, $b,  "0000_000B", $132b );
		hexTest( dToStr, $c,  "0000_000C", $132c );
		hexTest( dToStr, $d,  "0000_000D", $132d );
		hexTest( dToStr, $e,  "0000_000E", $132e );
		hexTest( dToStr, $f,  "0000_000F", $132f );

		hexTest( dToStr, $10, "0000_0010", $2321 );
		hexTest( dToStr, $20, "0000_0020", $2322 );
		hexTest( dToStr, $30, "0000_0030", $2323 );
		hexTest( dToStr, $40, "0000_0040", $2324 );
		hexTest( dToStr, $50, "0000_0050", $2325 );
		hexTest( dToStr, $60, "0000_0060", $2326 );
		hexTest( dToStr, $70, "0000_0070", $2327 );
		hexTest( dToStr, $80, "0000_0080", $2328 );
		hexTest( dToStr, $90, "0000_0090", $2329 );
		hexTest( dToStr, $a0, "0000_00A0", $232a );
		hexTest( dToStr, $b0, "0000_00B0", $232b );
		hexTest( dToStr, $c0, "0000_00C0", $232c );
		hexTest( dToStr, $d0, "0000_00D0", $232d );
		hexTest( dToStr, $e0, "0000_00E0", $232e );
		hexTest( dToStr, $f0, "0000_00F0", $232f );

		hexTest( dToStr, $100, "0000_0100", $3321 );
		hexTest( dToStr, $200, "0000_0200", $3322 );
		hexTest( dToStr, $300, "0000_0300", $3323 );
		hexTest( dToStr, $400, "0000_0400", $3324 );
		hexTest( dToStr, $500, "0000_0500", $3325 );
		hexTest( dToStr, $600, "0000_0600", $3326 );
		hexTest( dToStr, $700, "0000_0700", $3327 );
		hexTest( dToStr, $800, "0000_0800", $3328 );
		hexTest( dToStr, $900, "0000_0900", $3329 );
		hexTest( dToStr, $a00, "0000_0A00", $332a );
		hexTest( dToStr, $b00, "0000_0B00", $332b );
		hexTest( dToStr, $c00, "0000_0C00", $332c );
		hexTest( dToStr, $d00, "0000_0D00", $332d );
		hexTest( dToStr, $e00, "0000_0E00", $332e );
		hexTest( dToStr, $f00, "0000_0F00", $332f );

		hexTest( dToStr, $1000, "0000_1000", $4321 );
		hexTest( dToStr, $2000, "0000_2000", $4322 );
		hexTest( dToStr, $3000, "0000_3000", $4323 );
		hexTest( dToStr, $4000, "0000_4000", $4324 );
		hexTest( dToStr, $5000, "0000_5000", $4325 );
		hexTest( dToStr, $6000, "0000_6000", $4326 );
		hexTest( dToStr, $7000, "0000_7000", $4327 );
		hexTest( dToStr, $8000, "0000_8000", $4328 );
		hexTest( dToStr, $9000, "0000_9000", $4329 );
		hexTest( dToStr, $a000, "0000_A000", $432a );
		hexTest( dToStr, $b000, "0000_B000", $432b );
		hexTest( dToStr, $c000, "0000_C000", $432c );
		hexTest( dToStr, $d000, "0000_D000", $432d );
		hexTest( dToStr, $e000, "0000_E000", $432e );
		hexTest( dToStr, $f000, "0000_F000", $432f );

		hexTest( dToStr, $1_0000, "0001_0000", $5321 );
		hexTest( dToStr, $2_0000, "0002_0000", $5322 );
		hexTest( dToStr, $3_0000, "0003_0000", $5323 );
		hexTest( dToStr, $4_0000, "0004_0000", $5324 );
		hexTest( dToStr, $5_0000, "0005_0000", $5325 );
		hexTest( dToStr, $6_0000, "0006_0000", $5326 );
		hexTest( dToStr, $7_0000, "0007_0000", $5327 );
		hexTest( dToStr, $8_0000, "0008_0000", $5328 );
		hexTest( dToStr, $9_0000, "0009_0000", $5329 );
		hexTest( dToStr, $a_0000, "000A_0000", $532a );
		hexTest( dToStr, $b_0000, "000B_0000", $532b );
		hexTest( dToStr, $c_0000, "000C_0000", $532c );
		hexTest( dToStr, $d_0000, "000D_0000", $532d );
		hexTest( dToStr, $e_0000, "000E_0000", $532e );
		hexTest( dToStr, $f_0000, "000F_0000", $532f );

		hexTest( dToStr, $10_0000, "0010_0000", $6321 );
		hexTest( dToStr, $20_0000, "0020_0000", $6322 );
		hexTest( dToStr, $30_0000, "0030_0000", $6323 );
		hexTest( dToStr, $40_0000, "0040_0000", $6324 );
		hexTest( dToStr, $50_0000, "0050_0000", $6325 );
		hexTest( dToStr, $60_0000, "0060_0000", $6326 );
		hexTest( dToStr, $70_0000, "0070_0000", $6327 );
		hexTest( dToStr, $80_0000, "0080_0000", $6328 );
		hexTest( dToStr, $90_0000, "0090_0000", $6329 );
		hexTest( dToStr, $a0_0000, "00A0_0000", $632a );
		hexTest( dToStr, $b0_0000, "00B0_0000", $632b );
		hexTest( dToStr, $c0_0000, "00C0_0000", $632c );
		hexTest( dToStr, $d0_0000, "00D0_0000", $632d );
		hexTest( dToStr, $e0_0000, "00E0_0000", $632e );
		hexTest( dToStr, $f0_0000, "00F0_0000", $632f );

		hexTest( dToStr, $100_0000, "0100_0000", $7321 );
		hexTest( dToStr, $200_0000, "0200_0000", $7322 );
		hexTest( dToStr, $300_0000, "0300_0000", $7323 );
		hexTest( dToStr, $400_0000, "0400_0000", $7324 );
		hexTest( dToStr, $500_0000, "0500_0000", $7325 );
		hexTest( dToStr, $600_0000, "0600_0000", $7326 );
		hexTest( dToStr, $700_0000, "0700_0000", $7327 );
		hexTest( dToStr, $800_0000, "0800_0000", $7328 );
		hexTest( dToStr, $900_0000, "0900_0000", $7329 );
		hexTest( dToStr, $a00_0000, "0A00_0000", $732a );
		hexTest( dToStr, $b00_0000, "0B00_0000", $732b );
		hexTest( dToStr, $c00_0000, "0C00_0000", $732c );
		hexTest( dToStr, $d00_0000, "0D00_0000", $732d );
		hexTest( dToStr, $e00_0000, "0E00_0000", $732e );
		hexTest( dToStr, $f00_0000, "0F00_0000", $732f );

		hexTest( dToStr, $1000_0000, "1000_0000", $8321 );
		hexTest( dToStr, $2000_0000, "2000_0000", $8322 );
		hexTest( dToStr, $3000_0000, "3000_0000", $8323 );
		hexTest( dToStr, $4000_0000, "4000_0000", $8324 );
		hexTest( dToStr, $5000_0000, "5000_0000", $8325 );
		hexTest( dToStr, $6000_0000, "6000_0000", $8326 );
		hexTest( dToStr, $7000_0000, "7000_0000", $8327 );
		hexTest( dToStr, $8000_0000, "8000_0000", $8328 );
		hexTest( dToStr, $9000_0000, "9000_0000", $8329 );
		hexTest( dToStr, $a000_0000, "A000_0000", $832a );
		hexTest( dToStr, $b000_0000, "B000_0000", $832b );
		hexTest( dToStr, $c000_0000, "C000_0000", $832c );
		hexTest( dToStr, $d000_0000, "D000_0000", $832d );
		hexTest( dToStr, $e000_0000, "E000_0000", $832e );
		hexTest( dToStr, $f000_0000, "F000_0000", $832f );


		
		stderr.put( "conv.dToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.dToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.h64ToStr

	try

		bufTest( h64ToStr, $0,  "0", $1640 );
		bufTest( h64ToStr, $1,  "1", $1641 );
		bufTest( h64ToStr, $2,  "2", $1642 );
		bufTest( h64ToStr, $3,  "3", $1643 );
		bufTest( h64ToStr, $4,  "4", $1644 );
		bufTest( h64ToStr, $5,  "5", $1645 );
		bufTest( h64ToStr, $6,  "6", $1646 );
		bufTest( h64ToStr, $7,  "7", $1647 );
		bufTest( h64ToStr, $8,  "8", $1648 );
		bufTest( h64ToStr, $9,  "9", $1649 );
		bufTest( h64ToStr, $a,  "A", $164a );
		bufTest( h64ToStr, $b,  "B", $164b );
		bufTest( h64ToStr, $c,  "C", $164c );
		bufTest( h64ToStr, $d,  "D", $164d );
		bufTest( h64ToStr, $e,  "E", $164e );
		bufTest( h64ToStr, $f,  "F", $164f );

		bufTest( h64ToStr, $10, "10", $2641 );
		bufTest( h64ToStr, $20, "20", $2642 );
		bufTest( h64ToStr, $30, "30", $2643 );
		bufTest( h64ToStr, $40, "40", $2644 );
		bufTest( h64ToStr, $50, "50", $2645 );
		bufTest( h64ToStr, $60, "60", $2646 );
		bufTest( h64ToStr, $70, "70", $2647 );
		bufTest( h64ToStr, $80, "80", $2648 );
		bufTest( h64ToStr, $90, "90", $2649 );
		bufTest( h64ToStr, $a0, "A0", $264a );
		bufTest( h64ToStr, $b0, "B0", $264b );
		bufTest( h64ToStr, $c0, "C0", $264c );
		bufTest( h64ToStr, $d0, "D0", $264d );
		bufTest( h64ToStr, $e0, "E0", $264e );
		bufTest( h64ToStr, $f0, "F0", $264f );

		bufTest( h64ToStr, $100, "100", $3641 );
		bufTest( h64ToStr, $200, "200", $3642 );
		bufTest( h64ToStr, $300, "300", $3643 );
		bufTest( h64ToStr, $400, "400", $3644 );
		bufTest( h64ToStr, $500, "500", $3645 );
		bufTest( h64ToStr, $600, "600", $3646 );
		bufTest( h64ToStr, $700, "700", $3647 );
		bufTest( h64ToStr, $800, "800", $3648 );
		bufTest( h64ToStr, $900, "900", $3649 );
		bufTest( h64ToStr, $a00, "A00", $364a );
		bufTest( h64ToStr, $b00, "B00", $364b );
		bufTest( h64ToStr, $c00, "C00", $364c );
		bufTest( h64ToStr, $d00, "D00", $364d );
		bufTest( h64ToStr, $e00, "E00", $364e );
		bufTest( h64ToStr, $f00, "F00", $364f );

		bufTest( h64ToStr, $1000, "1000", $4641 );
		bufTest( h64ToStr, $2000, "2000", $4642 );
		bufTest( h64ToStr, $3000, "3000", $4643 );
		bufTest( h64ToStr, $4000, "4000", $4644 );
		bufTest( h64ToStr, $5000, "5000", $4645 );
		bufTest( h64ToStr, $6000, "6000", $4646 );
		bufTest( h64ToStr, $7000, "7000", $4647 );
		bufTest( h64ToStr, $8000, "8000", $4648 );
		bufTest( h64ToStr, $9000, "9000", $4649 );
		bufTest( h64ToStr, $a000, "A000", $464a );
		bufTest( h64ToStr, $b000, "B000", $464b );
		bufTest( h64ToStr, $c000, "C000", $464c );
		bufTest( h64ToStr, $d000, "D000", $464d );
		bufTest( h64ToStr, $e000, "E000", $464e );
		bufTest( h64ToStr, $f000, "F000", $464f );

		bufTest( h64ToStr, $1_0000, "1_0000", $5641 );
		bufTest( h64ToStr, $2_0000, "2_0000", $5642 );
		bufTest( h64ToStr, $3_0000, "3_0000", $5643 );
		bufTest( h64ToStr, $4_0000, "4_0000", $5644 );
		bufTest( h64ToStr, $5_0000, "5_0000", $5645 );
		bufTest( h64ToStr, $6_0000, "6_0000", $5646 );
		bufTest( h64ToStr, $7_0000, "7_0000", $5647 );
		bufTest( h64ToStr, $8_0000, "8_0000", $5648 );
		bufTest( h64ToStr, $9_0000, "9_0000", $5649 );
		bufTest( h64ToStr, $a_0000, "A_0000", $564a );
		bufTest( h64ToStr, $b_0000, "B_0000", $564b );
		bufTest( h64ToStr, $c_0000, "C_0000", $564c );
		bufTest( h64ToStr, $d_0000, "D_0000", $564d );
		bufTest( h64ToStr, $e_0000, "E_0000", $564e );
		bufTest( h64ToStr, $f_0000, "F_0000", $564f );

		bufTest( h64ToStr, $10_0000, "10_0000", $6641 );
		bufTest( h64ToStr, $20_0000, "20_0000", $6642 );
		bufTest( h64ToStr, $30_0000, "30_0000", $6643 );
		bufTest( h64ToStr, $40_0000, "40_0000", $6644 );
		bufTest( h64ToStr, $50_0000, "50_0000", $6645 );
		bufTest( h64ToStr, $60_0000, "60_0000", $6646 );
		bufTest( h64ToStr, $70_0000, "70_0000", $6647 );
		bufTest( h64ToStr, $80_0000, "80_0000", $6648 );
		bufTest( h64ToStr, $90_0000, "90_0000", $6649 );
		bufTest( h64ToStr, $a0_0000, "A0_0000", $664a );
		bufTest( h64ToStr, $b0_0000, "B0_0000", $664b );
		bufTest( h64ToStr, $c0_0000, "C0_0000", $664c );
		bufTest( h64ToStr, $d0_0000, "D0_0000", $664d );
		bufTest( h64ToStr, $e0_0000, "E0_0000", $664e );
		bufTest( h64ToStr, $f0_0000, "F0_0000", $664f );

		bufTest( h64ToStr, $100_0000, "100_0000", $7641 );
		bufTest( h64ToStr, $200_0000, "200_0000", $7642 );
		bufTest( h64ToStr, $300_0000, "300_0000", $7643 );
		bufTest( h64ToStr, $400_0000, "400_0000", $7644 );
		bufTest( h64ToStr, $500_0000, "500_0000", $7645 );
		bufTest( h64ToStr, $600_0000, "600_0000", $7646 );
		bufTest( h64ToStr, $700_0000, "700_0000", $7647 );
		bufTest( h64ToStr, $800_0000, "800_0000", $7648 );
		bufTest( h64ToStr, $900_0000, "900_0000", $7649 );
		bufTest( h64ToStr, $a00_0000, "A00_0000", $764a );
		bufTest( h64ToStr, $b00_0000, "B00_0000", $764b );
		bufTest( h64ToStr, $c00_0000, "C00_0000", $764c );
		bufTest( h64ToStr, $d00_0000, "D00_0000", $764d );
		bufTest( h64ToStr, $e00_0000, "E00_0000", $764e );
		bufTest( h64ToStr, $f00_0000, "F00_0000", $764f );

		bufTest( h64ToStr, $1000_0000, "1000_0000", $8641 );
		bufTest( h64ToStr, $2000_0000, "2000_0000", $8642 );
		bufTest( h64ToStr, $3000_0000, "3000_0000", $8643 );
		bufTest( h64ToStr, $4000_0000, "4000_0000", $8644 );
		bufTest( h64ToStr, $5000_0000, "5000_0000", $8645 );
		bufTest( h64ToStr, $6000_0000, "6000_0000", $8646 );
		bufTest( h64ToStr, $7000_0000, "7000_0000", $8647 );
		bufTest( h64ToStr, $8000_0000, "8000_0000", $8648 );
		bufTest( h64ToStr, $9000_0000, "9000_0000", $8649 );
		bufTest( h64ToStr, $a000_0000, "A000_0000", $864a );
		bufTest( h64ToStr, $b000_0000, "B000_0000", $864b );
		bufTest( h64ToStr, $c000_0000, "C000_0000", $864c );
		bufTest( h64ToStr, $d000_0000, "D000_0000", $864d );
		bufTest( h64ToStr, $e000_0000, "E000_0000", $864e );
		bufTest( h64ToStr, $f000_0000, "F000_0000", $864f );

		bufTest( h64ToStr, $1_0000_0000, "1_0000_0000", $9641 );
		bufTest( h64ToStr, $2_0000_0000, "2_0000_0000", $9642 );
		bufTest( h64ToStr, $3_0000_0000, "3_0000_0000", $9643 );
		bufTest( h64ToStr, $4_0000_0000, "4_0000_0000", $9644 );
		bufTest( h64ToStr, $5_0000_0000, "5_0000_0000", $9645 );
		bufTest( h64ToStr, $6_0000_0000, "6_0000_0000", $9646 );
		bufTest( h64ToStr, $7_0000_0000, "7_0000_0000", $9647 );
		bufTest( h64ToStr, $8_0000_0000, "8_0000_0000", $9648 );
		bufTest( h64ToStr, $9_0000_0000, "9_0000_0000", $9649 );
		bufTest( h64ToStr, $a_0000_0000, "A_0000_0000", $964a );
		bufTest( h64ToStr, $b_0000_0000, "B_0000_0000", $964b );
		bufTest( h64ToStr, $c_0000_0000, "C_0000_0000", $964c );
		bufTest( h64ToStr, $d_0000_0000, "D_0000_0000", $964d );
		bufTest( h64ToStr, $e_0000_0000, "E_0000_0000", $964e );
		bufTest( h64ToStr, $f_0000_0000, "F_0000_0000", $964f );

		bufTest( h64ToStr, $10_0000_0000, "10_0000_0000", $a641 );
		bufTest( h64ToStr, $20_0000_0000, "20_0000_0000", $a642 );
		bufTest( h64ToStr, $30_0000_0000, "30_0000_0000", $a643 );
		bufTest( h64ToStr, $40_0000_0000, "40_0000_0000", $a644 );
		bufTest( h64ToStr, $50_0000_0000, "50_0000_0000", $a645 );
		bufTest( h64ToStr, $60_0000_0000, "60_0000_0000", $a646 );
		bufTest( h64ToStr, $70_0000_0000, "70_0000_0000", $a647 );
		bufTest( h64ToStr, $80_0000_0000, "80_0000_0000", $a648 );
		bufTest( h64ToStr, $90_0000_0000, "90_0000_0000", $a649 );
		bufTest( h64ToStr, $a0_0000_0000, "A0_0000_0000", $a64a );
		bufTest( h64ToStr, $b0_0000_0000, "B0_0000_0000", $a64b );
		bufTest( h64ToStr, $c0_0000_0000, "C0_0000_0000", $a64c );
		bufTest( h64ToStr, $d0_0000_0000, "D0_0000_0000", $a64d );
		bufTest( h64ToStr, $e0_0000_0000, "E0_0000_0000", $a64e );
		bufTest( h64ToStr, $f0_0000_0000, "F0_0000_0000", $a64f );

		bufTest( h64ToStr, $100_0000_0000, "100_0000_0000", $b641 );
		bufTest( h64ToStr, $200_0000_0000, "200_0000_0000", $b642 );
		bufTest( h64ToStr, $300_0000_0000, "300_0000_0000", $b643 );
		bufTest( h64ToStr, $400_0000_0000, "400_0000_0000", $b644 );
		bufTest( h64ToStr, $500_0000_0000, "500_0000_0000", $b645 );
		bufTest( h64ToStr, $600_0000_0000, "600_0000_0000", $b646 );
		bufTest( h64ToStr, $700_0000_0000, "700_0000_0000", $b647 );
		bufTest( h64ToStr, $800_0000_0000, "800_0000_0000", $b648 );
		bufTest( h64ToStr, $900_0000_0000, "900_0000_0000", $b649 );
		bufTest( h64ToStr, $a00_0000_0000, "A00_0000_0000", $b64a );
		bufTest( h64ToStr, $b00_0000_0000, "B00_0000_0000", $b64b );
		bufTest( h64ToStr, $c00_0000_0000, "C00_0000_0000", $b64c );
		bufTest( h64ToStr, $d00_0000_0000, "D00_0000_0000", $b64d );
		bufTest( h64ToStr, $e00_0000_0000, "E00_0000_0000", $b64e );
		bufTest( h64ToStr, $f00_0000_0000, "F00_0000_0000", $b64f );

		bufTest( h64ToStr, $1000_0000_0000, "1000_0000_0000", $c641 );
		bufTest( h64ToStr, $2000_0000_0000, "2000_0000_0000", $c642 );
		bufTest( h64ToStr, $3000_0000_0000, "3000_0000_0000", $c643 );
		bufTest( h64ToStr, $4000_0000_0000, "4000_0000_0000", $c644 );
		bufTest( h64ToStr, $5000_0000_0000, "5000_0000_0000", $c645 );
		bufTest( h64ToStr, $6000_0000_0000, "6000_0000_0000", $c646 );
		bufTest( h64ToStr, $7000_0000_0000, "7000_0000_0000", $c647 );
		bufTest( h64ToStr, $8000_0000_0000, "8000_0000_0000", $c648 );
		bufTest( h64ToStr, $9000_0000_0000, "9000_0000_0000", $c649 );
		bufTest( h64ToStr, $a000_0000_0000, "A000_0000_0000", $c64a );
		bufTest( h64ToStr, $b000_0000_0000, "B000_0000_0000", $c64b );
		bufTest( h64ToStr, $c000_0000_0000, "C000_0000_0000", $c64c );
		bufTest( h64ToStr, $d000_0000_0000, "D000_0000_0000", $c64d );
		bufTest( h64ToStr, $e000_0000_0000, "E000_0000_0000", $c64e );
		bufTest( h64ToStr, $f000_0000_0000, "F000_0000_0000", $c64f );

		bufTest( h64ToStr, $1_0000_0000_0000, "1_0000_0000_0000", $d641 );
		bufTest( h64ToStr, $2_0000_0000_0000, "2_0000_0000_0000", $d642 );
		bufTest( h64ToStr, $3_0000_0000_0000, "3_0000_0000_0000", $d643 );
		bufTest( h64ToStr, $4_0000_0000_0000, "4_0000_0000_0000", $d644 );
		bufTest( h64ToStr, $5_0000_0000_0000, "5_0000_0000_0000", $d645 );
		bufTest( h64ToStr, $6_0000_0000_0000, "6_0000_0000_0000", $d646 );
		bufTest( h64ToStr, $7_0000_0000_0000, "7_0000_0000_0000", $d647 );
		bufTest( h64ToStr, $8_0000_0000_0000, "8_0000_0000_0000", $d648 );
		bufTest( h64ToStr, $9_0000_0000_0000, "9_0000_0000_0000", $d649 );
		bufTest( h64ToStr, $a_0000_0000_0000, "A_0000_0000_0000", $d64a );
		bufTest( h64ToStr, $b_0000_0000_0000, "B_0000_0000_0000", $d64b );
		bufTest( h64ToStr, $c_0000_0000_0000, "C_0000_0000_0000", $d64c );
		bufTest( h64ToStr, $d_0000_0000_0000, "D_0000_0000_0000", $d64d );
		bufTest( h64ToStr, $e_0000_0000_0000, "E_0000_0000_0000", $d64e );
		bufTest( h64ToStr, $f_0000_0000_0000, "F_0000_0000_0000", $d64f );

		bufTest( h64ToStr, $10_0000_0000_0000,     "10_0000_0000_0000", $e641 );
		bufTest( h64ToStr, $20_0000_0000_0000,     "20_0000_0000_0000", $e642 );
		bufTest( h64ToStr, $30_0000_0000_0000,     "30_0000_0000_0000", $e643 );
		bufTest( h64ToStr, $40_0000_0000_0000,     "40_0000_0000_0000", $e644 );
		bufTest( h64ToStr, $50_0000_0000_0000,     "50_0000_0000_0000", $e645 );
		bufTest( h64ToStr, $60_0000_0000_0000,     "60_0000_0000_0000", $e646 );
		bufTest( h64ToStr, $70_0000_0000_0000,     "70_0000_0000_0000", $e647 );
		bufTest( h64ToStr, $80_0000_0000_0000,     "80_0000_0000_0000", $e648 );
		bufTest( h64ToStr, $90_0000_0000_0000,     "90_0000_0000_0000", $e649 );
		bufTest( h64ToStr, $a0_0000_0000_0000,     "A0_0000_0000_0000", $e64a );
		bufTest( h64ToStr, $b0_0000_0000_0000,     "B0_0000_0000_0000", $e64b );
		bufTest( h64ToStr, $c0_0000_0000_0000,     "C0_0000_0000_0000", $e64c );
		bufTest( h64ToStr, $d0_0000_0000_0000,     "D0_0000_0000_0000", $e64d );
		bufTest( h64ToStr, $e0_0000_0000_0000,     "E0_0000_0000_0000", $e64e );
		bufTest( h64ToStr, $f0_0000_0000_0000,     "F0_0000_0000_0000", $e64f );
													  
		bufTest( h64ToStr, $100_0000_0000_0000,   "100_0000_0000_0000", $f641 );
		bufTest( h64ToStr, $200_0000_0000_0000,   "200_0000_0000_0000", $f642 );
		bufTest( h64ToStr, $300_0000_0000_0000,   "300_0000_0000_0000", $f643 );
		bufTest( h64ToStr, $400_0000_0000_0000,   "400_0000_0000_0000", $f644 );
		bufTest( h64ToStr, $500_0000_0000_0000,   "500_0000_0000_0000", $f645 );
		bufTest( h64ToStr, $600_0000_0000_0000,   "600_0000_0000_0000", $f646 );
		bufTest( h64ToStr, $700_0000_0000_0000,   "700_0000_0000_0000", $f647 );
		bufTest( h64ToStr, $800_0000_0000_0000,   "800_0000_0000_0000", $f648 );
		bufTest( h64ToStr, $900_0000_0000_0000,   "900_0000_0000_0000", $f649 );
		bufTest( h64ToStr, $a00_0000_0000_0000,   "A00_0000_0000_0000", $f64a );
		bufTest( h64ToStr, $b00_0000_0000_0000,   "B00_0000_0000_0000", $f64b );
		bufTest( h64ToStr, $c00_0000_0000_0000,   "C00_0000_0000_0000", $f64c );
		bufTest( h64ToStr, $d00_0000_0000_0000,   "D00_0000_0000_0000", $f64d );
		bufTest( h64ToStr, $e00_0000_0000_0000,   "E00_0000_0000_0000", $f64e );
		bufTest( h64ToStr, $f00_0000_0000_0000,   "F00_0000_0000_0000", $f64f );
													  
		bufTest( h64ToStr, $1000_0000_0000_0000, "1000_0000_0000_0000", $641 );
		bufTest( h64ToStr, $2000_0000_0000_0000, "2000_0000_0000_0000", $642 );
		bufTest( h64ToStr, $3000_0000_0000_0000, "3000_0000_0000_0000", $643 );
		bufTest( h64ToStr, $4000_0000_0000_0000, "4000_0000_0000_0000", $644 );
		bufTest( h64ToStr, $5000_0000_0000_0000, "5000_0000_0000_0000", $645 );
		bufTest( h64ToStr, $6000_0000_0000_0000, "6000_0000_0000_0000", $646 );
		bufTest( h64ToStr, $7000_0000_0000_0000, "7000_0000_0000_0000", $647 );
		bufTest( h64ToStr, $8000_0000_0000_0000, "8000_0000_0000_0000", $648 );
		bufTest( h64ToStr, $9000_0000_0000_0000, "9000_0000_0000_0000", $649 );
		bufTest( h64ToStr, $a000_0000_0000_0000, "A000_0000_0000_0000", $64a );
		bufTest( h64ToStr, $b000_0000_0000_0000, "B000_0000_0000_0000", $64b );
		bufTest( h64ToStr, $c000_0000_0000_0000, "C000_0000_0000_0000", $64c );
		bufTest( h64ToStr, $d000_0000_0000_0000, "D000_0000_0000_0000", $64d );
		bufTest( h64ToStr, $e000_0000_0000_0000, "E000_0000_0000_0000", $64e );
		bufTest( h64ToStr, $f000_0000_0000_0000, "F000_0000_0000_0000", $64f );	
		
		



		readonly
			h64Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			h64Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "FFFF_FFFF_FFFF_FFFF", '.', i ),
								
							#endfor
							mkStr2( "FFFF_FFFF_FFFF_FFFF", '.', 63 )
						];
						
		endreadonly;
		strTest( h64ToStr, 0, h64Test_a, $650, 63, ' ' );				
		strTest2( h64ToStr, $FFFF_FFFF_FFFF_FFFF, h64Test_b, $651, 63, '.' );				
		
		
		
		stderr.put( "conv.h64ToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.h64ToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;












	// Testing conv.qToStr

	try

		hexTest( qToStr, $0,  "0000_0000_0000_0000", $1640 );
		hexTest( qToStr, $1,  "0000_0000_0000_0001", $1641 );
		hexTest( qToStr, $2,  "0000_0000_0000_0002", $1642 );
		hexTest( qToStr, $3,  "0000_0000_0000_0003", $1643 );
		hexTest( qToStr, $4,  "0000_0000_0000_0004", $1644 );
		hexTest( qToStr, $5,  "0000_0000_0000_0005", $1645 );
		hexTest( qToStr, $6,  "0000_0000_0000_0006", $1646 );
		hexTest( qToStr, $7,  "0000_0000_0000_0007", $1647 );
		hexTest( qToStr, $8,  "0000_0000_0000_0008", $1648 );
		hexTest( qToStr, $9,  "0000_0000_0000_0009", $1649 );
		hexTest( qToStr, $a,  "0000_0000_0000_000A", $164a );
		hexTest( qToStr, $b,  "0000_0000_0000_000B", $164b );
		hexTest( qToStr, $c,  "0000_0000_0000_000C", $164c );
		hexTest( qToStr, $d,  "0000_0000_0000_000D", $164d );
		hexTest( qToStr, $e,  "0000_0000_0000_000E", $164e );
		hexTest( qToStr, $f,  "0000_0000_0000_000F", $164f );

		hexTest( qToStr, $10, "0000_0000_0000_0010", $2641 );
		hexTest( qToStr, $20, "0000_0000_0000_0020", $2642 );
		hexTest( qToStr, $30, "0000_0000_0000_0030", $2643 );
		hexTest( qToStr, $40, "0000_0000_0000_0040", $2644 );
		hexTest( qToStr, $50, "0000_0000_0000_0050", $2645 );
		hexTest( qToStr, $60, "0000_0000_0000_0060", $2646 );
		hexTest( qToStr, $70, "0000_0000_0000_0070", $2647 );
		hexTest( qToStr, $80, "0000_0000_0000_0080", $2648 );
		hexTest( qToStr, $90, "0000_0000_0000_0090", $2649 );
		hexTest( qToStr, $a0, "0000_0000_0000_00A0", $264a );
		hexTest( qToStr, $b0, "0000_0000_0000_00B0", $264b );
		hexTest( qToStr, $c0, "0000_0000_0000_00C0", $264c );
		hexTest( qToStr, $d0, "0000_0000_0000_00D0", $264d );
		hexTest( qToStr, $e0, "0000_0000_0000_00E0", $264e );
		hexTest( qToStr, $f0, "0000_0000_0000_00F0", $264f );

		hexTest( qToStr, $100, "0000_0000_0000_0100", $3641 );
		hexTest( qToStr, $200, "0000_0000_0000_0200", $3642 );
		hexTest( qToStr, $300, "0000_0000_0000_0300", $3643 );
		hexTest( qToStr, $400, "0000_0000_0000_0400", $3644 );
		hexTest( qToStr, $500, "0000_0000_0000_0500", $3645 );
		hexTest( qToStr, $600, "0000_0000_0000_0600", $3646 );
		hexTest( qToStr, $700, "0000_0000_0000_0700", $3647 );
		hexTest( qToStr, $800, "0000_0000_0000_0800", $3648 );
		hexTest( qToStr, $900, "0000_0000_0000_0900", $3649 );
		hexTest( qToStr, $a00, "0000_0000_0000_0A00", $364a );
		hexTest( qToStr, $b00, "0000_0000_0000_0B00", $364b );
		hexTest( qToStr, $c00, "0000_0000_0000_0C00", $364c );
		hexTest( qToStr, $d00, "0000_0000_0000_0D00", $364d );
		hexTest( qToStr, $e00, "0000_0000_0000_0E00", $364e );
		hexTest( qToStr, $f00, "0000_0000_0000_0F00", $364f );

		hexTest( qToStr, $1000, "0000_0000_0000_1000", $4641 );
		hexTest( qToStr, $2000, "0000_0000_0000_2000", $4642 );
		hexTest( qToStr, $3000, "0000_0000_0000_3000", $4643 );
		hexTest( qToStr, $4000, "0000_0000_0000_4000", $4644 );
		hexTest( qToStr, $5000, "0000_0000_0000_5000", $4645 );
		hexTest( qToStr, $6000, "0000_0000_0000_6000", $4646 );
		hexTest( qToStr, $7000, "0000_0000_0000_7000", $4647 );
		hexTest( qToStr, $8000, "0000_0000_0000_8000", $4648 );
		hexTest( qToStr, $9000, "0000_0000_0000_9000", $4649 );
		hexTest( qToStr, $a000, "0000_0000_0000_A000", $464a );
		hexTest( qToStr, $b000, "0000_0000_0000_B000", $464b );
		hexTest( qToStr, $c000, "0000_0000_0000_C000", $464c );
		hexTest( qToStr, $d000, "0000_0000_0000_D000", $464d );
		hexTest( qToStr, $e000, "0000_0000_0000_E000", $464e );
		hexTest( qToStr, $f000, "0000_0000_0000_F000", $464f );

		hexTest( qToStr, $1_0000, "0000_0000_0001_0000", $5641 );
		hexTest( qToStr, $2_0000, "0000_0000_0002_0000", $5642 );
		hexTest( qToStr, $3_0000, "0000_0000_0003_0000", $5643 );
		hexTest( qToStr, $4_0000, "0000_0000_0004_0000", $5644 );
		hexTest( qToStr, $5_0000, "0000_0000_0005_0000", $5645 );
		hexTest( qToStr, $6_0000, "0000_0000_0006_0000", $5646 );
		hexTest( qToStr, $7_0000, "0000_0000_0007_0000", $5647 );
		hexTest( qToStr, $8_0000, "0000_0000_0008_0000", $5648 );
		hexTest( qToStr, $9_0000, "0000_0000_0009_0000", $5649 );
		hexTest( qToStr, $a_0000, "0000_0000_000A_0000", $564a );
		hexTest( qToStr, $b_0000, "0000_0000_000B_0000", $564b );
		hexTest( qToStr, $c_0000, "0000_0000_000C_0000", $564c );
		hexTest( qToStr, $d_0000, "0000_0000_000D_0000", $564d );
		hexTest( qToStr, $e_0000, "0000_0000_000E_0000", $564e );
		hexTest( qToStr, $f_0000, "0000_0000_000F_0000", $564f );

		hexTest( qToStr, $10_0000, "0000_0000_0010_0000", $6641 );
		hexTest( qToStr, $20_0000, "0000_0000_0020_0000", $6642 );
		hexTest( qToStr, $30_0000, "0000_0000_0030_0000", $6643 );
		hexTest( qToStr, $40_0000, "0000_0000_0040_0000", $6644 );
		hexTest( qToStr, $50_0000, "0000_0000_0050_0000", $6645 );
		hexTest( qToStr, $60_0000, "0000_0000_0060_0000", $6646 );
		hexTest( qToStr, $70_0000, "0000_0000_0070_0000", $6647 );
		hexTest( qToStr, $80_0000, "0000_0000_0080_0000", $6648 );
		hexTest( qToStr, $90_0000, "0000_0000_0090_0000", $6649 );
		hexTest( qToStr, $a0_0000, "0000_0000_00A0_0000", $664a );
		hexTest( qToStr, $b0_0000, "0000_0000_00B0_0000", $664b );
		hexTest( qToStr, $c0_0000, "0000_0000_00C0_0000", $664c );
		hexTest( qToStr, $d0_0000, "0000_0000_00D0_0000", $664d );
		hexTest( qToStr, $e0_0000, "0000_0000_00E0_0000", $664e );
		hexTest( qToStr, $f0_0000, "0000_0000_00F0_0000", $664f );

		hexTest( qToStr, $100_0000, "0000_0000_0100_0000", $7641 );
		hexTest( qToStr, $200_0000, "0000_0000_0200_0000", $7642 );
		hexTest( qToStr, $300_0000, "0000_0000_0300_0000", $7643 );
		hexTest( qToStr, $400_0000, "0000_0000_0400_0000", $7644 );
		hexTest( qToStr, $500_0000, "0000_0000_0500_0000", $7645 );
		hexTest( qToStr, $600_0000, "0000_0000_0600_0000", $7646 );
		hexTest( qToStr, $700_0000, "0000_0000_0700_0000", $7647 );
		hexTest( qToStr, $800_0000, "0000_0000_0800_0000", $7648 );
		hexTest( qToStr, $900_0000, "0000_0000_0900_0000", $7649 );
		hexTest( qToStr, $a00_0000, "0000_0000_0A00_0000", $764a );
		hexTest( qToStr, $b00_0000, "0000_0000_0B00_0000", $764b );
		hexTest( qToStr, $c00_0000, "0000_0000_0C00_0000", $764c );
		hexTest( qToStr, $d00_0000, "0000_0000_0D00_0000", $764d );
		hexTest( qToStr, $e00_0000, "0000_0000_0E00_0000", $764e );
		hexTest( qToStr, $f00_0000, "0000_0000_0F00_0000", $764f );

		hexTest( qToStr, $1000_0000, "0000_0000_1000_0000", $8641 );
		hexTest( qToStr, $2000_0000, "0000_0000_2000_0000", $8642 );
		hexTest( qToStr, $3000_0000, "0000_0000_3000_0000", $8643 );
		hexTest( qToStr, $4000_0000, "0000_0000_4000_0000", $8644 );
		hexTest( qToStr, $5000_0000, "0000_0000_5000_0000", $8645 );
		hexTest( qToStr, $6000_0000, "0000_0000_6000_0000", $8646 );
		hexTest( qToStr, $7000_0000, "0000_0000_7000_0000", $8647 );
		hexTest( qToStr, $8000_0000, "0000_0000_8000_0000", $8648 );
		hexTest( qToStr, $9000_0000, "0000_0000_9000_0000", $8649 );
		hexTest( qToStr, $a000_0000, "0000_0000_A000_0000", $864a );
		hexTest( qToStr, $b000_0000, "0000_0000_B000_0000", $864b );
		hexTest( qToStr, $c000_0000, "0000_0000_C000_0000", $864c );
		hexTest( qToStr, $d000_0000, "0000_0000_D000_0000", $864d );
		hexTest( qToStr, $e000_0000, "0000_0000_E000_0000", $864e );
		hexTest( qToStr, $f000_0000, "0000_0000_F000_0000", $864f );

		hexTest( qToStr, $1_0000_0000, "0000_0001_0000_0000", $9641 );
		hexTest( qToStr, $2_0000_0000, "0000_0002_0000_0000", $9642 );
		hexTest( qToStr, $3_0000_0000, "0000_0003_0000_0000", $9643 );
		hexTest( qToStr, $4_0000_0000, "0000_0004_0000_0000", $9644 );
		hexTest( qToStr, $5_0000_0000, "0000_0005_0000_0000", $9645 );
		hexTest( qToStr, $6_0000_0000, "0000_0006_0000_0000", $9646 );
		hexTest( qToStr, $7_0000_0000, "0000_0007_0000_0000", $9647 );
		hexTest( qToStr, $8_0000_0000, "0000_0008_0000_0000", $9648 );
		hexTest( qToStr, $9_0000_0000, "0000_0009_0000_0000", $9649 );
		hexTest( qToStr, $a_0000_0000, "0000_000A_0000_0000", $964a );
		hexTest( qToStr, $b_0000_0000, "0000_000B_0000_0000", $964b );
		hexTest( qToStr, $c_0000_0000, "0000_000C_0000_0000", $964c );
		hexTest( qToStr, $d_0000_0000, "0000_000D_0000_0000", $964d );
		hexTest( qToStr, $e_0000_0000, "0000_000E_0000_0000", $964e );
		hexTest( qToStr, $f_0000_0000, "0000_000F_0000_0000", $964f );

		hexTest( qToStr, $10_0000_0000, "0000_0010_0000_0000", $a641 );
		hexTest( qToStr, $20_0000_0000, "0000_0020_0000_0000", $a642 );
		hexTest( qToStr, $30_0000_0000, "0000_0030_0000_0000", $a643 );
		hexTest( qToStr, $40_0000_0000, "0000_0040_0000_0000", $a644 );
		hexTest( qToStr, $50_0000_0000, "0000_0050_0000_0000", $a645 );
		hexTest( qToStr, $60_0000_0000, "0000_0060_0000_0000", $a646 );
		hexTest( qToStr, $70_0000_0000, "0000_0070_0000_0000", $a647 );
		hexTest( qToStr, $80_0000_0000, "0000_0080_0000_0000", $a648 );
		hexTest( qToStr, $90_0000_0000, "0000_0090_0000_0000", $a649 );
		hexTest( qToStr, $a0_0000_0000, "0000_00A0_0000_0000", $a64a );
		hexTest( qToStr, $b0_0000_0000, "0000_00B0_0000_0000", $a64b );
		hexTest( qToStr, $c0_0000_0000, "0000_00C0_0000_0000", $a64c );
		hexTest( qToStr, $d0_0000_0000, "0000_00D0_0000_0000", $a64d );
		hexTest( qToStr, $e0_0000_0000, "0000_00E0_0000_0000", $a64e );
		hexTest( qToStr, $f0_0000_0000, "0000_00F0_0000_0000", $a64f );

		hexTest( qToStr, $100_0000_0000, "0000_0100_0000_0000", $b641 );
		hexTest( qToStr, $200_0000_0000, "0000_0200_0000_0000", $b642 );
		hexTest( qToStr, $300_0000_0000, "0000_0300_0000_0000", $b643 );
		hexTest( qToStr, $400_0000_0000, "0000_0400_0000_0000", $b644 );
		hexTest( qToStr, $500_0000_0000, "0000_0500_0000_0000", $b645 );
		hexTest( qToStr, $600_0000_0000, "0000_0600_0000_0000", $b646 );
		hexTest( qToStr, $700_0000_0000, "0000_0700_0000_0000", $b647 );
		hexTest( qToStr, $800_0000_0000, "0000_0800_0000_0000", $b648 );
		hexTest( qToStr, $900_0000_0000, "0000_0900_0000_0000", $b649 );
		hexTest( qToStr, $a00_0000_0000, "0000_0A00_0000_0000", $b64a );
		hexTest( qToStr, $b00_0000_0000, "0000_0B00_0000_0000", $b64b );
		hexTest( qToStr, $c00_0000_0000, "0000_0C00_0000_0000", $b64c );
		hexTest( qToStr, $d00_0000_0000, "0000_0D00_0000_0000", $b64d );
		hexTest( qToStr, $e00_0000_0000, "0000_0E00_0000_0000", $b64e );
		hexTest( qToStr, $f00_0000_0000, "0000_0F00_0000_0000", $b64f );

		hexTest( qToStr, $1000_0000_0000, "0000_1000_0000_0000", $c641 );
		hexTest( qToStr, $2000_0000_0000, "0000_2000_0000_0000", $c642 );
		hexTest( qToStr, $3000_0000_0000, "0000_3000_0000_0000", $c643 );
		hexTest( qToStr, $4000_0000_0000, "0000_4000_0000_0000", $c644 );
		hexTest( qToStr, $5000_0000_0000, "0000_5000_0000_0000", $c645 );
		hexTest( qToStr, $6000_0000_0000, "0000_6000_0000_0000", $c646 );
		hexTest( qToStr, $7000_0000_0000, "0000_7000_0000_0000", $c647 );
		hexTest( qToStr, $8000_0000_0000, "0000_8000_0000_0000", $c648 );
		hexTest( qToStr, $9000_0000_0000, "0000_9000_0000_0000", $c649 );
		hexTest( qToStr, $a000_0000_0000, "0000_A000_0000_0000", $c64a );
		hexTest( qToStr, $b000_0000_0000, "0000_B000_0000_0000", $c64b );
		hexTest( qToStr, $c000_0000_0000, "0000_C000_0000_0000", $c64c );
		hexTest( qToStr, $d000_0000_0000, "0000_D000_0000_0000", $c64d );
		hexTest( qToStr, $e000_0000_0000, "0000_E000_0000_0000", $c64e );
		hexTest( qToStr, $f000_0000_0000, "0000_F000_0000_0000", $c64f );

		hexTest( qToStr, $1_0000_0000_0000, "0001_0000_0000_0000", $d641 );
		hexTest( qToStr, $2_0000_0000_0000, "0002_0000_0000_0000", $d642 );
		hexTest( qToStr, $3_0000_0000_0000, "0003_0000_0000_0000", $d643 );
		hexTest( qToStr, $4_0000_0000_0000, "0004_0000_0000_0000", $d644 );
		hexTest( qToStr, $5_0000_0000_0000, "0005_0000_0000_0000", $d645 );
		hexTest( qToStr, $6_0000_0000_0000, "0006_0000_0000_0000", $d646 );
		hexTest( qToStr, $7_0000_0000_0000, "0007_0000_0000_0000", $d647 );
		hexTest( qToStr, $8_0000_0000_0000, "0008_0000_0000_0000", $d648 );
		hexTest( qToStr, $9_0000_0000_0000, "0009_0000_0000_0000", $d649 );
		hexTest( qToStr, $a_0000_0000_0000, "000A_0000_0000_0000", $d64a );
		hexTest( qToStr, $b_0000_0000_0000, "000B_0000_0000_0000", $d64b );
		hexTest( qToStr, $c_0000_0000_0000, "000C_0000_0000_0000", $d64c );
		hexTest( qToStr, $d_0000_0000_0000, "000D_0000_0000_0000", $d64d );
		hexTest( qToStr, $e_0000_0000_0000, "000E_0000_0000_0000", $d64e );
		hexTest( qToStr, $f_0000_0000_0000, "000F_0000_0000_0000", $d64f );

		hexTest( qToStr, $10_0000_0000_0000,   "0010_0000_0000_0000", $e641 );
		hexTest( qToStr, $20_0000_0000_0000,   "0020_0000_0000_0000", $e642 );
		hexTest( qToStr, $30_0000_0000_0000,   "0030_0000_0000_0000", $e643 );
		hexTest( qToStr, $40_0000_0000_0000,   "0040_0000_0000_0000", $e644 );
		hexTest( qToStr, $50_0000_0000_0000,   "0050_0000_0000_0000", $e645 );
		hexTest( qToStr, $60_0000_0000_0000,   "0060_0000_0000_0000", $e646 );
		hexTest( qToStr, $70_0000_0000_0000,   "0070_0000_0000_0000", $e647 );
		hexTest( qToStr, $80_0000_0000_0000,   "0080_0000_0000_0000", $e648 );
		hexTest( qToStr, $90_0000_0000_0000,   "0090_0000_0000_0000", $e649 );
		hexTest( qToStr, $a0_0000_0000_0000,   "00A0_0000_0000_0000", $e64a );
		hexTest( qToStr, $b0_0000_0000_0000,   "00B0_0000_0000_0000", $e64b );
		hexTest( qToStr, $c0_0000_0000_0000,   "00C0_0000_0000_0000", $e64c );
		hexTest( qToStr, $d0_0000_0000_0000,   "00D0_0000_0000_0000", $e64d );
		hexTest( qToStr, $e0_0000_0000_0000,   "00E0_0000_0000_0000", $e64e );
		hexTest( qToStr, $f0_0000_0000_0000,   "00F0_0000_0000_0000", $e64f );
													  
		hexTest( qToStr, $100_0000_0000_0000,   "0100_0000_0000_0000", $f641 );
		hexTest( qToStr, $200_0000_0000_0000,   "0200_0000_0000_0000", $f642 );
		hexTest( qToStr, $300_0000_0000_0000,   "0300_0000_0000_0000", $f643 );
		hexTest( qToStr, $400_0000_0000_0000,   "0400_0000_0000_0000", $f644 );
		hexTest( qToStr, $500_0000_0000_0000,   "0500_0000_0000_0000", $f645 );
		hexTest( qToStr, $600_0000_0000_0000,   "0600_0000_0000_0000", $f646 );
		hexTest( qToStr, $700_0000_0000_0000,   "0700_0000_0000_0000", $f647 );
		hexTest( qToStr, $800_0000_0000_0000,   "0800_0000_0000_0000", $f648 );
		hexTest( qToStr, $900_0000_0000_0000,   "0900_0000_0000_0000", $f649 );
		hexTest( qToStr, $a00_0000_0000_0000,   "0A00_0000_0000_0000", $f64a );
		hexTest( qToStr, $b00_0000_0000_0000,   "0B00_0000_0000_0000", $f64b );
		hexTest( qToStr, $c00_0000_0000_0000,   "0C00_0000_0000_0000", $f64c );
		hexTest( qToStr, $d00_0000_0000_0000,   "0D00_0000_0000_0000", $f64d );
		hexTest( qToStr, $e00_0000_0000_0000,   "0E00_0000_0000_0000", $f64e );
		hexTest( qToStr, $f00_0000_0000_0000,   "0F00_0000_0000_0000", $f64f );
													  
		hexTest( qToStr, $1000_0000_0000_0000, "1000_0000_0000_0000", $641 );
		hexTest( qToStr, $2000_0000_0000_0000, "2000_0000_0000_0000", $642 );
		hexTest( qToStr, $3000_0000_0000_0000, "3000_0000_0000_0000", $643 );
		hexTest( qToStr, $4000_0000_0000_0000, "4000_0000_0000_0000", $644 );
		hexTest( qToStr, $5000_0000_0000_0000, "5000_0000_0000_0000", $645 );
		hexTest( qToStr, $6000_0000_0000_0000, "6000_0000_0000_0000", $646 );
		hexTest( qToStr, $7000_0000_0000_0000, "7000_0000_0000_0000", $647 );
		hexTest( qToStr, $8000_0000_0000_0000, "8000_0000_0000_0000", $648 );
		hexTest( qToStr, $9000_0000_0000_0000, "9000_0000_0000_0000", $649 );
		hexTest( qToStr, $a000_0000_0000_0000, "A000_0000_0000_0000", $64a );
		hexTest( qToStr, $b000_0000_0000_0000, "B000_0000_0000_0000", $64b );
		hexTest( qToStr, $c000_0000_0000_0000, "C000_0000_0000_0000", $64c );
		hexTest( qToStr, $d000_0000_0000_0000, "D000_0000_0000_0000", $64d );
		hexTest( qToStr, $e000_0000_0000_0000, "E000_0000_0000_0000", $64e );
		hexTest( qToStr, $f000_0000_0000_0000, "F000_0000_0000_0000", $64f );	
		
		
		
		stderr.put( "conv.qToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.qToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testing conv.h128ToStr

	try

		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $00_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0001,
		   "1",
		   $00_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0002,
		   "2",
		   $00_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0003,
		   "3",
		   $00_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0004,
		   "4",
		   $00_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0005,
		   "5",
		   $00_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0006,
		   "6",
		   $00_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0007,
		   "7",
		   $00_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0008,
		   "8",
		   $00_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0009,
		   "9",
		   $00_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000A,
		   "A",
		   $00_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000B,
		   "B",
		   $00_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000C,
		   "C",
		   $00_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000D,
		   "D",
		   $00_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000E,
		   "E",
		   $00_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000F,
		   "F",
		   $00_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $01_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0010,
		   "10",
		   $01_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0020,
		   "20",
		   $01_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0030,
		   "30",
		   $01_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0040,
		   "40",
		   $01_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0050,
		   "50",
		   $01_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0060,
		   "60",
		   $01_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0070,
		   "70",
		   $01_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0080,
		   "80",
		   $01_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0090,
		   "90",
		   $01_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_00A0,
		   "A0",
		   $01_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_00B0,
		   "B0",
		   $01_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_00C0,
		   "C0",
		   $01_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_00D0,
		   "D0",
		   $01_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_00E0,
		   "E0",
		   $01_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_00F0,
		   "F0",
		   $01_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $02_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0100,
		   "100",
		   $02_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0200,
		   "200",
		   $02_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0300,
		   "300",
		   $02_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0400,
		   "400",
		   $02_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0500,
		   "500",
		   $02_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0600,
		   "600",
		   $02_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0700,
		   "700",
		   $02_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0800,
		   "800",
		   $02_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0900,
		   "900",
		   $02_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0A00,
		   "A00",
		   $02_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0B00,
		   "B00",
		   $02_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0C00,
		   "C00",
		   $02_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0D00,
		   "D00",
		   $02_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0E00,
		   "E00",
		   $02_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0F00,
		   "F00",
		   $02_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $03_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_1000,
		   "1000",
		   $03_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_2000,
		   "2000",
		   $03_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_3000,
		   "3000",
		   $03_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_4000,
		   "4000",
		   $03_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_5000,
		   "5000",
		   $03_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_6000,
		   "6000",
		   $03_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_7000,
		   "7000",
		   $03_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_8000,
		   "8000",
		   $03_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_9000,
		   "9000",
		   $03_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_A000,
		   "A000",
		   $03_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_B000,
		   "B000",
		   $03_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_C000,
		   "C000",
		   $03_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_D000,
		   "D000",
		   $03_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_E000,
		   "E000",
		   $03_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_F000,
		   "F000",
		   $03_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $04_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0001_0000,
		   "1_0000",
		   $04_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0002_0000,
		   "2_0000",
		   $04_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0003_0000,
		   "3_0000",
		   $04_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0004_0000,
		   "4_0000",
		   $04_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0005_0000,
		   "5_0000",
		   $04_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0006_0000,
		   "6_0000",
		   $04_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0007_0000,
		   "7_0000",
		   $04_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0008_0000,
		   "8_0000",
		   $04_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0009_0000,
		   "9_0000",
		   $04_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_000A_0000,
		   "A_0000",
		   $04_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_000B_0000,
		   "B_0000",
		   $04_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_000C_0000,
		   "C_0000",
		   $04_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_000D_0000,
		   "D_0000",
		   $04_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_000E_0000,
		   "E_0000",
		   $04_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_000F_0000,
		   "F_0000",
		   $04_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0010_0000,
		   "10_0000",
		   $05_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0020_0000,
		   "20_0000",
		   $05_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0030_0000,
		   "30_0000",
		   $05_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0040_0000,
		   "40_0000",
		   $05_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0050_0000,
		   "50_0000",
		   $05_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0060_0000,
		   "60_0000",
		   $05_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0070_0000,
		   "70_0000",
		   $05_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0080_0000,
		   "80_0000",
		   $05_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0090_0000,
		   "90_0000",
		   $05_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_00A0_0000,
		   "A0_0000",
		   $05_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_00B0_0000,
		   "B0_0000",
		   $05_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_00C0_0000,
		   "C0_0000",
		   $05_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_00D0_0000,
		   "D0_0000",
		   $05_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_00E0_0000,
		   "E0_0000",
		   $05_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_00F0_0000,
		   "F0_0000",
		   $05_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $06_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0100_0000,
		   "100_0000",
		   $06_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0200_0000,
		   "200_0000",
		   $06_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0300_0000,
		   "300_0000",
		   $06_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0400_0000,
		   "400_0000",
		   $06_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0500_0000,
		   "500_0000",
		   $06_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0600_0000,
		   "600_0000",
		   $06_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0700_0000,
		   "700_0000",
		   $06_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0800_0000,
		   "800_0000",
		   $06_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0900_0000,
		   "900_0000",
		   $06_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0A00_0000,
		   "A00_0000",
		   $06_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0B00_0000,
		   "B00_0000",
		   $06_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0C00_0000,
		   "C00_0000",
		   $06_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0D00_0000,
		   "D00_0000",
		   $06_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0E00_0000,
		   "E00_0000",
		   $06_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0F00_0000,
		   "F00_0000",
		   $06_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $07_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_1000_0000,
		   "1000_0000",
		   $07_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_2000_0000,
		   "2000_0000",
		   $07_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_3000_0000,
		   "3000_0000",
		   $07_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_4000_0000,
		   "4000_0000",
		   $07_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_5000_0000,
		   "5000_0000",
		   $07_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_6000_0000,
		   "6000_0000",
		   $07_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_7000_0000,
		   "7000_0000",
		   $07_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_8000_0000,
		   "8000_0000",
		   $07_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_9000_0000,
		   "9000_0000",
		   $07_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_A000_0000,
		   "A000_0000",
		   $07_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_B000_0000,
		   "B000_0000",
		   $07_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_C000_0000,
		   "C000_0000",
		   $07_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_D000_0000,
		   "D000_0000",
		   $07_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_E000_0000,
		   "E000_0000",
		   $07_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_F000_0000,
		   "F000_0000",
		   $07_128F
		);

		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0001_0000_0000,
		   "1_0000_0000",
		   $08_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0002_0000_0000,
		   "2_0000_0000",
		   $08_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0003_0000_0000,
		   "3_0000_0000",
		   $08_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0004_0000_0000,
		   "4_0000_0000",
		   $08_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0005_0000_0000,
		   "5_0000_0000",
		   $08_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0006_0000_0000,
		   "6_0000_0000",
		   $08_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0007_0000_0000,
		   "7_0000_0000",
		   $08_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0008_0000_0000,
		   "8_0000_0000",
		   $08_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0009_0000_0000,
		   "9_0000_0000",
		   $08_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_000A_0000_0000,
		   "A_0000_0000",
		   $08_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_000B_0000_0000,
		   "B_0000_0000",
		   $08_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_000C_0000_0000,
		   "C_0000_0000",
		   $08_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_000D_0000_0000,
		   "D_0000_0000",
		   $08_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_000E_0000_0000,
		   "E_0000_0000",
		   $08_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_000F_0000_0000,
		   "F_0000_0000",
		   $08_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $09_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0010_0000_0000,
		   "10_0000_0000",
		   $09_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0020_0000_0000,
		   "20_0000_0000",
		   $09_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0030_0000_0000,
		   "30_0000_0000",
		   $09_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0040_0000_0000,
		   "40_0000_0000",
		   $09_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0050_0000_0000,
		   "50_0000_0000",
		   $09_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0060_0000_0000,
		   "60_0000_0000",
		   $09_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0070_0000_0000,
		   "70_0000_0000",
		   $09_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0080_0000_0000,
		   "80_0000_0000",
		   $09_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0090_0000_0000,
		   "90_0000_0000",
		   $09_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_00A0_0000_0000,
		   "A0_0000_0000",
		   $09_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_00B0_0000_0000,
		   "B0_0000_0000",
		   $09_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_00C0_0000_0000,
		   "C0_0000_0000",
		   $09_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_00D0_0000_0000,
		   "D0_0000_0000",
		   $09_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_00E0_0000_0000,
		   "E0_0000_0000",
		   $09_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_00F0_0000_0000,
		   "F0_0000_0000",
		   $09_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $0A_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0100_0000_0000,
		   "100_0000_0000",
		   $0A_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0200_0000_0000,
		   "200_0000_0000",
		   $0A_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0300_0000_0000,
		   "300_0000_0000",
		   $0A_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0400_0000_0000,
		   "400_0000_0000",
		   $0A_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0500_0000_0000,
		   "500_0000_0000",
		   $0A_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0600_0000_0000,
		   "600_0000_0000",
		   $0A_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0700_0000_0000,
		   "700_0000_0000",
		   $0A_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0800_0000_0000,
		   "800_0000_0000",
		   $0A_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0900_0000_0000,
		   "900_0000_0000",
		   $0A_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0A00_0000_0000,
		   "A00_0000_0000",
		   $0A_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0B00_0000_0000,
		   "B00_0000_0000",
		   $0A_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0C00_0000_0000,
		   "C00_0000_0000",
		   $0A_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0D00_0000_0000,
		   "D00_0000_0000",
		   $0A_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0E00_0000_0000,
		   "E00_0000_0000",
		   $0A_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0F00_0000_0000,
		   "F00_0000_0000",
		   $0A_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $0B_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_1000_0000_0000,
		   "1000_0000_0000",
		   $0B_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_2000_0000_0000,
		   "2000_0000_0000",
		   $0B_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_3000_0000_0000,
		   "3000_0000_0000",
		   $0B_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_4000_0000_0000,
		   "4000_0000_0000",
		   $0B_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_5000_0000_0000,
		   "5000_0000_0000",
		   $0B_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_6000_0000_0000,
		   "6000_0000_0000",
		   $0B_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_7000_0000_0000,
		   "7000_0000_0000",
		   $0B_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_8000_0000_0000,
		   "8000_0000_0000",
		   $0B_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_9000_0000_0000,
		   "9000_0000_0000",
		   $0B_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_A000_0000_0000,
		   "A000_0000_0000",
		   $0B_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_B000_0000_0000,
		   "B000_0000_0000",
		   $0B_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_C000_0000_0000,
		   "C000_0000_0000",
		   $0B_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_D000_0000_0000,
		   "D000_0000_0000",
		   $0B_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_E000_0000_0000,
		   "E000_0000_0000",
		   $0B_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_F000_0000_0000,
		   "F000_0000_0000",
		   $0B_128F
		);

		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0001_0000_0000_0000,
		   "1_0000_0000_0000",
		   $0C_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0002_0000_0000_0000,
		   "2_0000_0000_0000",
		   $0C_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0003_0000_0000_0000,
		   "3_0000_0000_0000",
		   $0C_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0004_0000_0000_0000,
		   "4_0000_0000_0000",
		   $0C_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0005_0000_0000_0000,
		   "5_0000_0000_0000",
		   $0C_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0006_0000_0000_0000,
		   "6_0000_0000_0000",
		   $0C_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0007_0000_0000_0000,
		   "7_0000_0000_0000",
		   $0C_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0008_0000_0000_0000,
		   "8_0000_0000_0000",
		   $0C_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0009_0000_0000_0000,
		   "9_0000_0000_0000",
		   $0C_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_000A_0000_0000_0000,
		   "A_0000_0000_0000",
		   $0C_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_000B_0000_0000_0000,
		   "B_0000_0000_0000",
		   $0C_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_000C_0000_0000_0000,
		   "C_0000_0000_0000",
		   $0C_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_000D_0000_0000_0000,
		   "D_0000_0000_0000",
		   $0C_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_000E_0000_0000_0000,
		   "E_0000_0000_0000",
		   $0C_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_000F_0000_0000_0000,
		   "F_0000_0000_0000",
		   $0C_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $0D_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0010_0000_0000_0000,
		   "10_0000_0000_0000",
		   $0D_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0020_0000_0000_0000,
		   "20_0000_0000_0000",
		   $0D_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0030_0000_0000_0000,
		   "30_0000_0000_0000",
		   $0D_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0040_0000_0000_0000,
		   "40_0000_0000_0000",
		   $0D_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0050_0000_0000_0000,
		   "50_0000_0000_0000",
		   $0D_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0060_0000_0000_0000,
		   "60_0000_0000_0000",
		   $0D_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0070_0000_0000_0000,
		   "70_0000_0000_0000",
		   $0D_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0080_0000_0000_0000,
		   "80_0000_0000_0000",
		   $0D_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0090_0000_0000_0000,
		   "90_0000_0000_0000",
		   $0D_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_00A0_0000_0000_0000,
		   "A0_0000_0000_0000",
		   $0D_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_00B0_0000_0000_0000,
		   "B0_0000_0000_0000",
		   $0D_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_00C0_0000_0000_0000,
		   "C0_0000_0000_0000",
		   $0D_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_00D0_0000_0000_0000,
		   "D0_0000_0000_0000",
		   $0D_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_00E0_0000_0000_0000,
		   "E0_0000_0000_0000",
		   $0D_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_00F0_0000_0000_0000,
		   "F0_0000_0000_0000",
		   $0D_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $0E_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0100_0000_0000_0000,
		   "100_0000_0000_0000",
		   $0E_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0200_0000_0000_0000,
		   "200_0000_0000_0000",
		   $0E_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0300_0000_0000_0000,
		   "300_0000_0000_0000",
		   $0E_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0400_0000_0000_0000,
		   "400_0000_0000_0000",
		   $0E_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0500_0000_0000_0000,
		   "500_0000_0000_0000",
		   $0E_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0600_0000_0000_0000,
		   "600_0000_0000_0000",
		   $0E_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0700_0000_0000_0000,
		   "700_0000_0000_0000",
		   $0E_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0800_0000_0000_0000,
		   "800_0000_0000_0000",
		   $0E_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0900_0000_0000_0000,
		   "900_0000_0000_0000",
		   $0E_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0A00_0000_0000_0000,
		   "A00_0000_0000_0000",
		   $0E_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0B00_0000_0000_0000,
		   "B00_0000_0000_0000",
		   $0E_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0C00_0000_0000_0000,
		   "C00_0000_0000_0000",
		   $0E_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0D00_0000_0000_0000,
		   "D00_0000_0000_0000",
		   $0E_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0E00_0000_0000_0000,
		   "E00_0000_0000_0000",
		   $0E_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0F00_0000_0000_0000,
		   "F00_0000_0000_0000",
		   $0E_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $0F_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_1000_0000_0000_0000,
		   "1000_0000_0000_0000",
		   $0F_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_2000_0000_0000_0000,
		   "2000_0000_0000_0000",
		   $0F_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_3000_0000_0000_0000,
		   "3000_0000_0000_0000",
		   $0F_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_4000_0000_0000_0000,
		   "4000_0000_0000_0000",
		   $0F_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_5000_0000_0000_0000,
		   "5000_0000_0000_0000",
		   $0F_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_6000_0000_0000_0000,
		   "6000_0000_0000_0000",
		   $0F_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_7000_0000_0000_0000,
		   "7000_0000_0000_0000",
		   $0F_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_8000_0000_0000_0000,
		   "8000_0000_0000_0000",
		   $0F_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_9000_0000_0000_0000,
		   "9000_0000_0000_0000",
		   $0F_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_A000_0000_0000_0000,
		   "A000_0000_0000_0000",
		   $0F_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_B000_0000_0000_0000,
		   "B000_0000_0000_0000",
		   $0F_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_C000_0000_0000_0000,
		   "C000_0000_0000_0000",
		   $0F_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_D000_0000_0000_0000,
		   "D000_0000_0000_0000",
		   $0F_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_E000_0000_0000_0000,
		   "E000_0000_0000_0000",
		   $0F_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_F000_0000_0000_0000,
		   "F000_0000_0000_0000",
		   $0F_128F
		);

		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0001_0000_0000_0000_0000,
		   "1_0000_0000_0000_0000",
		   $10_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0002_0000_0000_0000_0000,
		   "2_0000_0000_0000_0000",
		   $10_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0003_0000_0000_0000_0000,
		   "3_0000_0000_0000_0000",
		   $10_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0004_0000_0000_0000_0000,
		   "4_0000_0000_0000_0000",
		   $10_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0005_0000_0000_0000_0000,
		   "5_0000_0000_0000_0000",
		   $10_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0006_0000_0000_0000_0000,
		   "6_0000_0000_0000_0000",
		   $10_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0007_0000_0000_0000_0000,
		   "7_0000_0000_0000_0000",
		   $10_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0008_0000_0000_0000_0000,
		   "8_0000_0000_0000_0000",
		   $10_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0009_0000_0000_0000_0000,
		   "9_0000_0000_0000_0000",
		   $10_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_000A_0000_0000_0000_0000,
		   "A_0000_0000_0000_0000",
		   $10_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_000B_0000_0000_0000_0000,
		   "B_0000_0000_0000_0000",
		   $10_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_000C_0000_0000_0000_0000,
		   "C_0000_0000_0000_0000",
		   $10_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_000D_0000_0000_0000_0000,
		   "D_0000_0000_0000_0000",
		   $10_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_000E_0000_0000_0000_0000,
		   "E_0000_0000_0000_0000",
		   $10_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_000F_0000_0000_0000_0000,
		   "F_0000_0000_0000_0000",
		   $10_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $11_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0010_0000_0000_0000_0000,
		   "10_0000_0000_0000_0000",
		   $11_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0020_0000_0000_0000_0000,
		   "20_0000_0000_0000_0000",
		   $11_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0030_0000_0000_0000_0000,
		   "30_0000_0000_0000_0000",
		   $11_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0040_0000_0000_0000_0000,
		   "40_0000_0000_0000_0000",
		   $11_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0050_0000_0000_0000_0000,
		   "50_0000_0000_0000_0000",
		   $11_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0060_0000_0000_0000_0000,
		   "60_0000_0000_0000_0000",
		   $11_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0070_0000_0000_0000_0000,
		   "70_0000_0000_0000_0000",
		   $11_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0080_0000_0000_0000_0000,
		   "80_0000_0000_0000_0000",
		   $11_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0090_0000_0000_0000_0000,
		   "90_0000_0000_0000_0000",
		   $11_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_00A0_0000_0000_0000_0000,
		   "A0_0000_0000_0000_0000",
		   $11_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_00B0_0000_0000_0000_0000,
		   "B0_0000_0000_0000_0000",
		   $11_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_00C0_0000_0000_0000_0000,
		   "C0_0000_0000_0000_0000",
		   $11_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_00D0_0000_0000_0000_0000,
		   "D0_0000_0000_0000_0000",
		   $11_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_00E0_0000_0000_0000_0000,
		   "E0_0000_0000_0000_0000",
		   $11_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_00F0_0000_0000_0000_0000,
		   "F0_0000_0000_0000_0000",
		   $11_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $12_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0100_0000_0000_0000_0000,
		   "100_0000_0000_0000_0000",
		   $12_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0200_0000_0000_0000_0000,
		   "200_0000_0000_0000_0000",
		   $12_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0300_0000_0000_0000_0000,
		   "300_0000_0000_0000_0000",
		   $12_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0400_0000_0000_0000_0000,
		   "400_0000_0000_0000_0000",
		   $12_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0500_0000_0000_0000_0000,
		   "500_0000_0000_0000_0000",
		   $12_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0600_0000_0000_0000_0000,
		   "600_0000_0000_0000_0000",
		   $12_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0700_0000_0000_0000_0000,
		   "700_0000_0000_0000_0000",
		   $12_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0800_0000_0000_0000_0000,
		   "800_0000_0000_0000_0000",
		   $12_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0900_0000_0000_0000_0000,
		   "900_0000_0000_0000_0000",
		   $12_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0A00_0000_0000_0000_0000,
		   "A00_0000_0000_0000_0000",
		   $12_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0B00_0000_0000_0000_0000,
		   "B00_0000_0000_0000_0000",
		   $12_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0C00_0000_0000_0000_0000,
		   "C00_0000_0000_0000_0000",
		   $12_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0D00_0000_0000_0000_0000,
		   "D00_0000_0000_0000_0000",
		   $12_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0E00_0000_0000_0000_0000,
		   "E00_0000_0000_0000_0000",
		   $12_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0F00_0000_0000_0000_0000,
		   "F00_0000_0000_0000_0000",
		   $12_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $13_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_1000_0000_0000_0000_0000,
		   "1000_0000_0000_0000_0000",
		   $13_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_2000_0000_0000_0000_0000,
		   "2000_0000_0000_0000_0000",
		   $13_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_3000_0000_0000_0000_0000,
		   "3000_0000_0000_0000_0000",
		   $13_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_4000_0000_0000_0000_0000,
		   "4000_0000_0000_0000_0000",
		   $13_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_5000_0000_0000_0000_0000,
		   "5000_0000_0000_0000_0000",
		   $13_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_6000_0000_0000_0000_0000,
		   "6000_0000_0000_0000_0000",
		   $13_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_7000_0000_0000_0000_0000,
		   "7000_0000_0000_0000_0000",
		   $13_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_8000_0000_0000_0000_0000,
		   "8000_0000_0000_0000_0000",
		   $13_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_9000_0000_0000_0000_0000,
		   "9000_0000_0000_0000_0000",
		   $13_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_A000_0000_0000_0000_0000,
		   "A000_0000_0000_0000_0000",
		   $13_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_B000_0000_0000_0000_0000,
		   "B000_0000_0000_0000_0000",
		   $13_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_C000_0000_0000_0000_0000,
		   "C000_0000_0000_0000_0000",
		   $13_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_D000_0000_0000_0000_0000,
		   "D000_0000_0000_0000_0000",
		   $13_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_E000_0000_0000_0000_0000,
		   "E000_0000_0000_0000_0000",
		   $13_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_F000_0000_0000_0000_0000,
		   "F000_0000_0000_0000_0000",
		   $13_128F
		);

		bufTest
		(
		   h128ToStr,
		   $0000_0000_0001_0000_0000_0000_0000_0000,
		   "1_0000_0000_0000_0000_0000",
		   $14_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0002_0000_0000_0000_0000_0000,
		   "2_0000_0000_0000_0000_0000",
		   $14_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0003_0000_0000_0000_0000_0000,
		   "3_0000_0000_0000_0000_0000",
		   $14_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0004_0000_0000_0000_0000_0000,
		   "4_0000_0000_0000_0000_0000",
		   $14_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0005_0000_0000_0000_0000_0000,
		   "5_0000_0000_0000_0000_0000",
		   $14_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0006_0000_0000_0000_0000_0000,
		   "6_0000_0000_0000_0000_0000",
		   $14_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0007_0000_0000_0000_0000_0000,
		   "7_0000_0000_0000_0000_0000",
		   $14_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0008_0000_0000_0000_0000_0000,
		   "8_0000_0000_0000_0000_0000",
		   $14_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0009_0000_0000_0000_0000_0000,
		   "9_0000_0000_0000_0000_0000",
		   $14_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_000A_0000_0000_0000_0000_0000,
		   "A_0000_0000_0000_0000_0000",
		   $14_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_000B_0000_0000_0000_0000_0000,
		   "B_0000_0000_0000_0000_0000",
		   $14_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_000C_0000_0000_0000_0000_0000,
		   "C_0000_0000_0000_0000_0000",
		   $14_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_000D_0000_0000_0000_0000_0000,
		   "D_0000_0000_0000_0000_0000",
		   $14_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_000E_0000_0000_0000_0000_0000,
		   "E_0000_0000_0000_0000_0000",
		   $14_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_000F_0000_0000_0000_0000_0000,
		   "F_0000_0000_0000_0000_0000",
		   $14_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0",
		   $15_1280
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0010_0000_0000_0000_0000_0000,
		   "10_0000_0000_0000_0000_0000",
		   $15_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0020_0000_0000_0000_0000_0000,
		   "20_0000_0000_0000_0000_0000",
		   $15_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0030_0000_0000_0000_0000_0000,
		   "30_0000_0000_0000_0000_0000",
		   $15_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0040_0000_0000_0000_0000_0000,
		   "40_0000_0000_0000_0000_0000",
		   $15_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0050_0000_0000_0000_0000_0000,
		   "50_0000_0000_0000_0000_0000",
		   $15_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0060_0000_0000_0000_0000_0000,
		   "60_0000_0000_0000_0000_0000",
		   $15_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0070_0000_0000_0000_0000_0000,
		   "70_0000_0000_0000_0000_0000",
		   $15_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0080_0000_0000_0000_0000_0000,
		   "80_0000_0000_0000_0000_0000",
		   $15_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0090_0000_0000_0000_0000_0000,
		   "90_0000_0000_0000_0000_0000",
		   $15_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_00A0_0000_0000_0000_0000_0000,
		   "A0_0000_0000_0000_0000_0000",
		   $15_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_00B0_0000_0000_0000_0000_0000,
		   "B0_0000_0000_0000_0000_0000",
		   $15_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_00C0_0000_0000_0000_0000_0000,
		   "C0_0000_0000_0000_0000_0000",
		   $15_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_00D0_0000_0000_0000_0000_0000,
		   "D0_0000_0000_0000_0000_0000",
		   $15_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_00E0_0000_0000_0000_0000_0000,
		   "E0_0000_0000_0000_0000_0000",
		   $15_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_00F0_0000_0000_0000_0000_0000,
		   "F0_0000_0000_0000_0000_0000",
		   $15_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0100_0000_0000_0000_0000_0000,
		   "100_0000_0000_0000_0000_0000",
		   $16_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0200_0000_0000_0000_0000_0000,
		   "200_0000_0000_0000_0000_0000",
		   $16_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0300_0000_0000_0000_0000_0000,
		   "300_0000_0000_0000_0000_0000",
		   $16_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0400_0000_0000_0000_0000_0000,
		   "400_0000_0000_0000_0000_0000",
		   $16_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0500_0000_0000_0000_0000_0000,
		   "500_0000_0000_0000_0000_0000",
		   $16_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0600_0000_0000_0000_0000_0000,
		   "600_0000_0000_0000_0000_0000",
		   $16_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0700_0000_0000_0000_0000_0000,
		   "700_0000_0000_0000_0000_0000",
		   $16_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0800_0000_0000_0000_0000_0000,
		   "800_0000_0000_0000_0000_0000",
		   $16_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0900_0000_0000_0000_0000_0000,
		   "900_0000_0000_0000_0000_0000",
		   $16_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0A00_0000_0000_0000_0000_0000,
		   "A00_0000_0000_0000_0000_0000",
		   $16_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0B00_0000_0000_0000_0000_0000,
		   "B00_0000_0000_0000_0000_0000",
		   $16_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0C00_0000_0000_0000_0000_0000,
		   "C00_0000_0000_0000_0000_0000",
		   $16_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0D00_0000_0000_0000_0000_0000,
		   "D00_0000_0000_0000_0000_0000",
		   $16_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0E00_0000_0000_0000_0000_0000,
		   "E00_0000_0000_0000_0000_0000",
		   $16_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_0F00_0000_0000_0000_0000_0000,
		   "F00_0000_0000_0000_0000_0000",
		   $16_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_1000_0000_0000_0000_0000_0000,
		   "1000_0000_0000_0000_0000_0000",
		   $17_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_2000_0000_0000_0000_0000_0000,
		   "2000_0000_0000_0000_0000_0000",
		   $17_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_3000_0000_0000_0000_0000_0000,
		   "3000_0000_0000_0000_0000_0000",
		   $17_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_4000_0000_0000_0000_0000_0000,
		   "4000_0000_0000_0000_0000_0000",
		   $17_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_5000_0000_0000_0000_0000_0000,
		   "5000_0000_0000_0000_0000_0000",
		   $17_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_6000_0000_0000_0000_0000_0000,
		   "6000_0000_0000_0000_0000_0000",
		   $17_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_7000_0000_0000_0000_0000_0000,
		   "7000_0000_0000_0000_0000_0000",
		   $17_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_8000_0000_0000_0000_0000_0000,
		   "8000_0000_0000_0000_0000_0000",
		   $17_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_9000_0000_0000_0000_0000_0000,
		   "9000_0000_0000_0000_0000_0000",
		   $17_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_A000_0000_0000_0000_0000_0000,
		   "A000_0000_0000_0000_0000_0000",
		   $17_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_B000_0000_0000_0000_0000_0000,
		   "B000_0000_0000_0000_0000_0000",
		   $17_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_C000_0000_0000_0000_0000_0000,
		   "C000_0000_0000_0000_0000_0000",
		   $17_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_D000_0000_0000_0000_0000_0000,
		   "D000_0000_0000_0000_0000_0000",
		   $17_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_E000_0000_0000_0000_0000_0000,
		   "E000_0000_0000_0000_0000_0000",
		   $17_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0000_F000_0000_0000_0000_0000_0000,
		   "F000_0000_0000_0000_0000_0000",
		   $17_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0001_0000_0000_0000_0000_0000_0000,
		   "1_0000_0000_0000_0000_0000_0000",
		   $18_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0002_0000_0000_0000_0000_0000_0000,
		   "2_0000_0000_0000_0000_0000_0000",
		   $18_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0003_0000_0000_0000_0000_0000_0000,
		   "3_0000_0000_0000_0000_0000_0000",
		   $18_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0004_0000_0000_0000_0000_0000_0000,
		   "4_0000_0000_0000_0000_0000_0000",
		   $18_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0005_0000_0000_0000_0000_0000_0000,
		   "5_0000_0000_0000_0000_0000_0000",
		   $18_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0006_0000_0000_0000_0000_0000_0000,
		   "6_0000_0000_0000_0000_0000_0000",
		   $18_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0007_0000_0000_0000_0000_0000_0000,
		   "7_0000_0000_0000_0000_0000_0000",
		   $18_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0008_0000_0000_0000_0000_0000_0000,
		   "8_0000_0000_0000_0000_0000_0000",
		   $18_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0009_0000_0000_0000_0000_0000_0000,
		   "9_0000_0000_0000_0000_0000_0000",
		   $18_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_000A_0000_0000_0000_0000_0000_0000,
		   "A_0000_0000_0000_0000_0000_0000",
		   $18_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_000B_0000_0000_0000_0000_0000_0000,
		   "B_0000_0000_0000_0000_0000_0000",
		   $18_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_000C_0000_0000_0000_0000_0000_0000,
		   "C_0000_0000_0000_0000_0000_0000",
		   $18_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_000D_0000_0000_0000_0000_0000_0000,
		   "D_0000_0000_0000_0000_0000_0000",
		   $18_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_000E_0000_0000_0000_0000_0000_0000,
		   "E_0000_0000_0000_0000_0000_0000",
		   $18_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_000F_0000_0000_0000_0000_0000_0000,
		   "F_0000_0000_0000_0000_0000_0000",
		   $18_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0010_0000_0000_0000_0000_0000_0000,
		   "10_0000_0000_0000_0000_0000_0000",
		   $19_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0020_0000_0000_0000_0000_0000_0000,
		   "20_0000_0000_0000_0000_0000_0000",
		   $19_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0030_0000_0000_0000_0000_0000_0000,
		   "30_0000_0000_0000_0000_0000_0000",
		   $19_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0040_0000_0000_0000_0000_0000_0000,
		   "40_0000_0000_0000_0000_0000_0000",
		   $19_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0050_0000_0000_0000_0000_0000_0000,
		   "50_0000_0000_0000_0000_0000_0000",
		   $19_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0060_0000_0000_0000_0000_0000_0000,
		   "60_0000_0000_0000_0000_0000_0000",
		   $19_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0070_0000_0000_0000_0000_0000_0000,
		   "70_0000_0000_0000_0000_0000_0000",
		   $19_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0080_0000_0000_0000_0000_0000_0000,
		   "80_0000_0000_0000_0000_0000_0000",
		   $19_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0090_0000_0000_0000_0000_0000_0000,
		   "90_0000_0000_0000_0000_0000_0000",
		   $19_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_00A0_0000_0000_0000_0000_0000_0000,
		   "A0_0000_0000_0000_0000_0000_0000",
		   $19_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_00B0_0000_0000_0000_0000_0000_0000,
		   "B0_0000_0000_0000_0000_0000_0000",
		   $19_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_00C0_0000_0000_0000_0000_0000_0000,
		   "C0_0000_0000_0000_0000_0000_0000",
		   $19_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_00D0_0000_0000_0000_0000_0000_0000,
		   "D0_0000_0000_0000_0000_0000_0000",
		   $19_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_00E0_0000_0000_0000_0000_0000_0000,
		   "E0_0000_0000_0000_0000_0000_0000",
		   $19_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_00F0_0000_0000_0000_0000_0000_0000,
		   "F0_0000_0000_0000_0000_0000_0000",
		   $19_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0100_0000_0000_0000_0000_0000_0000,
		   "100_0000_0000_0000_0000_0000_0000",
		   $1A_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0200_0000_0000_0000_0000_0000_0000,
		   "200_0000_0000_0000_0000_0000_0000",
		   $1A_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0300_0000_0000_0000_0000_0000_0000,
		   "300_0000_0000_0000_0000_0000_0000",
		   $1A_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0400_0000_0000_0000_0000_0000_0000,
		   "400_0000_0000_0000_0000_0000_0000",
		   $1A_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0500_0000_0000_0000_0000_0000_0000,
		   "500_0000_0000_0000_0000_0000_0000",
		   $1A_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0600_0000_0000_0000_0000_0000_0000,
		   "600_0000_0000_0000_0000_0000_0000",
		   $1A_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0700_0000_0000_0000_0000_0000_0000,
		   "700_0000_0000_0000_0000_0000_0000",
		   $1A_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0800_0000_0000_0000_0000_0000_0000,
		   "800_0000_0000_0000_0000_0000_0000",
		   $1A_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0900_0000_0000_0000_0000_0000_0000,
		   "900_0000_0000_0000_0000_0000_0000",
		   $1A_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0A00_0000_0000_0000_0000_0000_0000,
		   "A00_0000_0000_0000_0000_0000_0000",
		   $1A_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0B00_0000_0000_0000_0000_0000_0000,
		   "B00_0000_0000_0000_0000_0000_0000",
		   $1A_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0C00_0000_0000_0000_0000_0000_0000,
		   "C00_0000_0000_0000_0000_0000_0000",
		   $1A_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0D00_0000_0000_0000_0000_0000_0000,
		   "D00_0000_0000_0000_0000_0000_0000",
		   $1A_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0E00_0000_0000_0000_0000_0000_0000,
		   "E00_0000_0000_0000_0000_0000_0000",
		   $1A_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_0F00_0000_0000_0000_0000_0000_0000,
		   "F00_0000_0000_0000_0000_0000_0000",
		   $1A_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0000_1000_0000_0000_0000_0000_0000_0000,
		   "1000_0000_0000_0000_0000_0000_0000",
		   $1B_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0000_2000_0000_0000_0000_0000_0000_0000,
		   "2000_0000_0000_0000_0000_0000_0000",
		   $1B_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0000_3000_0000_0000_0000_0000_0000_0000,
		   "3000_0000_0000_0000_0000_0000_0000",
		   $1B_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0000_4000_0000_0000_0000_0000_0000_0000,
		   "4000_0000_0000_0000_0000_0000_0000",
		   $1B_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0000_5000_0000_0000_0000_0000_0000_0000,
		   "5000_0000_0000_0000_0000_0000_0000",
		   $1B_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0000_6000_0000_0000_0000_0000_0000_0000,
		   "6000_0000_0000_0000_0000_0000_0000",
		   $1B_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0000_7000_0000_0000_0000_0000_0000_0000,
		   "7000_0000_0000_0000_0000_0000_0000",
		   $1B_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0000_8000_0000_0000_0000_0000_0000_0000,
		   "8000_0000_0000_0000_0000_0000_0000",
		   $1B_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0000_9000_0000_0000_0000_0000_0000_0000,
		   "9000_0000_0000_0000_0000_0000_0000",
		   $1B_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0000_A000_0000_0000_0000_0000_0000_0000,
		   "A000_0000_0000_0000_0000_0000_0000",
		   $1B_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0000_B000_0000_0000_0000_0000_0000_0000,
		   "B000_0000_0000_0000_0000_0000_0000",
		   $1B_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0000_C000_0000_0000_0000_0000_0000_0000,
		   "C000_0000_0000_0000_0000_0000_0000",
		   $1B_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0000_D000_0000_0000_0000_0000_0000_0000,
		   "D000_0000_0000_0000_0000_0000_0000",
		   $1B_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0000_E000_0000_0000_0000_0000_0000_0000,
		   "E000_0000_0000_0000_0000_0000_0000",
		   $1B_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0000_F000_0000_0000_0000_0000_0000_0000,
		   "F000_0000_0000_0000_0000_0000_0000",
		   $1B_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0001_0000_0000_0000_0000_0000_0000_0000,
		   "1_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0002_0000_0000_0000_0000_0000_0000_0000,
		   "2_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0003_0000_0000_0000_0000_0000_0000_0000,
		   "3_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0004_0000_0000_0000_0000_0000_0000_0000,
		   "4_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0005_0000_0000_0000_0000_0000_0000_0000,
		   "5_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0006_0000_0000_0000_0000_0000_0000_0000,
		   "6_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0007_0000_0000_0000_0000_0000_0000_0000,
		   "7_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0008_0000_0000_0000_0000_0000_0000_0000,
		   "8_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0009_0000_0000_0000_0000_0000_0000_0000,
		   "9_0000_0000_0000_0000_0000_0000_0000",
		   $1C_1289
		);
		bufTest
		(
		   h128ToStr,
		   $000A_0000_0000_0000_0000_0000_0000_0000,
		   "A_0000_0000_0000_0000_0000_0000_0000",
		   $1C_128A
		);
		bufTest
		(
		   h128ToStr,
		   $000B_0000_0000_0000_0000_0000_0000_0000,
		   "B_0000_0000_0000_0000_0000_0000_0000",
		   $1C_128B
		);
		bufTest
		(
		   h128ToStr,
		   $000C_0000_0000_0000_0000_0000_0000_0000,
		   "C_0000_0000_0000_0000_0000_0000_0000",
		   $1C_128C
		);
		bufTest
		(
		   h128ToStr,
		   $000D_0000_0000_0000_0000_0000_0000_0000,
		   "D_0000_0000_0000_0000_0000_0000_0000",
		   $1C_128D
		);
		bufTest
		(
		   h128ToStr,
		   $000E_0000_0000_0000_0000_0000_0000_0000,
		   "E_0000_0000_0000_0000_0000_0000_0000",
		   $1C_128E
		);
		bufTest
		(
		   h128ToStr,
		   $000F_0000_0000_0000_0000_0000_0000_0000,
		   "F_0000_0000_0000_0000_0000_0000_0000",
		   $1C_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0010_0000_0000_0000_0000_0000_0000_0000,
		   "10_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0020_0000_0000_0000_0000_0000_0000_0000,
		   "20_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0030_0000_0000_0000_0000_0000_0000_0000,
		   "30_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0040_0000_0000_0000_0000_0000_0000_0000,
		   "40_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0050_0000_0000_0000_0000_0000_0000_0000,
		   "50_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0060_0000_0000_0000_0000_0000_0000_0000,
		   "60_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0070_0000_0000_0000_0000_0000_0000_0000,
		   "70_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0080_0000_0000_0000_0000_0000_0000_0000,
		   "80_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0090_0000_0000_0000_0000_0000_0000_0000,
		   "90_0000_0000_0000_0000_0000_0000_0000",
		   $1D_1289
		);
		bufTest
		(
		   h128ToStr,
		   $00A0_0000_0000_0000_0000_0000_0000_0000,
		   "A0_0000_0000_0000_0000_0000_0000_0000",
		   $1D_128A
		);
		bufTest
		(
		   h128ToStr,
		   $00B0_0000_0000_0000_0000_0000_0000_0000,
		   "B0_0000_0000_0000_0000_0000_0000_0000",
		   $1D_128B
		);
		bufTest
		(
		   h128ToStr,
		   $00C0_0000_0000_0000_0000_0000_0000_0000,
		   "C0_0000_0000_0000_0000_0000_0000_0000",
		   $1D_128C
		);
		bufTest
		(
		   h128ToStr,
		   $00D0_0000_0000_0000_0000_0000_0000_0000,
		   "D0_0000_0000_0000_0000_0000_0000_0000",
		   $1D_128D
		);
		bufTest
		(
		   h128ToStr,
		   $00E0_0000_0000_0000_0000_0000_0000_0000,
		   "E0_0000_0000_0000_0000_0000_0000_0000",
		   $1D_128E
		);
		bufTest
		(
		   h128ToStr,
		   $00F0_0000_0000_0000_0000_0000_0000_0000,
		   "F0_0000_0000_0000_0000_0000_0000_0000",
		   $1D_128F
		);
		bufTest
		(
		   h128ToStr,
		   $0100_0000_0000_0000_0000_0000_0000_0000,
		   "100_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1281
		);
		bufTest
		(
		   h128ToStr,
		   $0200_0000_0000_0000_0000_0000_0000_0000,
		   "200_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1282
		);
		bufTest
		(
		   h128ToStr,
		   $0300_0000_0000_0000_0000_0000_0000_0000,
		   "300_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1283
		);
		bufTest
		(
		   h128ToStr,
		   $0400_0000_0000_0000_0000_0000_0000_0000,
		   "400_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1284
		);
		bufTest
		(
		   h128ToStr,
		   $0500_0000_0000_0000_0000_0000_0000_0000,
		   "500_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1285
		);
		bufTest
		(
		   h128ToStr,
		   $0600_0000_0000_0000_0000_0000_0000_0000,
		   "600_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1286
		);
		bufTest
		(
		   h128ToStr,
		   $0700_0000_0000_0000_0000_0000_0000_0000,
		   "700_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1287
		);
		bufTest
		(
		   h128ToStr,
		   $0800_0000_0000_0000_0000_0000_0000_0000,
		   "800_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1288
		);
		bufTest
		(
		   h128ToStr,
		   $0900_0000_0000_0000_0000_0000_0000_0000,
		   "900_0000_0000_0000_0000_0000_0000_0000",
		   $1E_1289
		);
		bufTest
		(
		   h128ToStr,
		   $0A00_0000_0000_0000_0000_0000_0000_0000,
		   "A00_0000_0000_0000_0000_0000_0000_0000",
		   $1E_128A
		);
		bufTest
		(
		   h128ToStr,
		   $0B00_0000_0000_0000_0000_0000_0000_0000,
		   "B00_0000_0000_0000_0000_0000_0000_0000",
		   $1E_128B
		);
		bufTest
		(
		   h128ToStr,
		   $0C00_0000_0000_0000_0000_0000_0000_0000,
		   "C00_0000_0000_0000_0000_0000_0000_0000",
		   $1E_128C
		);
		bufTest
		(
		   h128ToStr,
		   $0D00_0000_0000_0000_0000_0000_0000_0000,
		   "D00_0000_0000_0000_0000_0000_0000_0000",
		   $1E_128D
		);
		bufTest
		(
		   h128ToStr,
		   $0E00_0000_0000_0000_0000_0000_0000_0000,
		   "E00_0000_0000_0000_0000_0000_0000_0000",
		   $1E_128E
		);
		bufTest
		(
		   h128ToStr,
		   $0F00_0000_0000_0000_0000_0000_0000_0000,
		   "F00_0000_0000_0000_0000_0000_0000_0000",
		   $1E_128F
		);
		bufTest
		(
		   h128ToStr,
		   $1000_0000_0000_0000_0000_0000_0000_0000,
		   "1000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1281
		);
		bufTest
		(
		   h128ToStr,
		   $2000_0000_0000_0000_0000_0000_0000_0000,
		   "2000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1282
		);
		bufTest
		(
		   h128ToStr,
		   $3000_0000_0000_0000_0000_0000_0000_0000,
		   "3000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1283
		);
		bufTest
		(
		   h128ToStr,
		   $4000_0000_0000_0000_0000_0000_0000_0000,
		   "4000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1284
		);
		bufTest
		(
		   h128ToStr,
		   $5000_0000_0000_0000_0000_0000_0000_0000,
		   "5000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1285
		);
		bufTest
		(
		   h128ToStr,
		   $6000_0000_0000_0000_0000_0000_0000_0000,
		   "6000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1286
		);
		bufTest
		(
		   h128ToStr,
		   $7000_0000_0000_0000_0000_0000_0000_0000,
		   "7000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1287
		);
		bufTest
		(
		   h128ToStr,
		   $8000_0000_0000_0000_0000_0000_0000_0000,
		   "8000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1288
		);
		bufTest
		(
		   h128ToStr,
		   $9000_0000_0000_0000_0000_0000_0000_0000,
		   "9000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_1289
		);
		bufTest
		(
		   h128ToStr,
		   $A000_0000_0000_0000_0000_0000_0000_0000,
		   "A000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_128A
		);
		bufTest
		(
		   h128ToStr,
		   $B000_0000_0000_0000_0000_0000_0000_0000,
		   "B000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_128B
		);
		bufTest
		(
		   h128ToStr,
		   $C000_0000_0000_0000_0000_0000_0000_0000,
		   "C000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_128C
		);
		bufTest
		(
		   h128ToStr,
		   $D000_0000_0000_0000_0000_0000_0000_0000,
		   "D000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_128D
		);
		bufTest
		(
		   h128ToStr,
		   $E000_0000_0000_0000_0000_0000_0000_0000,
		   "E000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_128E
		);
		bufTest
		(
		   h128ToStr,
		   $F000_0000_0000_0000_0000_0000_0000_0000,
		   "F000_0000_0000_0000_0000_0000_0000_0000",
		   $1F_128F
		);
		
		



		readonly
			h128Test_a	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr( "0", ' ', i ),
								
							#endfor
							mkStr( "0", ' ', 63 )
						];
						
			h128Test_b	:string[64] :=
						[
							#for( i := 0 to 62 )
							
								mkStr2( "FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF", '.', i ),
								
							#endfor
							mkStr2( "FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF", '.', 63 )
						];
						
		endreadonly;
		strTest( h128ToStr, 0, h128Test_a, $1F_1290, 63, ' ' );				
		strTest2
		( 
			h128ToStr, 
			$FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF, 
			h128Test_b, 
			$1F_1291, 
			63, 
			'.' 
		);				
		
		

		stderr.put( "conv.h128ToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.h128ToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;









	// Testing conv.lToStr

	try

		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0000,
		   "0000_0000_0000_0000_0000_0000_0000_0000",
		   $00_1280
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0001,
		   "0000_0000_0000_0000_0000_0000_0000_0001",
		   $00_1281
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0002,
		   "0000_0000_0000_0000_0000_0000_0000_0002",
		   $00_1282
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0003,
		   "0000_0000_0000_0000_0000_0000_0000_0003",
		   $00_1283
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0004,
		   "0000_0000_0000_0000_0000_0000_0000_0004",
		   $00_1284
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0005,
		   "0000_0000_0000_0000_0000_0000_0000_0005",
		   $00_1285
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0006,
		   "0000_0000_0000_0000_0000_0000_0000_0006",
		   $00_1286
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0007,
		   "0000_0000_0000_0000_0000_0000_0000_0007",
		   $00_1287
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0008,
		   "0000_0000_0000_0000_0000_0000_0000_0008",
		   $00_1288
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0009,
		   "0000_0000_0000_0000_0000_0000_0000_0009",
		   $00_1289
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000A,
		   "0000_0000_0000_0000_0000_0000_0000_000A",
		   $00_128A
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000B,
		   "0000_0000_0000_0000_0000_0000_0000_000B",
		   $00_128B
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000C,
		   "0000_0000_0000_0000_0000_0000_0000_000C",
		   $00_128C
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000D,
		   "0000_0000_0000_0000_0000_0000_0000_000D",
		   $00_128D
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000E,
		   "0000_0000_0000_0000_0000_0000_0000_000E",
		   $00_128E
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_000F,
		   "0000_0000_0000_0000_0000_0000_0000_000F",
		   $00_128F
		);
		hexTest
		(
		   lToStr,
		   $0000_0000_0000_0000_0000_0000_0000_0010,
		   "0000_0000_0000_0000_0000_0000_0000_0010",
		   $01_1281
		);
		
		

		stderr.put( "conv.lToStr with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.lToStr with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;


end convhtostr_test;

													