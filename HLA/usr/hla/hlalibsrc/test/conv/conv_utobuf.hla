program convutobuf_test;
#include( "stdlib.hhf" )

static
	buf			:str.strvar(256);

	procedure cmpbuf( buf:string; cmpto:string ); @returns( "@ne" );
	begin cmpbuf;

		push( esi );
		push( edi );
		push( ecx );

		mov( buf, esi );
		mov( cmpto, edi );
		mov( (type str.strRec [edi]).length, ecx );
		add( 1, ecx );
		repe.cmpsb();

		pop( ecx );
		pop( edi );
		pop( esi );

	end cmpbuf;
	
	#macro bufTest( function, theValue, strValue, exceptionValue );
	
		mov( buf, edi );
		@text( "conv." + @string( function )) ( theValue, [edi] );
		mov( 0, (type byte [edi]));
		if( cmpbuf( buf, strValue )) then

			printCmp( @string( function ), strValue );
			raise( exceptionValue );

		endif;

	#endmacro
	
	procedure printCmp( function:string; strValue:string );
	begin printCmp;
	
		stderr.put( function, " failed!" nl);
		stderr.put( "Should be '", strValue, "'" nl );
		stderr.put( "     was: '" );
		mov( buf, edi );
		while( (type byte [edi]) <> 0 ) do
		
			stderr.put( (type char [edi]) );
			inc( edi );
			
		endwhile;
		stderr.put( "'" nl );
	
	end printCmp;
	
	
	
begin convutobuf_test;

	conv.setUnderscores( true );

	// Testing conv.i8ToBuf

	try

		bufTest( u8ToBuf,             0,           "0", $00080);
		bufTest( u8ToBuf,             1,           "1", $00081);
		bufTest( u8ToBuf,             2,           "2", $00082);
		bufTest( u8ToBuf,             3,           "3", $00083);
		bufTest( u8ToBuf,             4,           "4", $00084);
		bufTest( u8ToBuf,             5,           "5", $00085);
		bufTest( u8ToBuf,             6,           "6", $00086);
		bufTest( u8ToBuf,             7,           "7", $00087);
		bufTest( u8ToBuf,             8,           "8", $00088);
		bufTest( u8ToBuf,             9,           "9", $00089);
		bufTest( u8ToBuf,             0,           "0", $a00080);
		bufTest( u8ToBuf,             0,           "0", $01080);
		bufTest( u8ToBuf,            10,          "10", $01081);
		bufTest( u8ToBuf,            20,          "20", $01082);
		bufTest( u8ToBuf,            30,          "30", $01083);
		bufTest( u8ToBuf,            40,          "40", $01084);
		bufTest( u8ToBuf,            50,          "50", $01085);
		bufTest( u8ToBuf,            60,          "60", $01086);
		bufTest( u8ToBuf,            70,          "70", $01087);
		bufTest( u8ToBuf,            80,          "80", $01088);
		bufTest( u8ToBuf,            90,          "90", $01089);
		bufTest( u8ToBuf,             0,           "0", $a01080);
		bufTest( u8ToBuf,           100,         "100", $02081);
		
		bufTest( u8ToBuf,            45,          "45", $a02082);
		bufTest( u8ToBuf,            67,          "67", $a02083);
		bufTest( u8ToBuf,            89,          "89", $a02084);
	
		
		stderr.put( "conv.u8ToBuf with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.u8ToBuf with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testung conv.i16ToBuf

	try

		bufTest( u16ToBuf,             0,            "0", $00160);
		bufTest( u16ToBuf,             1,            "1", $00161);
		bufTest( u16ToBuf,             2,            "2", $00162);
		bufTest( u16ToBuf,             3,            "3", $00163);
		bufTest( u16ToBuf,             4,            "4", $00164);
		bufTest( u16ToBuf,             5,            "5", $00165);
		bufTest( u16ToBuf,             6,            "6", $00166);
		bufTest( u16ToBuf,             7,            "7", $00167);
		bufTest( u16ToBuf,             8,            "8", $00168);
		bufTest( u16ToBuf,             9,            "9", $00169);
		bufTest( u16ToBuf,            10,           "10", $01161);
		bufTest( u16ToBuf,            20,           "20", $01162);
		bufTest( u16ToBuf,            30,           "30", $01163);
		bufTest( u16ToBuf,            40,           "40", $01164);
		bufTest( u16ToBuf,            50,           "50", $01165);
		bufTest( u16ToBuf,            60,           "60", $01166);
		bufTest( u16ToBuf,            70,           "70", $01167);
		bufTest( u16ToBuf,            80,           "80", $01168);
		bufTest( u16ToBuf,            90,           "90", $01169);
		bufTest( u16ToBuf,           100,          "100", $02161);
		bufTest( u16ToBuf,           200,          "200", $02162);
		bufTest( u16ToBuf,           300,          "300", $02163);
		bufTest( u16ToBuf,           400,          "400", $02164);
		bufTest( u16ToBuf,           500,          "500", $02165);
		bufTest( u16ToBuf,           600,          "600", $02166);
		bufTest( u16ToBuf,           700,          "700", $02167);
		bufTest( u16ToBuf,           800,          "800", $02168);
		bufTest( u16ToBuf,           900,          "900", $02169);
		bufTest( u16ToBuf,         1_000,        "1_000", $03161);
		bufTest( u16ToBuf,         2_000,        "2_000", $03162);
		bufTest( u16ToBuf,         3_000,        "3_000", $03163);
		bufTest( u16ToBuf,         4_000,        "4_000", $03164);
		bufTest( u16ToBuf,         5_000,        "5_000", $03165);
		bufTest( u16ToBuf,         6_000,        "6_000", $03166);
		bufTest( u16ToBuf,         7_000,        "7_000", $03167);
		bufTest( u16ToBuf,         8_000,        "8_000", $03168);
		bufTest( u16ToBuf,         9_000,        "9_000", $03169);
		bufTest( u16ToBuf,        10_000,       "10_000", $04161);
		bufTest( u16ToBuf,        20_000,       "20_000", $04162);
		bufTest( u16ToBuf,        30_000,       "30_000", $04163);
		
		bufTest( u16ToBuf,        16_789,       "16_789", $a04165);
	
		
		stderr.put( "conv.u16ToBuf with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.u16ToBuf with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testung conv.i32ToBuf

	try

		bufTest( u32ToBuf,             0,              "0", $00320);
		bufTest( u32ToBuf,             1,              "1", $00321);
		bufTest( u32ToBuf,             2,              "2", $00322);
		bufTest( u32ToBuf,             3,              "3", $00323);
		bufTest( u32ToBuf,             4,              "4", $00324);
		bufTest( u32ToBuf,             5,              "5", $00325);
		bufTest( u32ToBuf,             6,              "6", $00326);
		bufTest( u32ToBuf,             7,              "7", $00327);
		bufTest( u32ToBuf,             8,              "8", $00328);
		bufTest( u32ToBuf,             9,              "9", $00329);
		bufTest( u32ToBuf,            10,             "10", $01321);
		bufTest( u32ToBuf,            20,             "20", $01322);
		bufTest( u32ToBuf,            30,             "30", $01323);
		bufTest( u32ToBuf,            40,             "40", $01324);
		bufTest( u32ToBuf,            50,             "50", $01325);
		bufTest( u32ToBuf,            60,             "60", $01326);
		bufTest( u32ToBuf,            70,             "70", $01327);
		bufTest( u32ToBuf,            80,             "80", $01328);
		bufTest( u32ToBuf,            90,             "90", $01329);
		bufTest( u32ToBuf,           100,            "100", $02321);
		bufTest( u32ToBuf,           200,            "200", $02322);
		bufTest( u32ToBuf,           300,            "300", $02323);
		bufTest( u32ToBuf,           400,            "400", $02324);
		bufTest( u32ToBuf,           500,            "500", $02325);
		bufTest( u32ToBuf,           600,            "600", $02326);
		bufTest( u32ToBuf,           700,            "700", $02327);
		bufTest( u32ToBuf,           800,            "800", $02328);
		bufTest( u32ToBuf,           900,            "900", $02329);
		bufTest( u32ToBuf,         1_000,          "1_000", $03321);
		bufTest( u32ToBuf,         2_000,          "2_000", $03322);
		bufTest( u32ToBuf,         3_000,          "3_000", $03323);
		bufTest( u32ToBuf,         4_000,          "4_000", $03324);
		bufTest( u32ToBuf,         5_000,          "5_000", $03325);
		bufTest( u32ToBuf,         6_000,          "6_000", $03326);
		bufTest( u32ToBuf,         7_000,          "7_000", $03327);
		bufTest( u32ToBuf,         8_000,          "8_000", $03328);
		bufTest( u32ToBuf,         9_000,          "9_000", $03329);
		bufTest( u32ToBuf,        10_000,         "10_000", $04321);
		bufTest( u32ToBuf,        20_000,         "20_000", $04322);
		bufTest( u32ToBuf,        30_000,         "30_000", $04323);
		bufTest( u32ToBuf,        40_000,         "40_000", $04324);
		bufTest( u32ToBuf,        50_000,         "50_000", $04325);
		bufTest( u32ToBuf,        60_000,         "60_000", $04326);
		bufTest( u32ToBuf,        70_000,         "70_000", $04327);
		bufTest( u32ToBuf,        80_000,         "80_000", $04328);
		bufTest( u32ToBuf,        90_000,         "90_000", $04329);
		bufTest( u32ToBuf,       100_000,        "100_000", $05321);
		bufTest( u32ToBuf,       200_000,        "200_000", $05322);
		bufTest( u32ToBuf,       300_000,        "300_000", $05323);
		bufTest( u32ToBuf,       400_000,        "400_000", $05324);
		bufTest( u32ToBuf,       500_000,        "500_000", $05325);
		bufTest( u32ToBuf,       600_000,        "600_000", $05326);
		bufTest( u32ToBuf,       700_000,        "700_000", $05327);
		bufTest( u32ToBuf,       800_000,        "800_000", $05328);
		bufTest( u32ToBuf,       900_000,        "900_000", $05329);
		bufTest( u32ToBuf,     1_000_000,      "1_000_000", $06321);
		bufTest( u32ToBuf,     2_000_000,      "2_000_000", $06322);
		bufTest( u32ToBuf,     3_000_000,      "3_000_000", $06323);
		bufTest( u32ToBuf,     4_000_000,      "4_000_000", $06324);
		bufTest( u32ToBuf,     5_000_000,      "5_000_000", $06325);
		bufTest( u32ToBuf,     6_000_000,      "6_000_000", $06326);
		bufTest( u32ToBuf,     7_000_000,      "7_000_000", $06327);
		bufTest( u32ToBuf,     8_000_000,      "8_000_000", $06328);
		bufTest( u32ToBuf,     9_000_000,      "9_000_000", $06329);
		bufTest( u32ToBuf,    10_000_000,     "10_000_000", $07321);
		bufTest( u32ToBuf,    20_000_000,     "20_000_000", $07322);
		bufTest( u32ToBuf,    30_000_000,     "30_000_000", $07323);
		bufTest( u32ToBuf,    40_000_000,     "40_000_000", $07324);
		bufTest( u32ToBuf,    50_000_000,     "50_000_000", $07325);
		bufTest( u32ToBuf,    60_000_000,     "60_000_000", $07326);
		bufTest( u32ToBuf,    70_000_000,     "70_000_000", $07327);
		bufTest( u32ToBuf,    80_000_000,     "80_000_000", $07328);
		bufTest( u32ToBuf,    90_000_000,     "90_000_000", $07329);
		bufTest( u32ToBuf,   100_000_000,    "100_000_000", $08321);
		bufTest( u32ToBuf,   200_000_000,    "200_000_000", $08322);
		bufTest( u32ToBuf,   300_000_000,    "300_000_000", $08323);
		bufTest( u32ToBuf,   400_000_000,    "400_000_000", $08324);
		bufTest( u32ToBuf,   500_000_000,    "500_000_000", $08325);
		bufTest( u32ToBuf,   600_000_000,    "600_000_000", $08326);
		bufTest( u32ToBuf,   700_000_000,    "700_000_000", $08327);
		bufTest( u32ToBuf,   800_000_000,    "800_000_000", $08328);
		bufTest( u32ToBuf,   900_000_000,    "900_000_000", $08329);
		bufTest( u32ToBuf, 1_000_000_000,  "1_000_000_000", $09321);
		bufTest( u32ToBuf, 2_000_000_000,  "2_000_000_000", $09322);
		
		bufTest( u32ToBuf, 1_234_567_890,  "1_234_567_890", $a09324);

		
		stderr.put( "conv.u32ToBuf with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.u32ToBuf with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testung conv.i64ToBuf

	try

		
		bufTest( u64ToBuf,             0,               "0", $00640);
		bufTest( u64ToBuf,             1,               "1", $00641);
		bufTest( u64ToBuf,             2,               "2", $00642);
		bufTest( u64ToBuf,             3,               "3", $00643);
		bufTest( u64ToBuf,             4,               "4", $00644);
		bufTest( u64ToBuf,             5,               "5", $00645);
		bufTest( u64ToBuf,             6,               "6", $00646);
		bufTest( u64ToBuf,             7,               "7", $00647);
		bufTest( u64ToBuf,             8,               "8", $00648);
		bufTest( u64ToBuf,             9,               "9", $00649);
		bufTest( u64ToBuf,             0,               "0", $a00640);
		bufTest( u64ToBuf,            10,              "10", $01641);
		bufTest( u64ToBuf,            20,              "20", $01642);
		bufTest( u64ToBuf,            30,              "30", $01643);
		bufTest( u64ToBuf,            40,              "40", $01644);
		bufTest( u64ToBuf,            50,              "50", $01645);
		bufTest( u64ToBuf,            60,              "60", $01646);
		bufTest( u64ToBuf,            70,              "70", $01647);
		bufTest( u64ToBuf,            80,              "80", $01648);
		bufTest( u64ToBuf,            90,              "90", $01649);
		bufTest( u64ToBuf,           100,             "100", $02641);
		bufTest( u64ToBuf,           200,             "200", $02642);
		bufTest( u64ToBuf,           300,             "300", $02643);
		bufTest( u64ToBuf,           400,             "400", $02644);
		bufTest( u64ToBuf,           500,             "500", $02645);
		bufTest( u64ToBuf,           600,             "600", $02646);
		bufTest( u64ToBuf,           700,             "700", $02647);
		bufTest( u64ToBuf,           800,             "800", $02648);
		bufTest( u64ToBuf,           900,             "900", $02649);
		bufTest( u64ToBuf,         1_000,           "1_000", $03641);
		bufTest( u64ToBuf,         2_000,           "2_000", $03642);
		bufTest( u64ToBuf,         3_000,           "3_000", $03643);
		bufTest( u64ToBuf,         4_000,           "4_000", $03644);
		bufTest( u64ToBuf,         5_000,           "5_000", $03645);
		bufTest( u64ToBuf,         6_000,           "6_000", $03646);
		bufTest( u64ToBuf,         7_000,           "7_000", $03647);
		bufTest( u64ToBuf,         8_000,           "8_000", $03648);
		bufTest( u64ToBuf,         9_000,           "9_000", $03649);
		bufTest( u64ToBuf,        10_000,          "10_000", $04641);
		bufTest( u64ToBuf,        20_000,          "20_000", $04642);
		bufTest( u64ToBuf,        30_000,          "30_000", $04643);
		bufTest( u64ToBuf,        40_000,          "40_000", $04644);
		bufTest( u64ToBuf,        50_000,          "50_000", $04645);
		bufTest( u64ToBuf,        60_000,          "60_000", $04646);
		bufTest( u64ToBuf,        70_000,          "70_000", $04647);
		bufTest( u64ToBuf,        80_000,          "80_000", $04648);
		bufTest( u64ToBuf,        90_000,          "90_000", $04649);
		bufTest( u64ToBuf,       100_000,         "100_000", $05641);
		bufTest( u64ToBuf,       200_000,         "200_000", $05642);
		bufTest( u64ToBuf,       300_000,         "300_000", $05643);
		bufTest( u64ToBuf,       400_000,         "400_000", $05644);
		bufTest( u64ToBuf,       500_000,         "500_000", $05645);
		bufTest( u64ToBuf,       600_000,         "600_000", $05646);
		bufTest( u64ToBuf,       700_000,         "700_000", $05647);
		bufTest( u64ToBuf,       800_000,         "800_000", $05648);
		bufTest( u64ToBuf,       900_000,         "900_000", $05649);
		bufTest( u64ToBuf,     1_000_000,       "1_000_000", $06641);
		bufTest( u64ToBuf,     2_000_000,       "2_000_000", $06642);
		bufTest( u64ToBuf,     3_000_000,       "3_000_000", $06643);
		bufTest( u64ToBuf,     4_000_000,       "4_000_000", $06644);
		bufTest( u64ToBuf,     5_000_000,       "5_000_000", $06645);
		bufTest( u64ToBuf,     6_000_000,       "6_000_000", $06646);
		bufTest( u64ToBuf,     7_000_000,       "7_000_000", $06647);
		bufTest( u64ToBuf,     8_000_000,       "8_000_000", $06648);
		bufTest( u64ToBuf,     9_000_000,       "9_000_000", $06649);
		bufTest( u64ToBuf,    10_000_000,      "10_000_000", $07641);
		bufTest( u64ToBuf,    20_000_000,      "20_000_000", $07642);
		bufTest( u64ToBuf,    30_000_000,      "30_000_000", $07643);
		bufTest( u64ToBuf,    40_000_000,      "40_000_000", $07644);
		bufTest( u64ToBuf,    50_000_000,      "50_000_000", $07645);
		bufTest( u64ToBuf,    60_000_000,      "60_000_000", $07646);
		bufTest( u64ToBuf,    70_000_000,      "70_000_000", $07647);
		bufTest( u64ToBuf,    80_000_000,      "80_000_000", $07648);
		bufTest( u64ToBuf,    90_000_000,      "90_000_000", $07649);
		bufTest( u64ToBuf,   100_000_000,     "100_000_000", $08641);
		bufTest( u64ToBuf,   200_000_000,     "200_000_000", $08642);
		bufTest( u64ToBuf,   300_000_000,     "300_000_000", $08643);
		bufTest( u64ToBuf,   400_000_000,     "400_000_000", $08644);
		bufTest( u64ToBuf,   500_000_000,     "500_000_000", $08645);
		bufTest( u64ToBuf,   600_000_000,     "600_000_000", $08646);
		bufTest( u64ToBuf,   700_000_000,     "700_000_000", $08647);
		bufTest( u64ToBuf,   800_000_000,     "800_000_000", $08648);
		bufTest( u64ToBuf,   900_000_000,     "900_000_000", $08649);
		bufTest( u64ToBuf, 1_000_000_000,   "1_000_000_000", $09641);
		bufTest( u64ToBuf, 2_000_000_000,   "2_000_000_000", $09642);
		bufTest( u64ToBuf, 3_000_000_000,   "3_000_000_000", $09643);
		bufTest( u64ToBuf, 4_000_000_000,   "4_000_000_000", $09644);
		bufTest( u64ToBuf, 5_000_000_000,   "5_000_000_000", $09645);
		bufTest( u64ToBuf, 6_000_000_000,   "6_000_000_000", $09646);
		bufTest( u64ToBuf, 7_000_000_000,   "7_000_000_000", $09647);
		bufTest( u64ToBuf, 8_000_000_000,   "8_000_000_000", $09648);
		bufTest( u64ToBuf, 9_000_000_000,   "9_000_000_000", $09649);
		bufTest( u64ToBuf,10_000_000_000,  "10_000_000_000", $0A641);
		bufTest( u64ToBuf,20_000_000_000,  "20_000_000_000", $0A642);
		bufTest( u64ToBuf,30_000_000_000,  "30_000_000_000", $0A643);
		bufTest( u64ToBuf,40_000_000_000,  "40_000_000_000", $0A644);
		bufTest( u64ToBuf,50_000_000_000,  "50_000_000_000", $0A645);
		bufTest( u64ToBuf,60_000_000_000,  "60_000_000_000", $0A646);
		bufTest( u64ToBuf,70_000_000_000,  "70_000_000_000", $0A647);
		bufTest( u64ToBuf,80_000_000_000,  "80_000_000_000", $0A648);
		bufTest( u64ToBuf,90_000_000_000,  "90_000_000_000", $0A649);
		
		bufTest( u64ToBuf,100_000_000_000,   "100_000_000_000", $0B641);
		bufTest( u64ToBuf,200_000_000_000,   "200_000_000_000", $0B642);
		bufTest( u64ToBuf,300_000_000_000,   "300_000_000_000", $0B643);
		bufTest( u64ToBuf,400_000_000_000,   "400_000_000_000", $0B644);
		bufTest( u64ToBuf,500_000_000_000,   "500_000_000_000", $0B645);
		bufTest( u64ToBuf,600_000_000_000,   "600_000_000_000", $0B646);
		bufTest( u64ToBuf,700_000_000_000,   "700_000_000_000", $0B647);
		bufTest( u64ToBuf,800_000_000_000,   "800_000_000_000", $0B648);
		bufTest( u64ToBuf,900_000_000_000,   "900_000_000_000", $0B649);
		bufTest( u64ToBuf,1_000_000_000_000, "1_000_000_000_000", $0C641);
		bufTest( u64ToBuf,2_000_000_000_000, "2_000_000_000_000", $0C642);
		bufTest( u64ToBuf,3_000_000_000_000, "3_000_000_000_000", $0C643);
		bufTest( u64ToBuf,4_000_000_000_000, "4_000_000_000_000", $0C644);
		bufTest( u64ToBuf,5_000_000_000_000, "5_000_000_000_000", $0C645);
		bufTest( u64ToBuf,6_000_000_000_000, "6_000_000_000_000", $0C646);
		bufTest( u64ToBuf,7_000_000_000_000, "7_000_000_000_000", $0C647);
		bufTest( u64ToBuf,8_000_000_000_000, "8_000_000_000_000", $0C648);
		bufTest( u64ToBuf,9_000_000_000_000, "9_000_000_000_000", $0C649);
		bufTest( u64ToBuf,10_000_000_000_000,  "10_000_000_000_000", $0D641);
		bufTest( u64ToBuf,20_000_000_000_000,  "20_000_000_000_000", $0D642);
		bufTest( u64ToBuf,30_000_000_000_000,  "30_000_000_000_000", $0D643);
		bufTest( u64ToBuf,40_000_000_000_000,  "40_000_000_000_000", $0D644);
		bufTest( u64ToBuf,50_000_000_000_000,  "50_000_000_000_000", $0D645);
		bufTest( u64ToBuf,60_000_000_000_000,  "60_000_000_000_000", $0D646);
		bufTest( u64ToBuf,70_000_000_000_000,  "70_000_000_000_000", $0D647);
		bufTest( u64ToBuf,80_000_000_000_000,  "80_000_000_000_000", $0D648);
		bufTest( u64ToBuf,90_000_000_000_000,  "90_000_000_000_000", $0D649);
		bufTest( u64ToBuf,100_000_000_000_000,   "100_000_000_000_000", $0E641);
		bufTest( u64ToBuf,200_000_000_000_000,   "200_000_000_000_000", $0E642);
		bufTest( u64ToBuf,300_000_000_000_000,   "300_000_000_000_000", $0E643);
		bufTest( u64ToBuf,400_000_000_000_000,   "400_000_000_000_000", $0E644);
		bufTest( u64ToBuf,500_000_000_000_000,   "500_000_000_000_000", $0E645);
		bufTest( u64ToBuf,600_000_000_000_000,   "600_000_000_000_000", $0E646);
		bufTest( u64ToBuf,700_000_000_000_000,   "700_000_000_000_000", $0E647);
		bufTest( u64ToBuf,800_000_000_000_000,   "800_000_000_000_000", $0E648);
		bufTest( u64ToBuf,900_000_000_000_000,   "900_000_000_000_000", $0E649);
		bufTest( u64ToBuf,1_000_000_000_000_000,    "1_000_000_000_000_000", $0F641);
		bufTest( u64ToBuf,2_000_000_000_000_000,    "2_000_000_000_000_000", $0F642);
		bufTest( u64ToBuf,3_000_000_000_000_000,    "3_000_000_000_000_000", $0F643);
		bufTest( u64ToBuf,4_000_000_000_000_000,    "4_000_000_000_000_000", $0F644);
		bufTest( u64ToBuf,5_000_000_000_000_000,    "5_000_000_000_000_000", $0F645);
		bufTest( u64ToBuf,6_000_000_000_000_000,    "6_000_000_000_000_000", $0F646);
		bufTest( u64ToBuf,7_000_000_000_000_000,    "7_000_000_000_000_000", $0F647);
		bufTest( u64ToBuf,8_000_000_000_000_000,    "8_000_000_000_000_000", $0F648);
		bufTest( u64ToBuf,9_000_000_000_000_000,    "9_000_000_000_000_000", $0F649);
		bufTest( u64ToBuf,10_000_000_000_000_000,     "10_000_000_000_000_000", $10641);
		bufTest( u64ToBuf,20_000_000_000_000_000,     "20_000_000_000_000_000", $10642);
		bufTest( u64ToBuf,30_000_000_000_000_000,     "30_000_000_000_000_000", $10643);
		bufTest( u64ToBuf,40_000_000_000_000_000,     "40_000_000_000_000_000", $10644);
		bufTest( u64ToBuf,50_000_000_000_000_000,     "50_000_000_000_000_000", $10645);
		bufTest( u64ToBuf,60_000_000_000_000_000,     "60_000_000_000_000_000", $10646);
		bufTest( u64ToBuf,70_000_000_000_000_000,     "70_000_000_000_000_000", $10647);
		bufTest( u64ToBuf,80_000_000_000_000_000,     "80_000_000_000_000_000", $10648);
		bufTest( u64ToBuf,90_000_000_000_000_000,     "90_000_000_000_000_000", $10649);
		bufTest( u64ToBuf,100_000_000_000_000_000,      "100_000_000_000_000_000", $11641);
		bufTest( u64ToBuf,200_000_000_000_000_000,      "200_000_000_000_000_000", $11642);
		bufTest( u64ToBuf,300_000_000_000_000_000,      "300_000_000_000_000_000", $11643);
		bufTest( u64ToBuf,400_000_000_000_000_000,      "400_000_000_000_000_000", $11644);
		bufTest( u64ToBuf,500_000_000_000_000_000,      "500_000_000_000_000_000", $11645);
		bufTest( u64ToBuf,600_000_000_000_000_000,      "600_000_000_000_000_000", $11646);
		bufTest( u64ToBuf,700_000_000_000_000_000,      "700_000_000_000_000_000", $11647);
		bufTest( u64ToBuf,800_000_000_000_000_000,      "800_000_000_000_000_000", $11648);
		bufTest( u64ToBuf,900_000_000_000_000_000,      "900_000_000_000_000_000", $11649);
		bufTest( u64ToBuf,1_000_000_000_000_000_000,       "1_000_000_000_000_000_000", $12641);
		bufTest( u64ToBuf,2_000_000_000_000_000_000,       "2_000_000_000_000_000_000", $12642);
		bufTest( u64ToBuf,3_000_000_000_000_000_000,       "3_000_000_000_000_000_000", $12643);
		bufTest( u64ToBuf,4_000_000_000_000_000_000,       "4_000_000_000_000_000_000", $12644);
		bufTest( u64ToBuf,5_000_000_000_000_000_000,       "5_000_000_000_000_000_000", $12645);
		bufTest( u64ToBuf,6_000_000_000_000_000_000,       "6_000_000_000_000_000_000", $12646);
		bufTest( u64ToBuf,7_000_000_000_000_000_000,       "7_000_000_000_000_000_000", $12647);
		bufTest( u64ToBuf,8_000_000_000_000_000_000,       "8_000_000_000_000_000_000", $12648);
		bufTest( u64ToBuf,9_000_000_000_000_000_000,       "9_000_000_000_000_000_000", $12649);

		bufTest( u64ToBuf,1_234_567_890_123_456_789,          "1_234_567_890_123_456_789", $a12649);


		stderr.put( "conv.u64ToBuf with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.u64ToBuf with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;






	// Testung conv.i128ToBuf

	try

		bufTest( u128ToBuf,0,"0", $0_1280);
		bufTest( u128ToBuf,1,"1", $0_1281);
		bufTest( u128ToBuf,2,"2", $0_1282);
		bufTest( u128ToBuf,3,"3", $0_1283);
		bufTest( u128ToBuf,4,"4", $0_1284);
		bufTest( u128ToBuf,5,"5", $0_1285);
		bufTest( u128ToBuf,6,"6", $0_1286);
		bufTest( u128ToBuf,7,"7", $0_1287);
		bufTest( u128ToBuf,8,"8", $0_1288);
		bufTest( u128ToBuf,9,"9", $0_1289);
		bufTest( u128ToBuf,0,"0", $a0_1280);
		bufTest( u128ToBuf,10,"10", $1_1281);
		bufTest( u128ToBuf,20,"20", $1_1282);
		bufTest( u128ToBuf,30,"30", $1_1283);
		bufTest( u128ToBuf,40,"40", $1_1284);
		bufTest( u128ToBuf,50,"50", $1_1285);
		bufTest( u128ToBuf,60,"60", $1_1286);
		bufTest( u128ToBuf,70,"70", $1_1287);
		bufTest( u128ToBuf,80,"80", $1_1288);
		bufTest( u128ToBuf,90,"90", $1_1289);
		bufTest( u128ToBuf,100,"100", $2_1281);
		bufTest( u128ToBuf,200,"200", $2_1282);
		bufTest( u128ToBuf,300,"300", $2_1283);
		bufTest( u128ToBuf,400,"400", $2_1284);
		bufTest( u128ToBuf,500,"500", $2_1285);
		bufTest( u128ToBuf,600,"600", $2_1286);
		bufTest( u128ToBuf,700,"700", $2_1287);
		bufTest( u128ToBuf,800,"800", $2_1288);
		bufTest( u128ToBuf,900,"900", $2_1289);
		bufTest( u128ToBuf,1_000,                "1_000", $3_1281);
		bufTest( u128ToBuf,2_000,                "2_000", $3_1282);
		bufTest( u128ToBuf,3_000,                "3_000", $3_1283);
		bufTest( u128ToBuf,4_000,                "4_000", $3_1284);
		bufTest( u128ToBuf,5_000,                "5_000", $3_1285);
		bufTest( u128ToBuf,6_000,                "6_000", $3_1286);
		bufTest( u128ToBuf,7_000,                "7_000", $3_1287);
		bufTest( u128ToBuf,8_000,                "8_000", $3_1288);
		bufTest( u128ToBuf,9_000,                "9_000", $3_1289);
		bufTest( u128ToBuf,10_000,              "10_000", $4_1281);
		bufTest( u128ToBuf,20_000,              "20_000", $4_1282);
		bufTest( u128ToBuf,30_000,              "30_000", $4_1283);
		bufTest( u128ToBuf,40_000,              "40_000", $4_1284);
		bufTest( u128ToBuf,50_000,              "50_000", $4_1285);
		bufTest( u128ToBuf,60_000,              "60_000", $4_1286);
		bufTest( u128ToBuf,70_000,              "70_000", $4_1287);
		bufTest( u128ToBuf,80_000,              "80_000", $4_1288);
		bufTest( u128ToBuf,90_000,              "90_000", $4_1289);
		bufTest( u128ToBuf,100_000,            "100_000", $5_1281);
		bufTest( u128ToBuf,200_000,            "200_000", $5_1282);
		bufTest( u128ToBuf,300_000,            "300_000", $5_1283);
		bufTest( u128ToBuf,400_000,            "400_000", $5_1284);
		bufTest( u128ToBuf,500_000,            "500_000", $5_1285);
		bufTest( u128ToBuf,600_000,            "600_000", $5_1286);
		bufTest( u128ToBuf,700_000,            "700_000", $5_1287);
		bufTest( u128ToBuf,800_000,            "800_000", $5_1288);
		bufTest( u128ToBuf,900_000,            "900_000", $5_1289);
		bufTest( u128ToBuf,1_000_000,         "1_000_000", $6_1281);
		bufTest( u128ToBuf,2_000_000,         "2_000_000", $6_1282);
		bufTest( u128ToBuf,3_000_000,         "3_000_000", $6_1283);
		bufTest( u128ToBuf,4_000_000,         "4_000_000", $6_1284);
		bufTest( u128ToBuf,5_000_000,         "5_000_000", $6_1285);
		bufTest( u128ToBuf,6_000_000,         "6_000_000", $6_1286);
		bufTest( u128ToBuf,7_000_000,         "7_000_000", $6_1287);
		bufTest( u128ToBuf,8_000_000,         "8_000_000", $6_1288);
		bufTest( u128ToBuf,9_000_000,         "9_000_000", $6_1289);
		bufTest( u128ToBuf,10_000_000,       "10_000_000", $7_1281);
		bufTest( u128ToBuf,20_000_000,       "20_000_000", $7_1282);
		bufTest( u128ToBuf,30_000_000,       "30_000_000", $7_1283);
		bufTest( u128ToBuf,40_000_000,       "40_000_000", $7_1284);
		bufTest( u128ToBuf,50_000_000,       "50_000_000", $7_1285);
		bufTest( u128ToBuf,60_000_000,       "60_000_000", $7_1286);
		bufTest( u128ToBuf,70_000_000,       "70_000_000", $7_1287);
		bufTest( u128ToBuf,80_000_000,       "80_000_000", $7_1288);
		bufTest( u128ToBuf,90_000_000,       "90_000_000", $7_1289);
		bufTest( u128ToBuf,100_000_000,     "100_000_000", $8_1281);
		bufTest( u128ToBuf,200_000_000,     "200_000_000", $8_1282);
		bufTest( u128ToBuf,300_000_000,     "300_000_000", $8_1283);
		bufTest( u128ToBuf,400_000_000,     "400_000_000", $8_1284);
		bufTest( u128ToBuf,500_000_000,     "500_000_000", $8_1285);
		bufTest( u128ToBuf,600_000_000,     "600_000_000", $8_1286);
		bufTest( u128ToBuf,700_000_000,     "700_000_000", $8_1287);
		bufTest( u128ToBuf,800_000_000,     "800_000_000", $8_1288);
		bufTest( u128ToBuf,900_000_000,     "900_000_000", $8_1289);
		bufTest( u128ToBuf,1_000_000_000,  "1_000_000_000", $9_1281);
		bufTest( u128ToBuf,2_000_000_000,  "2_000_000_000", $9_1282);
		bufTest( u128ToBuf,3_000_000_000,  "3_000_000_000", $9_1283);
		bufTest( u128ToBuf,4_000_000_000,  "4_000_000_000", $9_1284);
		bufTest( u128ToBuf,5_000_000_000,  "5_000_000_000", $9_1285);
		bufTest( u128ToBuf,6_000_000_000,  "6_000_000_000", $9_1286);
		bufTest( u128ToBuf,7_000_000_000,  "7_000_000_000", $9_1287);
		bufTest( u128ToBuf,8_000_000_000,  "8_000_000_000", $9_1288);
		bufTest( u128ToBuf,9_000_000_000,  "9_000_000_000", $9_1289);
		bufTest( u128ToBuf,10_000_000_000,   "10_000_000_000", $A_1281);
		bufTest( u128ToBuf,20_000_000_000,   "20_000_000_000", $A_1282);
		bufTest( u128ToBuf,30_000_000_000,   "30_000_000_000", $A_1283);
		bufTest( u128ToBuf,40_000_000_000,   "40_000_000_000", $A_1284);
		bufTest( u128ToBuf,50_000_000_000,   "50_000_000_000", $A_1285);
		bufTest( u128ToBuf,60_000_000_000,   "60_000_000_000", $A_1286);
		bufTest( u128ToBuf,70_000_000_000,   "70_000_000_000", $A_1287);
		bufTest( u128ToBuf,80_000_000_000,   "80_000_000_000", $A_1288);
		bufTest( u128ToBuf,90_000_000_000,   "90_000_000_000", $A_1289);
		bufTest( u128ToBuf,100_000_000_000,    "100_000_000_000", $B_1281);
		bufTest( u128ToBuf,200_000_000_000,    "200_000_000_000", $B_1282);
		bufTest( u128ToBuf,300_000_000_000,    "300_000_000_000", $B_1283);
		bufTest( u128ToBuf,400_000_000_000,    "400_000_000_000", $B_1284);
		bufTest( u128ToBuf,500_000_000_000,    "500_000_000_000", $B_1285);
		bufTest( u128ToBuf,600_000_000_000,    "600_000_000_000", $B_1286);
		bufTest( u128ToBuf,700_000_000_000,    "700_000_000_000", $B_1287);
		bufTest( u128ToBuf,800_000_000_000,    "800_000_000_000", $B_1288);
		bufTest( u128ToBuf,900_000_000_000,    "900_000_000_000", $B_1289);
		bufTest( u128ToBuf,1_000_000_000_000,"1_000_000_000_000", $C_1281);
		bufTest( u128ToBuf,2_000_000_000_000,"2_000_000_000_000", $C_1282);
		bufTest( u128ToBuf,3_000_000_000_000,"3_000_000_000_000", $C_1283);
		bufTest( u128ToBuf,4_000_000_000_000,"4_000_000_000_000", $C_1284);
		bufTest( u128ToBuf,5_000_000_000_000,"5_000_000_000_000", $C_1285);
		bufTest( u128ToBuf,6_000_000_000_000,"6_000_000_000_000", $C_1286);
		bufTest( u128ToBuf,7_000_000_000_000,"7_000_000_000_000", $C_1287);
		bufTest( u128ToBuf,8_000_000_000_000,"8_000_000_000_000", $C_1288);
		bufTest( u128ToBuf,9_000_000_000_000,"9_000_000_000_000", $C_1289);
		
		bufTest( u128ToBuf,10_000_000_000_000,     "10_000_000_000_000", $D_1281);
		bufTest( u128ToBuf,20_000_000_000_000,     "20_000_000_000_000", $D_1282);
		bufTest( u128ToBuf,30_000_000_000_000,     "30_000_000_000_000", $D_1283);
		bufTest( u128ToBuf,40_000_000_000_000,     "40_000_000_000_000", $D_1284);
		bufTest( u128ToBuf,50_000_000_000_000,     "50_000_000_000_000", $D_1285);
		bufTest( u128ToBuf,60_000_000_000_000,     "60_000_000_000_000", $D_1286);
		bufTest( u128ToBuf,70_000_000_000_000,     "70_000_000_000_000", $D_1287);
		bufTest( u128ToBuf,80_000_000_000_000,     "80_000_000_000_000", $D_1288);
		bufTest( u128ToBuf,90_000_000_000_000,     "90_000_000_000_000", $D_1289);
		bufTest( u128ToBuf,100_000_000_000_000,   "100_000_000_000_000", $E_1281);
		bufTest( u128ToBuf,200_000_000_000_000,   "200_000_000_000_000", $E_1282);
		bufTest( u128ToBuf,300_000_000_000_000,   "300_000_000_000_000", $E_1283);
		bufTest( u128ToBuf,400_000_000_000_000,   "400_000_000_000_000", $E_1284);
		bufTest( u128ToBuf,500_000_000_000_000,   "500_000_000_000_000", $E_1285);
		bufTest( u128ToBuf,600_000_000_000_000,   "600_000_000_000_000", $E_1286);
		bufTest( u128ToBuf,700_000_000_000_000,   "700_000_000_000_000", $E_1287);
		bufTest( u128ToBuf,800_000_000_000_000,   "800_000_000_000_000", $E_1288);
		bufTest( u128ToBuf,900_000_000_000_000,   "900_000_000_000_000", $E_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000,"1_000_000_000_000_000", $F_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000,"2_000_000_000_000_000", $F_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000,"3_000_000_000_000_000", $F_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000,"4_000_000_000_000_000", $F_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000,"5_000_000_000_000_000", $F_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000,"6_000_000_000_000_000", $F_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000,"7_000_000_000_000_000", $F_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000,"8_000_000_000_000_000", $F_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000,"9_000_000_000_000_000", $F_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000,     "10_000_000_000_000_000", $0_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000,     "20_000_000_000_000_000", $0_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000,     "30_000_000_000_000_000", $0_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000,     "40_000_000_000_000_000", $0_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000,     "50_000_000_000_000_000", $0_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000,     "60_000_000_000_000_000", $0_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000,     "70_000_000_000_000_000", $0_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000,     "80_000_000_000_000_000", $0_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000,     "90_000_000_000_000_000", $0_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000,   "100_000_000_000_000_000", $1_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000,   "200_000_000_000_000_000", $1_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000,   "300_000_000_000_000_000", $1_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000,   "400_000_000_000_000_000", $1_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000,   "500_000_000_000_000_000", $1_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000,   "600_000_000_000_000_000", $1_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000,   "700_000_000_000_000_000", $1_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000,   "800_000_000_000_000_000", $1_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000,   "900_000_000_000_000_000", $1_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000,"1_000_000_000_000_000_000", $2_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000,"2_000_000_000_000_000_000", $2_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000,"3_000_000_000_000_000_000", $2_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000,"4_000_000_000_000_000_000", $2_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000,"5_000_000_000_000_000_000", $2_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000,"6_000_000_000_000_000_000", $2_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000,"7_000_000_000_000_000_000", $2_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000,"8_000_000_000_000_000_000", $2_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000,"9_000_000_000_000_000_000", $2_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000,     "10_000_000_000_000_000_000", $3_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000,     "20_000_000_000_000_000_000", $3_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000,     "30_000_000_000_000_000_000", $3_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000,     "40_000_000_000_000_000_000", $3_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000,     "50_000_000_000_000_000_000", $3_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000,     "60_000_000_000_000_000_000", $3_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000,     "70_000_000_000_000_000_000", $3_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000,     "80_000_000_000_000_000_000", $3_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000,     "90_000_000_000_000_000_000", $3_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000,   "100_000_000_000_000_000_000", $4_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000_000,   "200_000_000_000_000_000_000", $4_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000_000,   "300_000_000_000_000_000_000", $4_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000_000,   "400_000_000_000_000_000_000", $4_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000_000,   "500_000_000_000_000_000_000", $4_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000_000,   "600_000_000_000_000_000_000", $4_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000_000,   "700_000_000_000_000_000_000", $4_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000_000,   "800_000_000_000_000_000_000", $4_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000_000,   "900_000_000_000_000_000_000", $4_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000_000,"1_000_000_000_000_000_000_000", $5_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000_000,"2_000_000_000_000_000_000_000", $5_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000_000,"3_000_000_000_000_000_000_000", $5_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000_000,"4_000_000_000_000_000_000_000", $5_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000_000,"5_000_000_000_000_000_000_000", $5_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000_000,"6_000_000_000_000_000_000_000", $5_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000_000,"7_000_000_000_000_000_000_000", $5_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000_000,"8_000_000_000_000_000_000_000", $5_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000_000,"9_000_000_000_000_000_000_000", $5_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000_000,    "10_000_000_000_000_000_000_000", $6_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000_000,    "20_000_000_000_000_000_000_000", $6_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000_000,    "30_000_000_000_000_000_000_000", $6_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000_000,    "40_000_000_000_000_000_000_000", $6_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000_000,    "50_000_000_000_000_000_000_000", $6_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000_000,    "60_000_000_000_000_000_000_000", $6_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000_000,    "70_000_000_000_000_000_000_000", $6_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000_000,    "80_000_000_000_000_000_000_000", $6_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000_000,    "90_000_000_000_000_000_000_000", $6_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000_000,  "100_000_000_000_000_000_000_000", $7_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000_000_000,  "200_000_000_000_000_000_000_000", $7_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000_000_000,  "300_000_000_000_000_000_000_000", $7_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000_000_000,  "400_000_000_000_000_000_000_000", $7_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000_000_000,  "500_000_000_000_000_000_000_000", $7_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000_000_000,  "600_000_000_000_000_000_000_000", $7_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000_000_000,  "700_000_000_000_000_000_000_000", $7_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000_000_000,  "800_000_000_000_000_000_000_000", $7_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000_000_000,  "900_000_000_000_000_000_000_000", $7_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000_000_000,    "1_000_000_000_000_000_000_000_000", $8_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000_000_000,    "2_000_000_000_000_000_000_000_000", $8_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000_000_000,    "3_000_000_000_000_000_000_000_000", $8_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000_000_000,    "4_000_000_000_000_000_000_000_000", $8_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000_000_000,    "5_000_000_000_000_000_000_000_000", $8_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000_000_000,    "6_000_000_000_000_000_000_000_000", $8_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000_000_000,    "7_000_000_000_000_000_000_000_000", $8_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000_000_000,    "8_000_000_000_000_000_000_000_000", $8_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000_000_000,    "9_000_000_000_000_000_000_000_000", $8_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000_000_000,  "10_000_000_000_000_000_000_000_000", $9_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000_000_000,  "20_000_000_000_000_000_000_000_000", $9_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000_000_000,  "30_000_000_000_000_000_000_000_000", $9_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000_000_000,  "40_000_000_000_000_000_000_000_000", $9_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000_000_000,  "50_000_000_000_000_000_000_000_000", $9_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000_000_000,  "60_000_000_000_000_000_000_000_000", $9_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000_000_000,  "70_000_000_000_000_000_000_000_000", $9_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000_000_000,  "80_000_000_000_000_000_000_000_000", $9_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000_000_000,  "90_000_000_000_000_000_000_000_000", $9_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000_000_000,"100_000_000_000_000_000_000_000_000", $A_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000_000_000_000,"200_000_000_000_000_000_000_000_000", $A_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000_000_000_000,"300_000_000_000_000_000_000_000_000", $A_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000_000_000_000,"400_000_000_000_000_000_000_000_000", $A_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000_000_000_000,"500_000_000_000_000_000_000_000_000", $A_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000_000_000_000,"600_000_000_000_000_000_000_000_000", $A_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000_000_000_000,"700_000_000_000_000_000_000_000_000", $A_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000_000_000_000,"800_000_000_000_000_000_000_000_000", $A_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000_000_000_000,"900_000_000_000_000_000_000_000_000", $A_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000_000_000_000,    "1_000_000_000_000_000_000_000_000_000", $B_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000_000_000_000,    "2_000_000_000_000_000_000_000_000_000", $B_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000_000_000_000,    "3_000_000_000_000_000_000_000_000_000", $B_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000_000_000_000,    "4_000_000_000_000_000_000_000_000_000", $B_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000_000_000_000,    "5_000_000_000_000_000_000_000_000_000", $B_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000_000_000_000,    "6_000_000_000_000_000_000_000_000_000", $B_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000_000_000_000,    "7_000_000_000_000_000_000_000_000_000", $B_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000_000_000_000,    "8_000_000_000_000_000_000_000_000_000", $B_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000_000_000_000,    "9_000_000_000_000_000_000_000_000_000", $B_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000_000_000_000,  "10_000_000_000_000_000_000_000_000_000", $C_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000_000_000_000,  "20_000_000_000_000_000_000_000_000_000", $C_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000_000_000_000,  "30_000_000_000_000_000_000_000_000_000", $C_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000_000_000_000,  "40_000_000_000_000_000_000_000_000_000", $C_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000_000_000_000,  "50_000_000_000_000_000_000_000_000_000", $C_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000_000_000_000,  "60_000_000_000_000_000_000_000_000_000", $C_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000_000_000_000,  "70_000_000_000_000_000_000_000_000_000", $C_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000_000_000_000,  "80_000_000_000_000_000_000_000_000_000", $C_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000_000_000_000,  "90_000_000_000_000_000_000_000_000_000", $C_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000_000_000_000,"100_000_000_000_000_000_000_000_000_000", $D_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000_000_000_000_000,"200_000_000_000_000_000_000_000_000_000", $D_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000_000_000_000_000,"300_000_000_000_000_000_000_000_000_000", $D_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000_000_000_000_000,"400_000_000_000_000_000_000_000_000_000", $D_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000_000_000_000_000,"500_000_000_000_000_000_000_000_000_000", $D_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000_000_000_000_000,"600_000_000_000_000_000_000_000_000_000", $D_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000_000_000_000_000,"700_000_000_000_000_000_000_000_000_000", $D_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000_000_000_000_000,"800_000_000_000_000_000_000_000_000_000", $D_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000_000_000_000_000,"900_000_000_000_000_000_000_000_000_000", $D_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000_000_000_000_000,    "1_000_000_000_000_000_000_000_000_000_000", $E_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000_000_000_000_000,    "2_000_000_000_000_000_000_000_000_000_000", $E_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000_000_000_000_000,    "3_000_000_000_000_000_000_000_000_000_000", $E_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000_000_000_000_000,    "4_000_000_000_000_000_000_000_000_000_000", $E_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000_000_000_000_000,    "5_000_000_000_000_000_000_000_000_000_000", $E_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000_000_000_000_000,    "6_000_000_000_000_000_000_000_000_000_000", $E_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000_000_000_000_000,    "7_000_000_000_000_000_000_000_000_000_000", $E_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000_000_000_000_000,    "8_000_000_000_000_000_000_000_000_000_000", $E_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000_000_000_000_000,    "9_000_000_000_000_000_000_000_000_000_000", $E_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000_000_000_000_000,  "10_000_000_000_000_000_000_000_000_000_000", $F_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000_000_000_000_000,  "20_000_000_000_000_000_000_000_000_000_000", $F_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000_000_000_000_000,  "30_000_000_000_000_000_000_000_000_000_000", $F_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000_000_000_000_000,  "40_000_000_000_000_000_000_000_000_000_000", $F_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000_000_000_000_000,  "50_000_000_000_000_000_000_000_000_000_000", $F_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000_000_000_000_000,  "60_000_000_000_000_000_000_000_000_000_000", $F_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000_000_000_000_000,  "70_000_000_000_000_000_000_000_000_000_000", $F_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000_000_000_000_000,  "80_000_000_000_000_000_000_000_000_000_000", $F_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000_000_000_000_000,  "90_000_000_000_000_000_000_000_000_000_000", $F_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000_000_000_000_000,"100_000_000_000_000_000_000_000_000_000_000", $0_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000_000_000_000_000_000,"200_000_000_000_000_000_000_000_000_000_000", $0_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000_000_000_000_000_000,"300_000_000_000_000_000_000_000_000_000_000", $0_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000_000_000_000_000_000,"400_000_000_000_000_000_000_000_000_000_000", $0_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000_000_000_000_000_000,"500_000_000_000_000_000_000_000_000_000_000", $0_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000_000_000_000_000_000,"600_000_000_000_000_000_000_000_000_000_000", $0_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000_000_000_000_000_000,"700_000_000_000_000_000_000_000_000_000_000", $0_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000_000_000_000_000_000,"800_000_000_000_000_000_000_000_000_000_000", $0_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000_000_000_000_000_000,"900_000_000_000_000_000_000_000_000_000_000", $0_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000_000_000_000_000_000,    "1_000_000_000_000_000_000_000_000_000_000_000", $1_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000_000_000_000_000_000,    "2_000_000_000_000_000_000_000_000_000_000_000", $1_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000_000_000_000_000_000,    "3_000_000_000_000_000_000_000_000_000_000_000", $1_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000_000_000_000_000_000,    "4_000_000_000_000_000_000_000_000_000_000_000", $1_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000_000_000_000_000_000,    "5_000_000_000_000_000_000_000_000_000_000_000", $1_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000_000_000_000_000_000,    "6_000_000_000_000_000_000_000_000_000_000_000", $1_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000_000_000_000_000_000,    "7_000_000_000_000_000_000_000_000_000_000_000", $1_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000_000_000_000_000_000,    "8_000_000_000_000_000_000_000_000_000_000_000", $1_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000_000_000_000_000_000,    "9_000_000_000_000_000_000_000_000_000_000_000", $1_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000_000_000_000_000_000,  "10_000_000_000_000_000_000_000_000_000_000_000", $2_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000_000_000_000_000_000,  "20_000_000_000_000_000_000_000_000_000_000_000", $2_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000_000_000_000_000_000,  "30_000_000_000_000_000_000_000_000_000_000_000", $2_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000_000_000_000_000_000,  "40_000_000_000_000_000_000_000_000_000_000_000", $2_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000_000_000_000_000_000,  "50_000_000_000_000_000_000_000_000_000_000_000", $2_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000_000_000_000_000_000,  "60_000_000_000_000_000_000_000_000_000_000_000", $2_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000_000_000_000_000_000,  "70_000_000_000_000_000_000_000_000_000_000_000", $2_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000_000_000_000_000_000,  "80_000_000_000_000_000_000_000_000_000_000_000", $2_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000_000_000_000_000_000,  "90_000_000_000_000_000_000_000_000_000_000_000", $2_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000_000_000_000_000_000,"100_000_000_000_000_000_000_000_000_000_000_000", $3_1281);
		bufTest( u128ToBuf,200_000_000_000_000_000_000_000_000_000_000_000,"200_000_000_000_000_000_000_000_000_000_000_000", $3_1282);
		bufTest( u128ToBuf,300_000_000_000_000_000_000_000_000_000_000_000,"300_000_000_000_000_000_000_000_000_000_000_000", $3_1283);
		bufTest( u128ToBuf,400_000_000_000_000_000_000_000_000_000_000_000,"400_000_000_000_000_000_000_000_000_000_000_000", $3_1284);
		bufTest( u128ToBuf,500_000_000_000_000_000_000_000_000_000_000_000,"500_000_000_000_000_000_000_000_000_000_000_000", $3_1285);
		bufTest( u128ToBuf,600_000_000_000_000_000_000_000_000_000_000_000,"600_000_000_000_000_000_000_000_000_000_000_000", $3_1286);
		bufTest( u128ToBuf,700_000_000_000_000_000_000_000_000_000_000_000,"700_000_000_000_000_000_000_000_000_000_000_000", $3_1287);
		bufTest( u128ToBuf,800_000_000_000_000_000_000_000_000_000_000_000,"800_000_000_000_000_000_000_000_000_000_000_000", $3_1288);
		bufTest( u128ToBuf,900_000_000_000_000_000_000_000_000_000_000_000,"900_000_000_000_000_000_000_000_000_000_000_000", $3_1289);
		bufTest( u128ToBuf,1_000_000_000_000_000_000_000_000_000_000_000_000,      "1_000_000_000_000_000_000_000_000_000_000_000_000", $4_1281);
		bufTest( u128ToBuf,2_000_000_000_000_000_000_000_000_000_000_000_000,      "2_000_000_000_000_000_000_000_000_000_000_000_000", $4_1282);
		bufTest( u128ToBuf,3_000_000_000_000_000_000_000_000_000_000_000_000,      "3_000_000_000_000_000_000_000_000_000_000_000_000", $4_1283);
		bufTest( u128ToBuf,4_000_000_000_000_000_000_000_000_000_000_000_000,      "4_000_000_000_000_000_000_000_000_000_000_000_000", $4_1284);
		bufTest( u128ToBuf,5_000_000_000_000_000_000_000_000_000_000_000_000,      "5_000_000_000_000_000_000_000_000_000_000_000_000", $4_1285);
		bufTest( u128ToBuf,6_000_000_000_000_000_000_000_000_000_000_000_000,      "6_000_000_000_000_000_000_000_000_000_000_000_000", $4_1286);
		bufTest( u128ToBuf,7_000_000_000_000_000_000_000_000_000_000_000_000,      "7_000_000_000_000_000_000_000_000_000_000_000_000", $4_1287);
		bufTest( u128ToBuf,8_000_000_000_000_000_000_000_000_000_000_000_000,      "8_000_000_000_000_000_000_000_000_000_000_000_000", $4_1288);
		bufTest( u128ToBuf,9_000_000_000_000_000_000_000_000_000_000_000_000,      "9_000_000_000_000_000_000_000_000_000_000_000_000", $4_1289);
		bufTest( u128ToBuf,10_000_000_000_000_000_000_000_000_000_000_000_000,    "10_000_000_000_000_000_000_000_000_000_000_000_000", $5_1281);
		bufTest( u128ToBuf,20_000_000_000_000_000_000_000_000_000_000_000_000,    "20_000_000_000_000_000_000_000_000_000_000_000_000", $5_1282);
		bufTest( u128ToBuf,30_000_000_000_000_000_000_000_000_000_000_000_000,    "30_000_000_000_000_000_000_000_000_000_000_000_000", $5_1283);
		bufTest( u128ToBuf,40_000_000_000_000_000_000_000_000_000_000_000_000,    "40_000_000_000_000_000_000_000_000_000_000_000_000", $5_1284);
		bufTest( u128ToBuf,50_000_000_000_000_000_000_000_000_000_000_000_000,    "50_000_000_000_000_000_000_000_000_000_000_000_000", $5_1285);
		bufTest( u128ToBuf,60_000_000_000_000_000_000_000_000_000_000_000_000,    "60_000_000_000_000_000_000_000_000_000_000_000_000", $5_1286);
		bufTest( u128ToBuf,70_000_000_000_000_000_000_000_000_000_000_000_000,    "70_000_000_000_000_000_000_000_000_000_000_000_000", $5_1287);
		bufTest( u128ToBuf,80_000_000_000_000_000_000_000_000_000_000_000_000,    "80_000_000_000_000_000_000_000_000_000_000_000_000", $5_1288);
		bufTest( u128ToBuf,90_000_000_000_000_000_000_000_000_000_000_000_000,    "90_000_000_000_000_000_000_000_000_000_000_000_000", $5_1289);
		bufTest( u128ToBuf,100_000_000_000_000_000_000_000_000_000_000_000_000,  "100_000_000_000_000_000_000_000_000_000_000_000_000", $6_1281);

		bufTest( u128ToBuf,123_456_789_012_345_678_901_234_567_890_123_456_789,"123_456_789_012_345_678_901_234_567_890_123_456_789", $a6_1284);

		stderr.put( "conv.u128ToBuf with underscores succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"conv.u128ToBuf with underscores failed! eax=", eax, nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



end convutobuf_test;

													