program fgetu64_test;
#include( "stdlib.hhf" )

var
	f			:pointer to virtualFile;
	input64		:int64;
	
	procedure cmp64( right:uns64 );
	begin cmp64;
	
		cmp( edx, (type dword right[4]));
		jne notEqual;
		cmp( eax, (type dword right));
	  notEqual:
		
	end cmp64;
	
begin fgetu64_test;

	// Testing fileio.getu64
	
	try
	
		virtualFile.create();
		mov( esi, f );
		f.open( "fc_getu64.data", fileio.r );

		f.getu64();
		cmp64( 0 );
		if( @ne ) then
		
			raise($1011);
		
		endif;	
		
		f.getu64();
		cmp64( 1 );
		if( @ne ) then
		
			raise($1012);
		
		endif;	
		
		f.getu64();
		cmp64( 18446744073709551615 );
		if( @ne ) then
		
			raise($1013);
		
		endif;	

		f.getu64();
		cmp64( 9223372036854775807 );
		if( @ne ) then
		
			raise($1014);
		
		endif;


		try
		
			f.getu64();

		  unprotected

		  	// We we got to this point, we failed to raise a conversion error.
			
		  	raise($1016 );
			
		  exception( ex.ConversionError )
		  
		  	// Okay, we succeeded if we got this exception.
			
		  anyexception
		  
		  	// Anything else? Pass it on.
			
		  	raise($1017 );
			
		endtry;
		f.readLn();	// Clean up after ourselves.
		
		
		try
		
			f.getu64();

		  unprotected
		  
		  	// We we got to this point, we failed to raise an overflow error.
			
		  	raise($1018 );
			
		  exception( ex.ValueOutOfRange )
		  
		  	// Okay, we succeeded if we got this exception.
			
		  anyexception
		  
		  	// Anything else? Pass it on.
			
		  	raise($1019 );
			
		endtry;
		f.readLn();
		
		
		// Better be at end of file.
		
		if( !f.eof()) then
		
			raise($1010);
			
		endif;
		stderr.put( "f.getu64 succeeded!" nl );
		
	  anyexception
	  
		stderr.put
		( 
			nl nl 
			"***************************************************" nl
			"f.getu64 failed! eax=", (type uns32 eax), nl
			"Data read did not match data expected in file" nl
			"***************************************************" nl
			nl 
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;



			
end fgetu64_test;

													