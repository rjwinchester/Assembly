program tTables;
#include( "stdlib.hhf" )

static
	id			:str.strvar( 256 );
	stTable		:table;
	dynTable	:tablePtr;
	
	vNodes		:dword[1024];
	stNodes		:dword[1024];
	dynNodes	:dword[1024];
	
var
	vTable		:table;
	
	
// freeProc is needed by table.destroy:

procedure freeProc; @noframe;
begin freeProc;
	ret();
end freeProc;


begin tTables;

	table.create( 16 );
	mov( esi, dynTable );
	stTable.create( 128 );
	vTable.create( 4096 );
	
	// Before adding any items to the table, make sure the iterators
	// don't iterate on the empty tables
	
	foreach stTable.item() do
	
		stderr.put( "stTable.item should not iterate on an empty list!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	
	endfor;
	
	foreach vTable.item() do
	
		stderr.put( "vTable.item should not iterate on an empty list!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	
	endfor;
	
	foreach dynTable.item() do
	
		stderr.put( "dynTable.item should not iterate on an empty list!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	
	endfor;
	
	// Verify that lookup returns NULL on an empty table:
	
	stTable.lookup( "Hello World" );
	if( eax <> NULL ) then
	
		stderr.put( "stTable.lookup should return NULL on an empty list!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	
	endif;
	
	vTable.lookup( "Hello World" );
	if( eax <> NULL ) then
	
		stderr.put( "vTable.lookup should return NULL on an empty list!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	
	endif;
	
	dynTable.lookup( "Hello World" );
	if( eax <> NULL ) then
	
		stderr.put( "dynTable.lookup should return NULL on an empty list!" nl );
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
	
	endif;
	
	// Okay, put some data in the tables:
	
	for( mov( 0, ecx); ecx < 1024; inc( ecx )) do
	
		str.put( id, "id", ecx );
		stTable.getNode( id );
		mov( eax, stNodes[ecx*4] );
		if( str.ne( (type tableNode [eax]).id, id) ) then
		
			stderr.put( "table.getNode error! (1)" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
		vTable.getNode( id );
		mov( eax, vNodes[ecx*4] );
		if( str.ne( (type tableNode [eax]).id, id) ) then
		
			stderr.put( "table.getNode error! (1)" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
		dynTable.getNode( id );
		mov( eax, dynNodes[ecx*4] );
		if( str.ne( (type tableNode [eax]).id, id) ) then
		
			stderr.put( "table.getNode error! (1)" nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
	
	endfor;
	
	// Let's make sure we can lookup all the strings we've created:
	
	
	for( mov( 0, ecx); ecx < 1024; inc( ecx )) do
	
		str.put( id, "id", ecx );
		stTable.lookup( id );
		if( eax <> stNodes[ecx*4] ) then
		
			stderr.put( "table.lookup error! (1)" nl );
			stderr.put( "ecx=", ecx, nl );
			stderr.put( "eax=", eax, nl );
			stderr.put( "node=", stNodes[ecx*4], nl );
			stderr.put( "id = ", id, nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
		vTable.lookup( id );
		if( eax <> vNodes[ecx*4] ) then
		
			stderr.put( "table.lookup error! (2)" nl );
			stderr.put( "ecx=", ecx, nl );
			stderr.put( "eax=", eax, nl );
			stderr.put( "node=", vNodes[ecx*4], nl );
			stderr.put( "id = ", id, nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
		dynTable.lookup( id );
		if( eax <> dynNodes[ecx*4] ) then
		
			stderr.put( "table.lookup error! (3)" nl );
			stderr.put( "ecx=", ecx, nl );
			stderr.put( "eax=", eax, nl );
			stderr.put( "node=", dynNodes[ecx*4], nl );
			stderr.put( "id = ", id, nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
	
	endfor;
	
	
	// Let's make sure we can lookup all the strings we've created
	// using the getNode method.
	
	
	for( mov( 0, ecx); ecx < 1024; inc( ecx )) do
	
		str.put( id, "id", ecx );
		stTable.getNode( id );
		if( eax <> stNodes[ecx*4] ) then
		
			stderr.put( "table.lookup error! (1)" nl );
			stderr.put( "ecx=", ecx, nl );
			stderr.put( "eax=", eax, nl );
			stderr.put( "node=", stNodes[ecx*4], nl );
			stderr.put( "id = ", id, nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
		vTable.getNode( id );
		if( eax <> vNodes[ecx*4] ) then
		
			stderr.put( "table.lookup error! (2)" nl );
			stderr.put( "ecx=", ecx, nl );
			stderr.put( "eax=", eax, nl );
			stderr.put( "node=", vNodes[ecx*4], nl );
			stderr.put( "id = ", id, nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		
		dynTable.getNode( id );
		if( eax <> dynNodes[ecx*4] ) then
		
			stderr.put( "table.lookup error! (3)" nl );
			stderr.put( "ecx=", ecx, nl );
			stderr.put( "eax=", eax, nl );
			stderr.put( "node=", dynNodes[ecx*4], nl );
			stderr.put( "id = ", id, nl );
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
	
	endfor;
	
	// Destroy the tables:
	
	stTable.destroy( &freeProc );
	dynTable.destroy( &freeProc );
	vTable.destroy( &freeProc );
	
	
	stderr.put( "tTables test suite succeeded!" nl );
	
end tTables;
