program tFileSys;
#include("stdlib.hhf")

const
	theDirectory	:string := "filesys_dir";
	
static
	msg			:str.strvar( 256 );
	dir			:str.strvar( 1024 );
	orig		:str.strvar( 1024 );
	fullPath1	:str.strvar( 1024 );
	fullPath2	:str.strvar( 1024 );
	
	handle	:dword;
	curFile	:string;
	
	files	:string[10];
	dirs	:string[10];
	sizes	:uns32[10];
	buffer	:byte[4096];
	
begin tFileSys;

	try
		// Delete the directory if it already exists:
		
		if( filesys.exists( theDirectory ) ) then
		
			if( filesys.isDir( theDirectory ) ) then
			
				filesys.cd( theDirectory );
				
				// Delete any files in the directory before
				// removing the directory. This code assumes
				// that we don't have to recurse into subdirectories
				// (as the only reason this directory should exist
				// is because this test program previously failed).
				
				foreach filesys.itemInCwd() do
				
					mov( eax, curFile );
					if( filesys.isFile( curFile )) then
					
						filesys.delete( curFile );
						
					elseif( filesys.isDir( curFile )) then
					
						filesys.rmdir( curFile );
						
						// else -- don't know what to do, let the rmdir
						// call below do the failing for us.
					
					endif;
					str.free( curFile );
					
				endfor;
				
				filesys.cd( ".." );
				
				// Remove the directory:
				
				filesys.rmdir( theDirectory );
				
			else
			
				// ??? It was a file, not a directory.
				// That's unexpected. Delete it.
				
				filesys.delete( theDirectory );
				
			endif;
			
		endif;

		
		filesys.gwd( orig );
		stderr.put( "Original directory is '", orig, "'" nl );
		
		filesys.mkdir( theDirectory );
		stderr.put( "Successfully made 'filesys'" nl );
		
		filesys.cd( theDirectory );
		filesys.gwd( dir );
		stdout.put
		( 
			"Successfully cd'd into and got directory:" nl
			"'", dir, "'" 
			nl 
		);
		
		filesys.exists( dir );
		if( !eax ) then
		
			stderr.put
			(
				"filesys.exists failed! Should have returned true for: " nl,
				dir, 
				nl
			);
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		filesys.isDir( dir );
		if( !eax ) then
		
			stderr.put
			(
				"filesys.isDir failed! Should have returned true for: " nl,
				dir, 
				nl
			);
			stdout.put( "Press Enter to Continue: " );
			stdin.readLn();
			os.exitProcess(1);
			
		endif;
		stderr.put( "filesys.exists/isDir test succeeded!" nl );
		
		// Create some new files so we can do some checks on them:
		
		for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
		
			str.alloc( 256 );
			mov( eax, files[ebx*4] );
			str.put( files[ebx*4], "file_", ebx );
			rand.range( 128, 4096 );
			mov( eax, sizes[ebx*4] );
			mov( eax, ecx );
			lea( edi, buffer );
			mov( bl, al );
			rep.stosb();
			
			fileio.openNew( files[ebx*4] );
			mov( eax, handle );
			fileio.write( handle, buffer, sizes[ebx*4] );
			fileio.close( handle );			
		
		endfor;
		
		// Create some new directories so we can do some checks on them:
		
		for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
		
			str.alloc( 256 );
			mov( eax, dirs[ebx*4] );
			str.put( dirs[ebx*4], "dir_", ebx );
			filesys.mkdir( dirs[ebx*4] );
		
		endfor;
		
		for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
		
			// First, check all the files we created:
			
			filesys.exists( files[ebx*4] );
			if( !eax ) then
			
				stderr.put
				(
					"filesys.exists failed! Should have returned true for: " nl,
					files[ebx*4], 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
		
			filesys.isFile( files[ebx*4] );
			if( !eax ) then
			
				stderr.put
				(
					"filesys.isFile failed! Should have returned true for: " nl,
					files[ebx*4], 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			filesys.size( files[ebx*4] );
			if( eax <> sizes[ebx*4] ) then
			
				stderr.put
				(
					"filesys.size failed (1)!" nl
					"Should have returned: ", sizes[ebx*4], nl
					"Instead returned: ", (type uns32 eax), nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			
			fileio.open( files[ebx*4], fileio.r );
			mov( eax, handle );
			filesys.size( handle );
			if( eax <> sizes[ebx*4] ) then
			
				stderr.put
				(
					"filesys.size failed (2)! Should have returned: ",
					sizes[ebx*4],
					", instead returned: ",
					(type uns32 eax),
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			fileio.close( handle );
			
			// Now check the directories we created:
			
			filesys.exists( dirs[ebx*4] );
			if( !eax ) then
			
				stderr.put
				(
					"filesys.exists failed! Should have returned true for: " nl,
					dirs[ebx*4], 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
		
			filesys.isDir( dirs[ebx*4] );
			if( !eax ) then
			
				stderr.put
				(
					"filesys.isDir failed! Should have returned true for: " nl,
					dirs[ebx*4], 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
				
		
		endfor;
		stderr.put( "filesys.size test succeeded!" nl );
		
		
		
		
		// Test renaming all the files:
		
		for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
		
			str.alloc( 256 );
			mov( eax, curFile );
			str.cpy( files[ebx*4], curFile );
			str.cat( "a", curFile );
			filesys.rename( files[ebx*4], curFile );
			mov( curFile, eax );
			str.free( files[ebx*4] );
			mov( eax, files[ebx*4] );
		
		endfor;
		
		// Recheck the file data:
		
		for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
		
			// First, check all the files we created:
			
			filesys.exists( files[ebx*4] );
			if( !eax ) then
			
				stderr.put
				(
					"filesys.exists failed(8)! Should have returned true for: " nl,
					files[ebx*4], 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
		
			filesys.isFile( files[ebx*4] );
			if( !eax ) then
			
				stderr.put
				(
					"filesys.isFile failed(8)! Should have returned true for: " nl,
					files[ebx*4], 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			filesys.size( files[ebx*4] );
			if( eax <> sizes[ebx*4] ) then
			
				stderr.put
				(
					"filesys.size failed (8)!" nl
					"Should have returned: ", sizes[ebx*4], nl
					"Instead returned: ", (type uns32 eax), nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			
			fileio.open( files[ebx*4], fileio.r );
			mov( eax, handle );
			filesys.size( handle );
			if( eax <> sizes[ebx*4] ) then
			
				stderr.put
				(
					"filesys.size failed (8)! Should have returned: ",
					sizes[ebx*4],
					", instead returned: ",
					(type uns32 eax),
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			fileio.close( handle );
		
		endfor;
		stderr.put( "filesys.rename test succeeded!" nl );
		
		
		
		
		// A quick check if itemInCwd and itemIn:
		
		foreach filesys.itemInCwd() do
		
			mov( eax, curFile );
			
			for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
			
				breakif
				( 
						str.eq( curFile, files[ebx*4] )
					||	str.eq( curFile, dirs[ebx*4] )
				);
				
			felse
			
				stderr.put
				( 
					"filesys.itemInCwd failed! Reported:", 
					curFile, 
					nl 
				);
				
			endfor;
		
		endfor;
		stderr.put( "filesys.itemInCwd test succeeded!" nl );
		
		
		
		foreach filesys.itemWithSuffix( ".", "a" ) do
		
			mov( eax, curFile );			
			for( mov( 0, ebx ); ebx < 10; inc( ebx )) do
			
				breakif
				( 
						str.eq( curFile, files[ebx*4] )
					||	str.eq( curFile, dirs[ebx*4] )
				);
				
			felse
			
				stderr.put
				( 
					"filesys.itemWithSuffix failed! Reported:", 
					curFile, 
					nl 
				);
				
			endfor;
		
		endfor;
		stderr.put( "filesys.itemWithSuffix test succeeded!" nl );
		
		
		
		
		
		
		// Make sure we can delete all the files:
		
		foreach filesys.fileInCwd() do
		
			mov( eax, curFile );
			filesys.delete( curFile );
			str.free( curFile );
			
		endfor;
		
		foreach filesys.fileIn( "." ) do
		
			mov( eax, curFile );
			filesys.exists( eax );
			if( eax ) then
			
				stderr.put
				(
					"filesys.delete failed!" nl
					"filesys.exists should have returned false for: " nl,
					curFile, 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			str.free( curFile );
			
		endfor;
		stdout.put( "filesys.delete succeeded!" nl );
		
		
		
		// Make sure we can delete all the directories:
		
		foreach filesys.dirInCwd() do
		
			mov( eax, curFile );
			filesys.rmdir( curFile );
			str.free( curFile );
			
		endfor;
		
		foreach filesys.dirIn( "." ) do
		
			mov( eax, curFile );
			filesys.exists( eax );
			if( eax ) then
			
				stderr.put
				(
					"filesys.rmdir failed!" nl
					"filesys.exists should have returned false for: " nl,
					curFile, 
					nl
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			str.free( curFile );
			
		endfor;
		
		
		filesys.cd( orig );
		filesys.rmdir( dir );
		filesys.cd( orig );	// Kludge required by FreeBSD for some reason.
		
	  anyexception
	  
	  	ex.exceptionMsg( eax, msg );
	  	stderr.put
		(
			"tFilesys unexpected exception: $", eax, " -- ", msg, nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);
		
	endtry;
	
	
	// Create the full path to our file:
	

	filesys.joinPaths( orig, "tFilesys.hla", fullPath2 );
	filesys.getFullPathName( "tFilesys.hla", fullPath1 );
	if( str.ne( fullPath1, fullPath2 )) then
	
		stderr.put
		(
			"filesys.getFullPathName failed!" nl
			"filesys.getFullPathName should have returned '", fullPath2, "'" nl
			"Instead, it returned '", fullPath1, "'" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endif;
	
	filesys.a_getFullPathName( "tFilesys.hla" );
	mov( eax, curFile );
	if( str.ne( curFile, fullPath2 )) then
	
		stderr.put
		(
			"filesys.a_getFullPathName failed!" nl
			"filesys.a_getFullPathName should have returned '", fullPath2, "'" nl
			"Instead, it returned '", curFile, "'" nl
		);
		stdout.put( "Press Enter to Continue: " );
		stdin.readLn();
		os.exitProcess(1);

	endif;
	str.free( curFile );
	stderr.put
	( 
		"filesys.getFullPathName and filesys.a_getFullPathName succeeded!" nl 
	);
	
	
	stderr.put( "tFilesys Succeeded!" nl );


end tFileSys;

