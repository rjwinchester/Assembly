program coalesce_test;
#include( "stdlib.hhf" )

type
	bits_t:
		record
			maskValue	:dword;
			resultValue	:dword;
		endrecord;
		
const
	ValToTest	:dword := %11111111_10101010_11001100_11110000;
	
	initb	:dword [32] :=
			[
				1,3,7,$f,$1f,$3f,$7f,$ff,
				$1ff,$3ff,$7ff,$fff,
				$1fff,$3fff,$7fff,$ffff,
				$1_ffff,$3_ffff,$7_ffff,$f_ffff,
				$1f_ffff,$3f_ffff,$7f_ffff,$ff_ffff,
				$1ff_ffff,$3ff_ffff,$7ff_ffff,$fff_ffff,
				$1fff_ffff,$3fff_ffff,$7fff_ffff, $FFFF_FFFF
			];
			
	bc_c :bits_t[] :=
		[
			#for( j := 0 to 31 )
			
				#for( i := 0 to 31-j )
				
					?c := (ValToTest >> i) & initb[j];
					bits_t:[ initb[j] << i, c],
					
				#endfor

			#endfor
			bits_t:
			[ 
				%11111111_10101010_11001100_11110000, 
				%1111_1111_1111_1111_1111 
			],
			bits_t:
			[ 
				@dword( !%11111111_10101010_11001100_11110000 ), 
				0 
			]
		];
		
		
static
	bc : bits_t[ @elements( bc_c ) ] := bc_c;
	
begin coalesce_test;

	
		for( mov( 0, ecx ); ecx<32; inc(ecx) )do
		
			mov( bc.maskValue[ecx*8], eax );
			bits.coalesce( ValToTest, eax );
			if( eax <> bc.resultValue[ecx*8] ) then
			
				stderr.put
				( 
					nl nl 
					"***************************************************" nl
					"bit coalesce failed! eax=", eax, " ecx=", ecx, nl
					"***************************************************" nl
					nl 
				);
				stdout.put( "Press Enter to Continue: " );
				stdin.readLn();
				os.exitProcess(1);
				
			endif;
			
		endfor;
		os.exitProcess(0);
		
end coalesce_test;

													