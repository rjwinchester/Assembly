program fputhex_test;
#include( "stdlib.hhf" )

var
	i			:int32;

static
	tbVal		:tbyte;
	tbVal2		:tbyte;
	
begin fputhex_test;

	mov( $1234_5678, eax );
	mov( eax, (type dword tbVal ));
	mov( eax, (type dword tbVal[4] ));
	mov( $90ab, (type word tbVal[8] ));
	
	mov( eax, (type dword tbVal2));
	mov( 0, (type dword tbVal2[4]));
	mov( 0, (type word tbVal2[8])); 

	conv.setUnderscores( false );

	stderr.puttb( tbVal );	
	stderr.newln();
	stderr.puttb( tbVal2 );	
	stderr.newln();
	stderr.newln();

	stderr.puttbSize( tbVal, 30, '.' );	
	stderr.newln();
	stderr.puttbSize( tbVal, -30, '.' );	
	stderr.newln();
	stderr.newln();

	stderr.puttbSize( tbVal2, 12, '.' );	
	stderr.newln();
	stderr.puttbSize( tbVal2, -12, '.' );	
	stderr.newln();
	stderr.newln();

	conv.setUnderscores( true );
	
	stderr.puttb( tbVal );	
	stderr.newln();
	stderr.puttb( tbVal2 );	
	stderr.newln();
	stderr.puttbSize( tbVal, 30, '.' );	
	stderr.newln();
	stderr.puttbSize( tbVal, -30, '.' );	
	stderr.newln();
	stderr.puttbSize( tbVal2, 12, '.' );	
	stderr.newln();
	stderr.puttbSize( tbVal2, -12, '.' );	
	stderr.newln();
	stderr.newln();

	stderr.putb( 0 );
	stderr.newln();
	stderr.putb( 1 );
	stderr.newln();
	stderr.putb( $7f );
	stderr.newln();
	stderr.putb( $80 );
	stderr.newln();
	stderr.putb( $FF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.putbSize( 0, i, '.' );
		stderr.newln();
		stderr.putbSize( $10, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.putw( 0 );
	stderr.newln();
	stderr.putw( $10 );
	stderr.newln();
	stderr.putw( $200 );
	stderr.newln();
	stderr.putw( $7fff );
	stderr.newln();
	stderr.putw( $8000 );
	stderr.newln();
	stderr.putw( $FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.putwSize( 0, i, '.' );
		stderr.newln();
		stderr.putwSize( $10, i, '.' );
		stderr.newln();
		stderr.putwSize( $100, i, '.' );
		stderr.newln();
		stderr.putwSize( $1000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.putd( 0 );
	stderr.newln();
	stderr.putd( $10 );
	stderr.newln();
	stderr.putd( $200 );
	stderr.newln();
	stderr.putd( $3000 );
	stderr.newln();
	stderr.putd( $4_0000 );
	stderr.newln();
	stderr.putd( $50_0000 );
	stderr.newln();
	stderr.putd( $600_0000 );
	stderr.newln();
	stderr.putd( $7000_0000 );
	stderr.newln();
	stderr.putd( $7fff_ffff );
	stderr.newln();
	stderr.putd( $8000_0000 );
	stderr.newln();
	stderr.putd( $FFFF_FFFF );
	stderr.newln();
	stderr.newln();
	for( mov( -10, i); i<=10; inc(i)) do

		stderr.putdSize( 0, i, '.' );
		stderr.newln();
		stderr.putdSize( $10, i, '.' );
		stderr.newln();
		stderr.putdSize( $100, i, '.' );
		stderr.newln();
		stderr.putdSize( $1000, i, '.' );
		stderr.newln();
		stderr.putdSize( $1_0000, i, '.' );
		stderr.newln();
		stderr.putdSize( $10_0000, i, '.' );
		stderr.newln();
		stderr.putdSize( $100_0000, i, '.' );
		stderr.newln();
		stderr.putdSize( $1000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.putq( 0 );
	stderr.newln();
	stderr.putq( $10 );
	stderr.newln();
	stderr.putq( $200 );
	stderr.newln();
	stderr.putq( $3000 );
	stderr.newln();
	stderr.putq( $4_0000 );
	stderr.newln();
	stderr.putq( $50_0000 );
	stderr.newln();
	stderr.putq( $600_0000 );
	stderr.newln();
	stderr.putq( $7000_0000 );
	stderr.newln();
	stderr.putq( $8_0000_0000 );
	stderr.newln();
	stderr.putq( $90_0000_0000 );
	stderr.newln();
	stderr.putq( $A00_0000_0000 );
	stderr.newln();
	stderr.putq( $B000_0000_0000 );
	stderr.newln();
	stderr.putq( $C_0000_0000_0000 );
	stderr.newln();
	stderr.putq( $D0_0000_0000_0000 );
	stderr.newln();
	stderr.putq( $E00_0000_0000_0000 );
	stderr.newln();
	stderr.putq( $F000_0000_0000_0000 );
	stderr.newln();
	stderr.putq( $7fff_ffff_ffff_ffff );
	stderr.newln();
	stderr.putq( $8000_0000_0000_0000 );
	stderr.newln();
	stderr.putq( $FFFF_FFFF_FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -20, i); i<=20; inc(i)) do

		stderr.putqSize( 1, i, '.' );
		stderr.newln();
		stderr.putqSize( $10, i, '.' );
		stderr.newln();
		stderr.putqSize( $100, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $10_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $100_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.putl( 0 );
	stderr.newln();
	stderr.putl( $10 );
	stderr.newln();
	stderr.putl( $200 );
	stderr.newln();
	stderr.putl( $3000 );
	stderr.newln();
	stderr.putl( $4_0000 );
	stderr.newln();
	stderr.putl( $50_0000 );
	stderr.newln();
	stderr.putl( $600_0000 );
	stderr.newln();
	stderr.putl( $7000_0000 );
	stderr.newln();
	stderr.putl( $8_0000_0000 );
	stderr.newln();
	stderr.putl( $90_0000_0000 );
	stderr.newln();
	stderr.putl( $A00_0000_0000 );
	stderr.newln();
	stderr.putl( $B000_0000_0000 );
	stderr.newln();
	stderr.putl( $C_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $D0_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $E00_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $F000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $1_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $20_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $300_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $4000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $5_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $60_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $700_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $8000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $9_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $A0_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $B00_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $C000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $D_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $E0_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $F00_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $1000_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	stderr.newln();
	stderr.putl( $8000_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -40, i); i<=40; inc(i)) do

		stderr.putlSize( 0, i, '.' );
		stderr.newln();
		stderr.putlSize( $10, i, '.' );
		stderr.newln();
		stderr.putlSize( $100, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	conv.setUnderscores( false );


	stderr.putb( 0 );
	stderr.newln();
	stderr.putb( $7f );
	stderr.newln();
	stderr.putb( $80 );
	stderr.newln();
	stderr.putb( $FF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.putbSize( 0, i, '.' );
		stderr.newln();
		stderr.putbSize( $10, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;

	stderr.putw( 0 );
	stderr.newln();
	stderr.putw( $7fff );
	stderr.newln();
	stderr.putw( $8000 );
	stderr.newln();
	stderr.putw( $FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.putwSize( 0, i, '.' );
		stderr.newln();
		stderr.putwSize( $10, i, '.' );
		stderr.newln();
		stderr.putwSize( $100, i, '.' );
		stderr.newln();
		stderr.putwSize( $1000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;

	stderr.putd( 0 );
	stderr.newln();
	stderr.putd( $7fff_ffff );
	stderr.newln();
	stderr.putd( $8000_0000 );
	stderr.newln();
	stderr.putd( $FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.putdSize( 0, i, '.' );
		stderr.newln();
		stderr.putdSize( $10, i, '.' );
		stderr.newln();
		stderr.putdSize( $100, i, '.' );
		stderr.newln();
		stderr.putdSize( $1000, i, '.' );
		stderr.newln();
		stderr.putdSize( $1_0000, i, '.' );
		stderr.newln();
		stderr.putdSize( $10_0000, i, '.' );
		stderr.newln();
		stderr.putdSize( $100_0000, i, '.' );
		stderr.newln();
		stderr.putdSize( $1000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.putq( 0 );
	stderr.newln();
	stderr.putq( $7fff_ffff_ffff_ffff );
	stderr.newln();
	stderr.putq( $8000_0000_0000_0000 );
	stderr.newln();
	stderr.putq( $FFFF_FFFF_FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -20, i); i<=20; inc(i)) do

		stderr.putqSize( 0, i, '.' );
		stderr.newln();
		stderr.putqSize( $10, i, '.' );
		stderr.newln();
		stderr.putqSize( $100, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $10_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $100_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putqSize( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.putl( 0 );
	stderr.newln();
	stderr.putl( $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	stderr.newln();
	stderr.putl( $8000_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.putl( $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	stderr.newln();

	for( mov( -40, i); i<=40; inc(i)) do

		stderr.putlSize( 0, i, '.' );
		stderr.newln();
		stderr.putlSize( $10, i, '.' );
		stderr.newln();
		stderr.putlSize( $100, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.putlSize( $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();
	stderr.newln();
	stderr.newln();


////////////////////////////////////

	stderr.put( "******************************************" nl nl );
	 
	mov( $1234_5678, eax );
	mov( eax, (type dword tbVal ));
	mov( eax, (type dword tbVal[4] ));
	mov( $90ab, (type word tbVal[8] ));
	
	mov( eax, (type dword tbVal2));
	mov( 0, (type dword tbVal2[4]));
	mov( 0, (type word tbVal2[8])); 

	conv.setUnderscores( true );

	stderr.put( "puth80: " nl );
	
	stderr.puth80( tbVal );	
	stderr.newln();
	stderr.puth80( tbVal2 );	
	stderr.newln();
	stderr.newln();

	stderr.puth80Size( tbVal, 30, '.' );	
	stderr.newln();
	stderr.puth80Size( tbVal, -30, '.' );	
	stderr.newln();
	stderr.newln();

	stderr.puth80Size( tbVal2, 12, '.' );	
	stderr.newln();
	stderr.puth80Size( tbVal2, -12, '.' );	
	stderr.newln();
	stderr.newln();

	conv.setUnderscores( true );
	
	stderr.puth80( tbVal );	
	stderr.newln();
	stderr.puth80( tbVal2 );	
	stderr.newln();
	stderr.puth80Size( tbVal, 30, '.' );	
	stderr.newln();
	stderr.puth80Size( tbVal, -30, '.' );	
	stderr.newln();
	stderr.puth80Size( tbVal2, 12, '.' );	
	stderr.newln();
	stderr.puth80Size( tbVal2, -12, '.' );	
	stderr.newln();
	stderr.newln();

	stderr.put( "puth8: " nl );

	stderr.puth8( 0 );
	stderr.newln();
	stderr.puth8( 1 );
	stderr.newln();
	stderr.puth8( $7f );
	stderr.newln();
	stderr.puth8( $80 );
	stderr.newln();
	stderr.puth8( $FF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.puth8Size( 0, i, '.' );
		stderr.newln();
		stderr.puth8Size( $10, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.put( "puth16: " nl );
	stderr.puth16( 0 );
	stderr.newln();
	stderr.puth16( $10 );
	stderr.newln();
	stderr.puth16( $200 );
	stderr.newln();
	stderr.puth16( $7fff );
	stderr.newln();
	stderr.puth16( $8000 );
	stderr.newln();
	stderr.puth16( $FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.puth16Size( 0, i, '.' );
		stderr.newln();
		stderr.puth16Size( $10, i, '.' );
		stderr.newln();
		stderr.puth16Size( $100, i, '.' );
		stderr.newln();
		stderr.puth16Size( $1000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.put( "puth32: " nl );
	stderr.puth32( 0 );
	stderr.newln();
	stderr.puth32( $10 );
	stderr.newln();
	stderr.puth32( $200 );
	stderr.newln();
	stderr.puth32( $3000 );
	stderr.newln();
	stderr.puth32( $4_0000 );
	stderr.newln();
	stderr.puth32( $50_0000 );
	stderr.newln();
	stderr.puth32( $600_0000 );
	stderr.newln();
	stderr.puth32( $7000_0000 );
	stderr.newln();
	stderr.puth32( $7fff_ffff );
	stderr.newln();
	stderr.puth32( $8000_0000 );
	stderr.newln();
	stderr.puth32( $FFFF_FFFF );
	stderr.newln();
	stderr.newln();
	for( mov( -10, i); i<=10; inc(i)) do

		stderr.puth32Size( 0, i, '.' );
		stderr.newln();
		stderr.puth32Size( $10, i, '.' );
		stderr.newln();
		stderr.puth32Size( $100, i, '.' );
		stderr.newln();
		stderr.puth32Size( $1000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $1_0000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $10_0000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $100_0000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $1000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();
				 
	stderr.put( "puth64: " nl );
	stderr.puth64( 0 );
	stderr.newln();
	stderr.puth64( $10 );
	stderr.newln();
	stderr.puth64( $200 );
	stderr.newln();
	stderr.puth64( $3000 );
	stderr.newln();
	stderr.puth64( $4_0000 );
	stderr.newln();
	stderr.puth64( $50_0000 );
	stderr.newln();
	stderr.puth64( $600_0000 );
	stderr.newln();
	stderr.puth64( $7000_0000 );
	stderr.newln();
	stderr.puth64( $8_0000_0000 );
	stderr.newln();
	stderr.puth64( $90_0000_0000 );
	stderr.newln();
	stderr.puth64( $A00_0000_0000 );
	stderr.newln();
	stderr.puth64( $B000_0000_0000 );
	stderr.newln();
	stderr.puth64( $C_0000_0000_0000 );
	stderr.newln();
	stderr.puth64( $D0_0000_0000_0000 );
	stderr.newln();
	stderr.puth64( $E00_0000_0000_0000 );
	stderr.newln();
	stderr.puth64( $F000_0000_0000_0000 );
	stderr.newln();
	stderr.puth64( $7fff_ffff_ffff_ffff );
	stderr.newln();
	stderr.puth64( $8000_0000_0000_0000 );
	stderr.newln();
	stderr.puth64( $FFFF_FFFF_FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -20, i); i<=20; inc(i)) do

		stderr.puth64Size( 1, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();
		  
	stderr.put( "puth128: " nl );
	stderr.puth128( 0 );
	stderr.newln();
	stderr.puth128( $10 );
	stderr.newln();
	stderr.puth128( $200 );
	stderr.newln();
	stderr.puth128( $3000 );
	stderr.newln();
	stderr.puth128( $4_0000 );
	stderr.newln();
	stderr.puth128( $50_0000 );
	stderr.newln();
	stderr.puth128( $600_0000 );
	stderr.newln();
	stderr.puth128( $7000_0000 );
	stderr.newln();
	stderr.puth128( $8_0000_0000 );
	stderr.newln();
	stderr.puth128( $90_0000_0000 );
	stderr.newln();
	stderr.puth128( $A00_0000_0000 );
	stderr.newln();
	stderr.puth128( $B000_0000_0000 );
	stderr.newln();
	stderr.puth128( $C_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $D0_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $E00_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $F000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $1_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $20_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $300_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $4000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $5_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $60_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $700_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $8000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $9_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $A0_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $B00_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $C000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $D_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $E0_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $F00_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $1000_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	stderr.newln();
	stderr.puth128( $8000_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -40, i); i<=40; inc(i)) do

		stderr.puth128Size( 0, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	conv.setUnderscores( true );


	stderr.put( "puth8_: " nl );
	
	stderr.puth8( 0 );
	stderr.newln();
	stderr.puth8( $7f );
	stderr.newln();
	stderr.puth8( $80 );
	stderr.newln();
	stderr.puth8( $FF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.puth8Size( 0, i, '.' );
		stderr.newln();
		stderr.puth8Size( $10, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;

	stderr.put( "puth16_: " nl );
	stderr.puth16( 0 );
	stderr.newln();
	stderr.puth16( $7fff );
	stderr.newln();
	stderr.puth16( $8000 );
	stderr.newln();
	stderr.puth16( $FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.puth16Size( 0, i, '.' );
		stderr.newln();
		stderr.puth16Size( $10, i, '.' );
		stderr.newln();
		stderr.puth16Size( $100, i, '.' );
		stderr.newln();
		stderr.puth16Size( $1000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;

	stderr.put( "puth32_: " nl );
	stderr.puth32( 0 );
	stderr.newln();
	stderr.puth32( $7fff_ffff );
	stderr.newln();
	stderr.puth32( $8000_0000 );
	stderr.newln();
	stderr.puth32( $FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -10, i); i<=10; inc(i)) do

		stderr.puth32Size( 0, i, '.' );
		stderr.newln();
		stderr.puth32Size( $10, i, '.' );
		stderr.newln();
		stderr.puth32Size( $100, i, '.' );
		stderr.newln();
		stderr.puth32Size( $1000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $1_0000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $10_0000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $100_0000, i, '.' );
		stderr.newln();
		stderr.puth32Size( $1000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.put( "puth64_: " nl );
	stderr.puth64( 0 );
	stderr.newln();
	stderr.puth64( $7fff_ffff_ffff_ffff );
	stderr.newln();
	stderr.puth64( $8000_0000_0000_0000 );
	stderr.newln();
	stderr.puth64( $FFFF_FFFF_FFFF_FFFF );
	stderr.newln();
	stderr.newln();

	for( mov( -20, i); i<=20; inc(i)) do

		stderr.puth64Size( 0, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth64Size( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();

	stderr.put( "puth128_: " nl );
	stderr.puth128( 0 );
	stderr.newln();
	stderr.puth128( $7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff );
	stderr.newln();
	stderr.puth128( $8000_0000_0000_0000_0000_0000_0000_0000 );
	stderr.newln();
	stderr.puth128( $FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF );
	stderr.newln();

	for( mov( -40, i); i<=40; inc(i)) do

		stderr.puth128Size( 0, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $10_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $100_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.puth128Size( $1000_0000_0000_0000_0000_0000_0000_0000, i, '.' );
		stderr.newln();
		stderr.newln();

	endfor;
	stderr.newln();
	stderr.newln();
	stderr.newln();


end fputhex_test;

													