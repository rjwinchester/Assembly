program spute_test; 
#includeOnce( "stdlib.hhf" )
#includeOnce( "sockets.hhf" )
#includeOnce( "sleep.hhf" )

static
	quit		:dword := 0;
	hostIPadrs	:dword;
	s			:vServer_t;
	timeout		:thunk;
	calls		:dword := 0;
	
	ipAdrsStr	:str.strvar(256);
	cmdLine		:str.strvar(256);
	exmsg		:str.strvar(256);
	
	r32			:real32 := 0.0;
	r64			:real64 := 0.0;
	r80			:real80 := 0.0;
	r32a		:real32 := 1.0;
	r64a		:real64 := 1.0;
	r80a		:real80 := 1.0;
	r32b		:real32 := 1.0e-6;
	r64b		:real64 := 1.0e-15;
	r80b		:real80 := 1.0e-18;
	r80c		:real80 := 1.0e-18;
	r80d		:real80 := 1.0e-18;
	r80pi		:real80;
	
	
	procedure connected( parm:dword );
		@nodisplay;
		@nostackalign;
		@noframe;
	var
		handle		:dword;
		bufIndex	:dword;
		object		:pointer to vServer_t;
		ipAdrs		:hla.sockaddr;
		
		buffer		:char[64];
		
	begin connected;

		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		pushad();
		pushfd();
		
		mov( eax, handle );
		mov( esi, object );
		
		/*****************************************************************/
		

		object.puts( "Outputting zeros:" nl nl );
		object.putr32( r32, 6, 2, ' ' );
		object.newln();

		object.putr64( r64, 8, 4, ' ' );
		object.newln();

		object.putr80( r80, 10, 6, ' ' );
		object.newln();
		object.newln();
		object.newln();

		object.puts( "Real32 Powers of Ten: " nl nl );
		for( mov( -6, ecx ); (type int32 ecx) < 0; inc( ecx )) do

			object.putr32( r32b, 11, 6, ' ' );
			object.newln();

			fld( r32b );
			fld( 10.0 );
			fmulp();
			fstp( r32b );

		endfor;

		fld1();
		fstp( r32b );
		for( mov( 0, ecx ); ecx < 10; inc( ecx )) do

			object.putr32( r32b, 14, 2, ' ' );
			object.newln();

			fld( r32b );
			fld( 10.0 );
			fmulp();
			fstp( r32b );

		endfor;
		object.newln();
		object.newln();
		object.newln();


		object.puts( "Real64 Powers of Ten: " nl nl );
		for( mov( -15, ecx ); (type int32 ecx) < 0; inc( ecx )) do

			object.putr64( r64b, 18, 15, ' ' );
			object.newln();

			fld( r64b );
			fld( 10.0 );
			fmulp();
			fstp( r64b );

		endfor;

		fld1();
		fstp( r64b );
		for( mov( 0, ecx ); ecx < 15; inc( ecx )) do

			object.putr64( r64b, 32, 15, ' ' );
			object.newln();

			fld( r64b );
			fld( 10.0 );
			fmulp();
			fstp( r64b );

		endfor;
		object.newln();
		object.newln();
		object.newln();


		object.puts( "Real80 Powers of Ten: " nl nl );
		for( mov( -18, ecx ); (type int32 ecx) < 0; inc( ecx )) do

			object.putr80( r80b, 21, 12, ' ' );
			object.newln();

			fld( r80b );
			fld( 10.0 );
			fmulp();
			fstp( r80b );

		endfor;

		fld1();
		fstp( r80b );
		for( mov( 0, ecx ); ecx < 18; inc( ecx )) do

			object.putr80( r80b, 21, 1, ' ' );
			object.newln();

			fld( r80b );
			fld( 10.0 );
			fmulp();
			fstp( r80b );

		endfor;
		object.newln();
		object.newln();
		object.newln();



		object.puts( "Real80 Digit Sums: " nl nl );
		fld( r80c );
		fstp( r80b );
		for( mov( 0, ecx ); ecx < 18; inc( ecx )) do

			object.putr80( r80b, 21, 12, ' ' );
			object.newln();

			fld( r80b );
			fld( 10.0 );
			fmulp();

			fld( r80c );
			fld( r80d );
			faddp();
			fld( st0 );
			fstp( r80d );
			faddp();
			fstp( r80b );

		endfor;
		object.newln();
		object.newln();
		object.newln();


		// Output values in a field width that is too small so
		// we can test the "####" output:

		object.putr32( 123456789.0, 10, 4, ' ' );
		object.newln();
		object.putr64( 123456789.0, 10, 4, ' ' );
		object.newln();
		object.putr80( 123456789.0, 10, 4, ' ' );
		object.newln();
				
		/*****************************************************************/
		
		object.close();
		mov( 1, quit );
		popfd();
		popad();
		leave();
		ret( _parms_ );
		
	end connected;
	
begin spute_test; 

	thunk timeout :=
		#{
			// On entry to thunk, EAX contains the address of the timeout
			// variable. Set this as desired for the timeout (1 second,
			// in this case).
			
			mov( 1, (type hla.timeval [eax]).tv_sec );
			stderr.put( "server", nl );
			
			// On the second call to this thunk, start the client application:
			
			cmp( calls, 1 );
			jne dontRunApp;
			
				str.put
				(
					cmdLine,
					"wclient.exe socket_putr.txt ",
					ipAdrsStr,
					" 988d"
				);
				stdout.put( "cmd=", cmdLine, "'" nl );
				os.bkgnd( cmdLine );
			
			dontRunApp:
			inc( calls );
			mov( quit, eax );
				
		}#;
	
	try
	
		s.create();
		
		sock.hostAdrs(); 
		mov( eax, hostIPadrs );
		sock.ipToStr( eax, ipAdrsStr );
		
		s.start
		( 
			hostIPadrs, 
			$988d, 
			timeout,
			&connected,
			0
		);
		
	  anyexception
	  
	  	ex.exceptionMsg( eax, exmsg );
	  	stdout.put( "Server Exception: ", exmsg, nl );
		fileio.close( s.handle );
		s.destroy();
		
	endtry;
	while( !filesys.exists( "wclient.done" )) do
	
		os.sleep( 1 );
		
	endwhile;
	os.sleep( 1 );
	filesys.delete( "wclient.done" );
	 
end spute_test; 
