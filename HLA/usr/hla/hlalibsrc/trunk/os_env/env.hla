
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde




unit envUnit;

#include( "env.hhf" )
#include( "strings.hhf" )
#include( "patterns.hhf" )
#include( "conv.hhf" )
#include( "excepts.hhf" )
#include( "stdio.hhf" )
#include( "stdout.hhf" )
#include( "memory.hhf" )


#if( os.win32 )

	static
		GetEnvironmentVariable:
			procedure( varName:string; var buffer:var; bufSize:uns32 );
			@stdcall; 
			@external( "__imp__GetEnvironmentVariableA@12" );
		
#endif

#if( os.linux | os.freeBSD | os.macOS  )

static
	envp : dword; @external( "_envp__hla_" );
	
procedure env.get( envVar:string; dest:string );
	@nostackalign;
	@nodisplay;
var
	rtnResult:dword;

begin get;

	push( ecx );
	push( edx );
	push( esi );
	push( edi );
	pushfd();
	cld();
	mov( false, rtnResult );
	begin FoundEnvStr;
	
		mov( envp, edx );
		while( ( type dword [edx]) <> NULL) do
	
			// See if the environment variable name matches the
			// string at the beginning of the line:

			mov( [edx], esi );
			mov( envVar, edi );
			mov( (type str.strRec [edi]).length, ecx );
			repe.cmpsb();
			if( @e ) then
		
				// Okay, we've matched the variable name prefix, now
				// verify that an "=" immediately follows the variable name:
			
				if( (type char [esi]) = '=' ) then
			
					inc( esi );
					str.cpyz( esi, dest );
					mov( true, rtnResult );
					exit FoundEnvStr;
					
				endif;
			
			endif;
			
			// Skip to next environment string:
			
			add( 4, edx );		
	
		endwhile;
	
	end FoundEnvStr;
	popfd();
	pop( edi );
	pop( esi );
	pop( edx );
	pop( ecx );
	mov( rtnResult, eax );
		
end get;


// env.a_get -
//
//	Returns an environment string allocated on the heap that is
// associated with an environment variable passed as a parameter.
// If no such variable exists, this function returns NULL in EAX.

procedure env.a_get( envVar:string );
	@nodisplay;
	@noalignstack;
	
var
	dest:string;
	
begin a_get;
	
	tstralloc( 4096 );
	mov( eax, dest );
	if( env.get( envVar, (type string eax)) ) then

		str.a_cpy( dest );

	else

		xor( eax, eax );	// Return NULL if no such env var.

	endif;
	
end a_get;
		


#elseif( os.win32 )

// env.get-
//
//	Returns an environment variable's value in the specified
// destination string (if it exists). Returns true/false in
// EAX depending on whether the env string was found.

procedure env.get( envVar:string; dest:string );
	@nostackalign;
	@nodisplay;
var
	localBuffer:char[4096];
begin get;

	push( ecx );
	push( edx );
	
	GetEnvironmentVariable( envVar, localBuffer, 4095 );

	mov( dest, edx );

	// EAX contains zero if GetEnvironmentVariable
	// did not find the env variable string.

	if( eax <> 0 ) then
	
		// If the string is too long to fit in dest, then
		// str.cpyz will raise the exception:

		lea( eax, localBuffer );
		str.cpyz( eax, dest );
		mov( true, eax );	// Return true if we found the var.

	endif;
	pop( edx );
	pop( ecx );
		
end get;
		
// env.a_get
//
//	Returns an env variable's string data in a string allocated
// on the heap (with the pointer to the string in EAX). If no
// such string exists, this function return NULL in EAX.

procedure env.a_get( envVar:string );
	@nostackalign;
	@nodisplay;
var
	localBuffer:char[4096];
	
begin a_get;

	push( ecx );
	push( edx );
	
	GetEnvironmentVariable( envVar, localBuffer, 4095 );
	if( eax <> 0 ) then
	
		lea( eax, localBuffer );
		str.a_cpyz( eax );
		
	endif;
	pop( edx );
	pop( ecx );
		
end a_get;
		

#endif



end envUnit;
