// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/7/2008, by Randall Hyde


unit sockets;
?@nostackalign := true;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "sockets.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "os.hhf" )

#if( os.win32 )

	#include( "w.hhf" )

	#if( @thread )

		static
			align( 4 );
			
			socketCS		:w.CRITICAL_SECTION;
			needSockCSinit	:boolean := true;
			
			
		procedure _hla.sockCSenter;
		begin sockCSenter;
		
			// Must auto-initialize the critical section:
			
			cmp( needSockCSinit, true );
			jne alreadyInitialized;
			
				w.InitializeCriticalSection( socketCS );
				mov( false, needSockCSinit );
				
			alreadyInitialized:
			w.EnterCriticalSection( socketCS );	
			ret();
			
		end sockCSenter;

		procedure _hla.sockCSleave;
		begin sockCSleave;
		
			w.LeaveCriticalSection( socketCS );
			ret();
			
		end sockCSleave;
	
	#endif
			

#endif

static
	align( 4 );
	sock.socketCnt	:uns32 := 0;



procedure sock.socketInit;
var
	#if( os.win32 )
	
		wVersionRequested	:word;
		lpWSAData			:w.WSADATA;
		
	#endif
	
begin socketInit;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	#if( os.win32 )
		
		push( eax );
		push( ecx );
		push( edx );
		
		#if( @thread )
		
			_hla.sockCSenter();
			
		#endif
		add( 1, sock.socketCnt );
		cmp( sock.socketCnt, 1 );
		jne noInit;
		
			// Want at least v1.1 of winsock:
			
			mov( $0101, wVersionRequested );
			w.WSAStartup( wVersionRequested, lpWSAData );
		
		noInit:
		#if( @thread )
		
			_hla.sockCSleave();
			
		#endif
		pop( edx );
		pop( ecx );
		pop( eax );
				
	#endif	
	leave();
	ret( _parms_ );
	
end socketInit;


end sockets;
