
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit consoleUnit;

#include( "console.hhf" )
#includeonce( "os.hhf" )
#includeonce( "stdout.hhf" )

?@nodisplay := true;
?@noalignstack := true;	

#if( os.linux | os.freeBSD | os.macOS )
	

	// ndown - moves the cursor down n lines from its current position.
	//
	// Linux:
	// ANSI ESC sequence is ESC "[2" {count} "B"
	// where {count} represents a string of digits that specify
	// the number of lines to move the cursor.

	procedure console.ndown( n:uns32 );	@noframe;
	var
		output	:char[16];
 
	begin ndown;
	
		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		push( eax );
		push( ebx );
		push( ecx );
		push( edx );
		
		mov( #$1b, output[0] );
		mov( '[', output[1] );
		lea( ecx, output[2] );		
		console.utoa( n, ecx );
		mov( 'B', (type char [ecx]));
		inc( ecx );
		
		lea( edx, output );		// Address of output buffer
		xchg( ecx, edx );
		sub( ecx, edx );		// Length of string
		stdout.write( [ecx], edx );
		
		pop( edx );
		pop( ecx );
		pop( ebx );
		pop( eax );
		leave();
		ret( _parms_ );
		
	end ndown;
	
#elseif( os.win32 )

	#include( "stdout.hhf" )
	
	type 
	 	COORD: record
			x: word;
			y: word;
		endrecord;


	 	SMALL_RECT: record
			Left: word;
			Top: word;
			Right: word;
			Bottom: word;
		endrecord;
	
	 	CHARTYPE: union
			UnicodeChar: word;
			AsciiChar: byte;
		endunion;

	 	CHAR_INFO: record
			CharVal: CHARTYPE;
			Attributes: word;
		endrecord;

		CONSOLE_SCREEN_BUFFER_INFO: record

			dwSize: COORD;
			dwCursorPosition: COORD;
			wAttributes: word;
			srWindow: SMALL_RECT;
			dwMaximumWindowSize: COORD;
			
		endrecord;
		
	static
		FillConsoleOutputAttribute: procedure
		( 
				hConsoleOutput			:dword; 
				wAttribute				:word; 
				nLength					:dword; 
				dwWriteCoord			:COORD; 
			var	lpNumberOfAttrsWritten	:dword
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__FillConsoleOutputAttribute@20" );

		FillConsoleOutputCharacter: procedure
		( 
			hConsoleOutput:				dword; 
			cCharacter:					char; 
			nLength:					dword; 
			dwWriteCoord:				COORD; 
			var	lpNumberOfAttrsWritten:	dword
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__FillConsoleOutputCharacterA@20" );

			
		GetConsoleScreenBufferInfo: procedure
		( 
				handle:	dword; 
			var csbi:	CONSOLE_SCREEN_BUFFER_INFO
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__GetConsoleScreenBufferInfo@8" );
			
		SetConsoleCursorPosition: procedure
		( 
			hConsoleOutput:		dword;
			dwCursorPosition:	COORD	
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__SetConsoleCursorPosition@8" );
		
		ScrollConsoleScreenBuffer: procedure
		( 
				hConsoleOutput:			dword; 
			var	lpScrollRectangle:		SMALL_RECT; 
			var	lpClipRectangle:		SMALL_RECT; 
				dwDestinationOrigin:	COORD; 
			var	lpFill:					CHAR_INFO
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__ScrollConsoleScreenBufferA@20" );
	

	
	
	procedure console.ndown( n:uns32 ); @nodisplay; @noframe;
	var
		handle			:dword;
		csbi			:CONSOLE_SCREEN_BUFFER_INFO;
		
	begin ndown;

		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		pushad();
		
		stdout.handle();
		mov( eax, handle );
		
		// Verify that the coordinates are within range:
		
		GetConsoleScreenBufferInfo( handle, csbi );
		
		
		// Bump up the y coordinate value by one:
		
		movzx( csbi.dwCursorPosition.y, eax );
		add( n, eax );
		cmp( ax, csbi.dwSize.y );
		jnae justMoveCursor;
		
			mov( n, eax );
			sub( csbi.dwSize.y, ax );
			cmp( ax, 0 );
			je scrollDone;
			whileLinesToScroll:
			
				console.scrollUp();
				dec( ax );
				jnz whileLinesToScroll;
				
			scrollDone:
			mov( csbi.dwSize.y, ax );
			dec( ax );
			SetConsoleCursorPosition
			(
				handle, 
				#{ 
					pushw( ax ); 
					pushw( csbi.dwCursorPosition.x );
				}# 
			);
			jmp allDone;
						
		
		justMoveCursor:
		
			// Warning: the following code depends upon the fact
			// that the first parameter of SCCP is a COORD
			// object consisting of two words with the X coordinate
			// at the L.O. word and the Y coordinate at the H.O. word.
		
			SetConsoleCursorPosition
			(
				handle, 
				#{ 
					pushw( ax ); 
					pushw( csbi.dwCursorPosition.x );
				}# 
			);
			
		allDone:
		popad();
		leave();
		ret( _parms_ );

	end ndown;	

#endif

	
end consoleUnit;
