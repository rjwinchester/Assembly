
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit consoleUnit;

#include( "console.hhf" )
#includeonce( "os.hhf" )
#includeonce( "stdout.hhf" )

?@nodisplay := true;
?@noalignstack := true;	

#if( os.linux | os.freeBSD | os.macOS )
	
	// saveCursor-
	//
	//	Saves the current cursor position in an internal variable.
	// Note: Restore cursor via the console.restoreCursor function.
	// Only one level of save/restore is available.
		
	procedure console.saveCursor; @noframe;
	readonly
		saveCursorStr:byte; @nostorage;
				byte #$1b "7";
				
	begin saveCursor;

		push( eax );
		push( ebx );
		push( ecx );
		push( edx );

		
		stdout.write( &saveCursorStr, 2 );
		
		pop( edx );
		pop( ecx );
		pop( ebx );
		pop( eax );
		ret();

	end saveCursor;
	
	// restoreCursor-
	//
	//	Restores the current cursor position saved
	// by the console.saveCursor function.
	// Only one level of save/restore is available.
		
	procedure console.restoreCursor; @noframe;
	const
		sys_write		:= 4;
 
	readonly
		restoreCursorStr:byte; @nostorage;
				byte #$1b "8";
				
	begin restoreCursor;

		push( eax );
		push( ebx );
		push( ecx );
		push( edx );

		mov( 2, edx );
		mov( &restoreCursorStr, ecx );
		mov( sys_write, eax );
		xor( ebx, ebx );
		int( $80 );
		
		pop( edx );
		pop( ecx );
		pop( ebx );
		pop( eax );
		ret();

	end restoreCursor;
	

#elseif( os.win32 )

	#include( "stdout.hhf" )
	
	type 
	 	COORD: record
			x: word;
			y: word;
		endrecord;


	 	SMALL_RECT: record
			Left: word;
			Top: word;
			Right: word;
			Bottom: word;
		endrecord;
	

		CONSOLE_SCREEN_BUFFER_INFO: record

			dwSize: COORD;
			dwCursorPosition: COORD;
			wAttributes: word;
			srWindow: SMALL_RECT;
			dwMaximumWindowSize: COORD;
			
		endrecord;
		
	static

		cursorPosition	:COORD;
		
					
		GetConsoleScreenBufferInfo: procedure
		( 
				handle:	dword; 
			var csbi:	CONSOLE_SCREEN_BUFFER_INFO
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__GetConsoleScreenBufferInfo@8" );
			
		SetConsoleCursorPosition: procedure
		( 
			hConsoleOutput:		dword;
			dwCursorPosition:	COORD	
		);
			@stdcall;
			@returns( "eax" );
			@external( "__imp__SetConsoleCursorPosition@8" );
	

	
	
	procedure console.saveCursor; @nodisplay; @noframe; 
	var
		handle			:dword;
		csbi			:CONSOLE_SCREEN_BUFFER_INFO;
		
	begin saveCursor;

		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		push( eax );
		push( ebx );
		
		stdout.handle();
		mov( eax, handle );
		
		// Verify that the coordinates are within range:
		
		GetConsoleScreenBufferInfo( handle, csbi );
		mov( csbi.dwCursorPosition.x, ax );
		mov( csbi.dwCursorPosition.y, bx );
		mov( ax, cursorPosition.x );
		mov( bx, cursorPosition.y );
		
		
		pop( ebx );
		pop( eax );
		leave();
		ret();

	end saveCursor;	

	// restoreCursor-
	//
	//	Restores the current cursor position saved
	// by the console.saveCursor function.
	// Only one level of save/restore is available.
		
	procedure console.restoreCursor; @nodisplay; @noframe;
	begin restoreCursor;

		stdout.handle();
		SetConsoleCursorPosition( eax, cursorPosition );
		ret();

	end restoreCursor;


#endif
	
end consoleUnit;
