
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit BsdUnit;
#include( "mac.hhf" )

// mmap - Memory Map file.

procedure mac.mmap
( 
	addr	:dword; 
	len		:mac.size_t; 
	prot	:dword; 
	flags	:dword; 
	fd		:dword; 
	offset	:mac.off_t 
);
	@nodisplay; @noframe;
begin mmap;

	push( ebp );
	mov( esp, ebp );
	
	mac.pushregs;
	
	mov( esp, eax );			// Save to restore stack
	
	pushd( 0 );					// Can't explain why this is needed -- alignment?
	push( (type dword offset[4]) );
	push( (type dword offset[0]) );
	push( fd );
	push( flags );
	push( prot );
	push( len );
	push( addr );
	push( eax );				// Dummy return/stack restore
	mov( mac.sys_mmap, eax );
	int( $80 );
	
	pop( esp );					// Clean parms w/o affecting CF.
	
	mac.popregs;
	
	pop( ebp );
	ret( _parms_ );	
	
end mmap;

end BsdUnit;
