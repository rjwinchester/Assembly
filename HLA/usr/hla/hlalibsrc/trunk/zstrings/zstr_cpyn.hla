unit zstr_cpyn_unit;


//	Version History:

//	Revision:	4
//	Author:		Sevag Krikorian
//	Date:		Sep 28, 2007
//	Note:		separated functions into units
//				reverted back to var:xxx var format
//				improved efficiency, now uses rep.movsd for lengths
//				of more than 3, and finishes with rep.movsb
//
//	Revision:	3
//	Author:		Sevag Krikorian
//	Date:		
//	Note:		removed some unnecessary instructions
//				had a duh! moment.  what i've been calling
//				catx routines are actually cpyz!  renamed
//				file and functions
//				also, zstr.cpySize uses var xxx:dword now instead of
//				var xxx:var
//
//	Revision:	2
//	Author:		Sevag Krikorian
//	Date:		Aug 31, 2007
//	Note:		added cpyzn function with demo
//
//	Revision:	1
//	Author:		Sevag Krikorian
//	Date:		Aug 20, 2007
//	Note:		1st release

	#includeonce( "zstrings.hhf" )
	#includeonce( "excepts.hhf" )

	procedure zstr.cpyn( src:zstring; maxlen:dword; dest:zstring );
		@noframe; @nodisplay; @noalignstack;
		
		// utility procedure, copies 'number' characters from
		// src to dest and terminates with 0 (zero)
		// returns the address of termination byte in EAX
		//
		// caller must ensure there is enough storage in dest
		//
		// returns the address of the zero terminating byte in EAX
		//
		// note, when passing HLA string pointers, do so with "val"
		
		var
			ecxsave	:dword;
			esisave	:dword;
			edisave	:dword;
			
	
	begin cpyn;
		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		mov( ecx, ecxsave );
		mov( esi, esisave );
		mov( edi, edisave );
		
		mov( src, esi );
		test( esi, esi );
		jz raiseDerefNULL;
		
		mov( dest, edi );
		test( edi, edi );
		jz raiseDerefNULL;
		
		cld();
		mov( maxlen, ecx );
		cmp( ecx, 3 );
		ja doBytes;
		
		// copy dwords at a time
		push( ecx );
		shr( 2, ecx );
		rep.movsd();
		
		// do the final 3 bytes, if any
		pop( ecx );
		and( 3, ecx );
		
		doBytes:
		rep.movsb();
		
		mov( #0, (type byte[edi]) );
		
		// return address of zero-terminating byte
		mov( edi, eax );
		
		mov( ecxsave, ecx );
		mov( esisave, esi );
		mov( edisave, edi );
		
		mov( ebp, esp );
		pop( ebp );
		ret( _parms_ );

		raiseDerefNULL:
			raise( ex.AttemptToDerefNULL );

	end cpyn;


end zstr_cpyn_unit;
