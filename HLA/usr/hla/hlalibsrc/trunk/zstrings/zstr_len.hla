
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );


/*******************************************************************/
/*                                                                 */
/* zlen-                                                           */
/*                                                                 */
/* Returns the current length of the z-string passed as a parm.	   */
/*                                                                 */
/*******************************************************************/

procedure zstr.len( zstr:zstring ); @noframe;
const
	zstrp	:text := "[esp+8]";
	
begin len;

	push( esi );
	mov( zstrp, esi );
	
	// We need to get ESI dword-aligned before proceeding:
	
	test( 3, esi );
	jz ESIisAligned;
	
	cmp( (type char [esi]), #0 );
	je SetESI;
	inc( esi );
	test( 3, esi );
	jz ESIisAligned;
	
	cmp( (type char [esi]), #0 );
	je SetESI;
	inc( esi );
	test( 3, esi );
	jz ESIisAligned;
	
	cmp( (type char [esi]), #0 );
	je SetESI;
	inc( esi );					// After this, ESI is aligned.
	
	
	ESIisAligned:
		sub( 32, esi );			// To counteract add immediately below.
	ZeroLoop:
		add( 32, esi );			// Skip chars this loop just processed.
	ZeroLoop2:
		mov( [esi], eax );		// Get next four chars into EAX.
		and( $7f7f7f7f, eax );	// Clear H.O. bit (note:$80->$00!)
		sub( $01010101, eax );	// $00 and $80->$FF, all others have pos val.
		and( $80808080, eax );	// Test all H.O. bits.  If any are set, then
		jnz MightBeZero0;		//  we've got a $00 or $80 byte.
		
		mov( [esi+4], eax );	// The following are all in-line expansions
		and( $7f7f7f7f, eax );	// of the above (we'll process 32 bytes on
		sub( $01010101, eax );	// each iteration of this loop). 
		and( $80808080, eax );
		jnz MightBeZero4;
		
		mov( [esi+8], eax );
		and( $7f7f7f7f, eax );
		sub( $01010101, eax );
		and( $80808080, eax );
		jnz MightBeZero8;
		
		mov( [esi+12], eax );
		and( $7f7f7f7f, eax );
		sub( $01010101, eax );
		and( $80808080, eax );
		jnz MightBeZero12;
		
		mov( [esi+16], eax );
		and( $7f7f7f7f, eax );
		sub( $01010101, eax );
		and( $80808080, eax );
		jnz MightBeZero16;
		
		mov( [esi+20], eax );
		and( $7f7f7f7f, eax );
		sub( $01010101, eax );
		and( $80808080, eax );
		jnz MightBeZero20;
		
		mov( [esi+24], eax );
		and( $7f7f7f7f, eax );
		sub( $01010101, eax );
		and( $80808080, eax );
		jnz MightBeZero24;
		
		mov( [esi+28], eax );
		and( $7f7f7f7f, eax );
		sub( $01010101, eax );
		and( $80808080, eax );
		jz ZeroLoop;
	
	// The following code handles the case where we found a $80
	// or a $00 byte.  We need to determine whether it was a zero
	// byte and the exact position of the zero byte.  If it was a
	// $80 byte, then we've got to continue processing characters
	// in the string.
	 
	
	// Okay, we've found a $00 or $80 byte in positions
	// 28..31.  Check for the location of the zero byte, if any.
		
		add( 28, esi );
		jmp	MightBeZero0;

	// If we get to this point, we've found a zero byte in
	// positions 4..7:
	
	MightBeZero4:
		add( 4, esi );
		jmp	MightBeZero0;

	// If we get to this point, we've found a zero byte in
	// positions 8..11:
	
	MightBeZero8:
		add( 8, esi );
		jmp	MightBeZero0;

	// If we get to this point, we've found a zero byte in
	// positions 12..15:
	
	MightBeZero12:
		add( 12, esi );
		jmp	MightBeZero0;

	// If we get to this point, we've found a zero byte in
	// positions 16..19:
	
	MightBeZero16:
		add( 16, esi );
		jmp	MightBeZero0;

	// If we get to this point, we've found a zero byte in
	// positions 20..23:
	
	MightBeZero20:
		add( 20, esi );
		jmp	MightBeZero0;

	// If we get to this point, we've found a zero byte in
	// positions 24..27:
	
	MightBeZero24:
		add( 24, esi );

	// If we get to this point, we've found a zero byte in
	// positions 0..3 or we've branched here from one of the
	// above conditions
	
	MightBeZero0:
		mov( [esi], eax );			// Get the original four bytes.
		cmp( al, 0 );				// See if the first byte contained zero.
		je SetESI;
		cmp( ah, 0 );				// See if the second byte contained zero.
		je SetESI1;
		test( $FF_0000, eax );		// See if byte #2 contained a zero.
		je SetESI2;
		test( $FF00_0000, eax );	// See if the H.O. byte contained zero.
		je SetESI3;
		
	// Well, it must have been a $80 byte we encountered.
	// (Fortunately, they are rare in ASCII strings, so all this
	// extra computation rarely occurs).  Jump back into the zero
	// loop and continue processing.
	
		add( 4, esi );	// Skip bytes we just processed.
		jmp ZeroLoop2;	// Don't bother adding 32 in the ZeroLoop!
		
	// The following compute the length of the string by subtracting
	// the current ESI value from the original value and then adding
	// zero, one, two, or three, depending on where we branched out
	// of the MightBeZero0 sequence above.
	
	SetESI3:
		sub( zstrp, esi );		// Compute length
		lea( eax, [esi+3] );	// +3 since it was in the H.O. byte.
		pop( esi );
		ret(4);
		
	SetESI2:
		sub( zstrp, esi );		// Compute length
		lea( eax, [esi+2] );	// +2 since zero was in byte #2
		pop( esi );
		ret(4);
		
	SetESI1:
		sub( zstrp, esi );		// Compute length
		lea( eax, [esi+1] );	// +1 since zero was in byte #1
		pop( esi );
		ret(4);
		
	SetESI:
		mov( esi, eax );
		sub( zstrp, eax );	// Compute length.  No extra addition since
		pop( esi );			// zero was in L.O. byte.
		ret( _parms_ );
		
end len;
	
end stringUnit;




	

