
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )
#include( "excepts.hhf" )



const
	nodeEDI: text := "(type node_t [edi])";
	nodeEAX: text := "(type node_t [eax])";
	


// deleteNode
//
//	This function deletes the specified node in the list.
//	It returns a pointer to the node it deletes in ESI
//	(in particular, this function does not free the
//	storage associated with that node).
//
//	WARNING: this code assumes that "n" is an element of
//	the current list.  It does not check to verify that
//	this assertion is correct.  If you call this function
//	and pass it a node that is not a member of the current
//	list, the results are undefined.
//
//	Since this is a method, EDI is already wiped
//	out upon entry.  So this code will not bother 
//  to preserve it.  As noted above, this function
//	returns with ESI pointing at the deleted node
//	object.


method virtualList_t.deleteNode( var n:node_t ); 
	@nodisplay;
	@noframe;
begin deleteNode;

	push( ebp );
	mov( esp, ebp );
	
	mov( n, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;
	
	// If the "Prev" pointer is NULL, assume that this
	// is the first node in the list:
	
	cmp( nodeEDI.Prev, NULL );
	jne lastInList;
		
		this.deleteFirst();
		jmp allDone;
		
		
	// If the "Next" pointer is NULL, assume that this
	// is the last node in the list:
	
	lastInList:
	cmp( nodeEDI.Next, NULL );
	jne middleOfList;
	
		this.deleteLast();
		jmp allDone;
		
	// If the "Prev" and "Next" nodes are not NULL, then
	// assume that this is a node in the middle of the
	// list.
	
	middleOfList:
	
		push( eax );
		dec( this.Cnt );
		mov( edi, esi );
		mov( nodeEDI.Next, eax );
		mov( nodeEDI.Prev, edi );
		mov( eax, nodeEDI.Next );
		mov( edi, nodeEAX.Prev );
		pop( eax );
			
	allDone:
	pop( ebp );
	ret( _parms_ );
		
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
		
end deleteNode;



end lists;
