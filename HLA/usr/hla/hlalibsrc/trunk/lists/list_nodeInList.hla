
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )



const
	nodeEDI: text := "(type node_t [edi])";
	nodeEAX: text := "(type node_t [eax])";
	

// iterator nodeInList-
//
// On each successful iteration, this iterator returns a pointer
// to each successive node in the object list.  This iterator
// returns the pointer to the node in the ESI register.
//
//	On iterator failure, this iterator returns with ESI
//	containing NULL.

iterator list_t.nodeInList; 
	@nodisplay;
	@noframe;
begin nodeInList;

	push( ebp );
	mov( esp, ebp );
	push( esi );
	mov( this.Head, esi );
	test( esi, esi );
	jz allDone;
	whileItemsInList:
	
		push( esi );
		yield();
		pop( esi );
		mov( (type node_t [esi]).Next, esi );
		test( esi, esi );
		jnz whileItemsInList;
		
	allDone:
	pop( esi );
	pop( ebp );
	add( 4, esp );		// Skip pointer to foreach loop body;
	ret();
	
end nodeInList;


end lists;
