
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )
#include( "memory.hhf" )

readonly
	align( 4 );
	vmt( virtualList_t );



/**************************************************************/



// virtualList.create-
//
// This is the constructor for the virtualList class.
// On entry, if ESI is non-NULL then this code assumes that it
// points at a list object and this code simply initializes the
// fields of that object.  If ESI contains NULL upon entry, then
// this code assumes that the caller wants to create a new list
// object on the heap (and expects this procedure to return a
// pointer to the new object in the ESI register).

procedure virtualList_t.create; @nodisplay; @noframe;
begin create;

	push( eax );
	test( esi, esi );
	jnz haveObjPtr;
	
		mov( malloc( @size( virtualList_t ) ), esi );
		
	haveObjPtr:
	
	// Initialize the pointer to the VMT:
	
	mov( &virtualList_t._VMT_, this._pVMT_ );
	
	// Initialize the Head and Tail pointers:
	
	mov( NULL, this.Head );
	mov( NULL, this.Tail );
	
	// Initialize the number of nodes currently in the list:
	
	mov( 0, this.Cnt );
	pop( eax );
	ret();
	
end create;




end lists;
