
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )
#include( "excepts.hhf" )



const
	nodeEDI: text := "(type node_t [edi])";
	nodeEAX: text := "(type node_t [eax])";
	


/*************************/



// insert_first
//
//	This function inserts node "n" before the
//	first in the list.
//
//	Since this is a method, EDI is already wiped
//	out upon entry.  So this code will not bother 
//  to preserve it.  This function does return with
//	ESI still pointing at the list object.


method virtualList_t.insertFirst( var n:node_t ); 
	@nodisplay;
	@noframe;
	
begin insertFirst;

	push( ebp );
	mov( esp, ebp );
	
	// If we're inserting before node zero, we
	// need to add this node to the beginning of
	// the list:

	push( eax );
	mov( this.Head, edi );
	mov( n, eax );
	test( edi, edi );	// Ensure that the list is not empty.
	jz emptyList;	
	
		mov( eax, nodeEDI.Prev );
		mov( edi, nodeEAX.Next );
		mov( NULL, nodeEAX.Prev );
		jmp updateHead;
		
	emptyList: // The list is empty, handle that special case here.
	
		mov( eax, this.Tail );
		mov( NULL, nodeEAX.Next );
		mov( NULL, nodeEAX.Prev );
		
	updateHead:
	
	// Since this is the first node in the list, we need
	// to update the "Head" pointer in the list object.
	
	mov( eax, this.Head );
	
	// Since we just added a node, bump up the node count by one.
	
	inc( this.Cnt );
	pop( eax );
	pop( ebp );
	ret( _parms_ );

end insertFirst;


end lists;
