
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )



const
	nodeEDI: text := "(type node_t [edi])";
	nodeEAX: text := "(type node_t [eax])";
	

// procedure search-
//
// This function searches through the list and returns a
// pointer (in EAX) to the node that "matches". A "match"
// is determined by executing the thunk passed as a parameter.
// If the thunk returns true in AL, then this function matches.
// This function returns NULL in EAX if no node matches.


method virtualList_t.search( cmpthunk:thunk ); 
	@nodisplay;
	@noframe;
begin search;

	push( ebp );
	mov( esp, ebp );
	push( esi );
	mov( this.Head, esi );
	test( esi, esi );
	jz allDone;
	whileItemsInList:
	
		cmpthunk();
		cmp( al, 0 );
		je allDone;
			mov( (type node_t [esi]).Next, esi );
			test( esi, esi );
			jnz whileItemsInList;
		
	allDone:
	mov( esi, eax );
	pop( esi );
	pop( ebp );
	ret( _parms_ );
	
end search;


end lists;
