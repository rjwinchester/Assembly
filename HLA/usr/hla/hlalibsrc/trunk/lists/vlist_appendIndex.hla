
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )
#include( "excepts.hhf" )



const
	nodeEDI: text := "(type node_t [edi])";
	nodeEAX: text := "(type node_t [eax])";
	



/*************************/


// append_index
//
//	This function appends node "n" after the
//	"posn"-th node in the list.  If "posn" has
//	a value greater than the number of nodes in
//	the list, then this function simply appends
//	"n" to the end of the list.
//
//	Since this is a method EDI is already wiped
//	out upon entry.  So this code will not bother 
//  to preserve it.  This function does return with
//	ESI still pointing at the list object.

method virtualList_t.appendIndex( var n:node_t; posn: dword ); 
	@nodisplay;
	@noframe;
	
begin appendIndex;

	push( ebp );
	mov( esp, ebp );
	
	// Quick sanity check:
	
	cmp( n, NULL );
	je AttemptToDerefNULL;
	
	push( eax );
	mov( posn, eax );
	cmp( eax, this.Cnt );
	jb appendNode;
	
		// "posn" is greater than the number of nodes in the
		// list, so just append this to the end of the list.
		// Note that if the list is empty, we execute this path.
		
		this.appendLast( n );
		jmp allDone;
		
	appendNode:
	
		// Okay, we've got to locate the node at index "posn"
		// in the list:
		
		mov( this.Head, edi );
		test( eax, eax );
		jz EAXis0;
		whileEAXnot0:
		
			mov( nodeEDI.Next, edi );
			dec( eax );
			jnz whileEAXnot0;
			
		EAXis0:
		this.appendNode( n, (type node_t [edi]));
		
	allDone:
	
	pop( eax );
	pop( ebp );
	ret( _parms_ );

AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
	
end appendIndex;



end lists;
