
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit lists;
#include( "lists.hhf" )
#include( "excepts.hhf" )



const
	nodeEDI: text := "(type node_t [edi])";
	nodeEAX: text := "(type node_t [eax])";
	



// deleteFirst
//
//	This function deletes the first node in the list.
//	It returns a pointer to the node it deletes in ESI
//	(in particular, this function does not free the
//	storage associated with that node).
//
//	Since this is a method, EDI is already wiped
//	out upon entry.  So this code will not bother 
//  to preserve it.  As noted above, this function
//	returns with ESI pointing at the deleted node
//	object.


method virtualList_t.deleteFirst; 
	@nodisplay; 
	@noframe;
	
begin deleteFirst;

	cmp( this.Cnt, 0 );
	je noNodes;
	
		// If there is at least one node in the list,
		// remove it and return a pointer to this node
		// in ESI.
		
		dec( this.Cnt );
		jnz twoOrMoreNodes;
		
			// If only one node, clear out the list
			// object.
			
			mov( this.Head, edi );
			mov( NULL, this.Head );
			mov( NULL, this.Tail );
			mov( edi, esi );
			jmp allDone;
			
		twoOrMoreNodes:
		
			// If there are two or more nodes in the list,
			// then just remove the first node in the list.
			
			push( eax );
			mov( this.Head, edi );
			mov( nodeEDI.Next, eax );
			mov( eax, this.Head );
			mov( NULL, nodeEAX.Prev );
			mov( edi, esi );
			pop( eax );
			jmp allDone;			
	
	noNodes:
	
		// Since there are no nodes in the list,
		// just return NULL in ESI.
		
		mov( NULL, esi );
		
	allDone:
	ret();
		
end deleteFirst;


end lists;
