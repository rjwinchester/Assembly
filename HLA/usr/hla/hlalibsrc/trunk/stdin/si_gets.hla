
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit StdInput;
#include( "../include/stdinunit.hhf" )


/*********************************************************/
/*                                                       */
/* gets-                                                 */
/*                                                       */
/* Reads a string from the standard input device.        */
/* All characters from the current buffer position to    */
/* the end of the current input buffer are copied to     */
/* the specified string.  If the "NeedsInput" variable   */
/* is true, this routine reads a new line from the       */
/* standard input before copying the data to the string. */
/* If the input buffer is empty, but "NeedsInput" is     */
/* false, then this routine creates and empty string     */
/* and sets "NeedsInput" to true, but does not read a    */
/* new line from the user.                               */
/*                                                       */
/*********************************************************/

procedure gets( s:string ); @noframe;
var
	LineLen: dword;
	
begin gets;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	push( ecx );
	push( esi );
	push( edi );
	pushfd();
	cld();
	
	// If the input buffer is empty, read a new line from the
	// standard input device.
	
	if( NeedsInput = true ) then
	
		ReadLn();
		
	endif;
	
	// Get the pointer to the destination string.
	
	mov( s, edi );

	// Compute the number of characters remaining in the
	// input buffer.
	
	mov( CharsInBuf, ecx );
	sub( InputIndex, ecx );
	mov( ecx, LineLen );
	if( ecx <> 0 ) then
	
		
		// If there are too many characters for the
		// destination string, then raise an exception.
		
		if( ecx > (type str.strRec [edi]).maxlen ) then
		
			mov( true, NeedsInput);
			raise( ex.StringOverflow );
			
		endif;

		// At this point, the string can hold the remaining
		// characters in the input buffer.  So copy these
		// characters to the string.
		
		mov( ecx, (type str.strRec [edi]).length );
		inc( ecx );		// To copy zero terminating byte with string.
		lea( esi, InputBuffer );
		add( InputIndex, esi );

		rep.movsb();
		
	else // Empty string.
	
		mov( 0, (type str.strRec [edi]).length );
		mov( 0, (type byte [edi]) );	// Zero terminate the string.
	
	endif;
	mov( true, NeedsInput );
	popfd();
	pop( edi );
	pop( esi );
	pop( ecx );
	mov( s, eax );	// Return pointer to string just read in EAX.
	leave();
	ret( _parms_ );
	
end gets;		


end StdInput;




	

