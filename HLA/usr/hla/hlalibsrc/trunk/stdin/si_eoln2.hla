
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit StdInput;
#includeOnce( "../include/stdinunit.hhf" )
#includeOnce( "../include/conversions.hhf" )


/************************************************/
/*                                              */
/* eoln-                                        */
/* eoln2-                                       */
/*                                              */
/* This function returns true if the next       */
/* input is at the end of the line.             */
/*                                              */
/* Since getc and gets can read delimiter       */
/* characters, eoln does not return true if     */
/* there are nothing but delimiter characters   */
/* before the end of the line.                  */
/*                                              */
/* The eoln2 routine returns true if there are  */
/* nothing but delimiter characters before the  */
/* end of the current line.                     */
/*                                              */
/************************************************/


procedure eoln2; 
	@noframe;
	@nodisplay;
begin eoln2;

	push( ebp );
	mov( esp, ebp );


	// If the input buffer is empty, we're definitely
	// at the end of a line.
	
	movzx( NeedsInput, eax );
	test( eax, eax );
	jnz eoln2True;
	
		
		push( ebx );
		push( ecx );
		push( edx );
		mov( InputIndex, ebx );
		mov( CharsInBuf, ecx );
		mov( _hla.get_Delimiters(), edx );

		SkipDelimsLoop:
		
			movzx( InputBuffer[ ebx ], eax );
			bt( eax, [edx] );	// Delimiters
			jnc NoMoreDelims;

			inc( ebx );
			cmp( ebx, ecx );
			jb SkipDelimsLoop;
			
			
		NoMoreDelims:

		// Point InputIndex at first non-delimiter character
		// (or the end of the buffer, if we've skipped all
		// remaining characters in the line).
		
		mov( ebx, InputIndex );	
	
		// Check to see if we're at the end of the input buffer.
		
		cmp( InputBuffer[ ebx ], #0 );
		sete( al );
		pop( edx );
		pop( ecx );
		pop( ebx );


	eoln2True:

		pop( ebp );
		ret();
	
end eoln2;

end StdInput;




	

