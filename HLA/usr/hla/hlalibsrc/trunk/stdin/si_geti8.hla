
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit StdInput;
#include( "../include/stdinunit.hhf" )


/**********************************************************/
/*                                                        */
/* geti8-                                                 */
/*                                                        */
/* This routine reads an integer of the specified size    */
/* and return that value in the AL register (actually, it */
/* sign-extends the value into EAX).                      */
/*                                                        */
/* This routine will generate an appropriate exception    */
/* if there is a conversion error, overflow, or other     */
/* problem with reading the integer from the standard     */
/* input device.                                          */
/*                                                        */
/* Note that this routine will skip over any leading      */
/* delimiter characters (see the Delimiters cset in       */
/* stdlibdata.hla).  Furthermore, the value must end with */
/* a valid delimiter character or an exception occurs.    */
/*                                                        */
/**********************************************************/


procedure geti8; @noframe;
begin geti8;

	push( ebx );
	push( edx );
	
	_geti_();
	
	// Range check the result.
	// (Must be in the range -128..+127.)
	
	mov( edx, ebx );		// Save H.O. dword for range check.
	cdq();					// See if ESI is all zeros or all ones
	cmp( edx, ebx );
	jne voor;
	cmp( eax, -128 );
	jl voor;
	cmp( eax, 127 );
	jg voor;
	
	pop( edx );
	pop( ebx );
	ret();	

voor:
	mov( true, NeedsInput );
	raise( ex.ValueOutOfRange );

end geti8;

end StdInput;




	

