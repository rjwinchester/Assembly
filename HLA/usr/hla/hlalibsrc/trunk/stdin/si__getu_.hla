
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit StdInput;
#includeOnce( "../include/stdinunit.hhf" )
#includeOnce( "../include/conversions.hhf" )

/*********************************************************/
/*                                                       */
/* _getu_:                                               */
/*                                                       */
/* 	Reads a string of digits from the standard input and */
/* 	converts them to a 64-bit number (returning the      */
/* 	number in EDX:EAX).                                  */
/*                                                       */
/* 	This routine is intended for internal use only by    */
/* 	the HLA standard library.                            */
/*                                                       */
/*********************************************************/


procedure _getu_; 
	@noframe;
	@nodisplay;	
begin _getu_;

	push( ebx );
	push( ecx );
	push( esi );

	// If the input buffer is empty, read a new line from the
	// standard input device.
	
	cmp( NeedsInput, false );
	je noReadLn;
	
		ReadLn();
		
	noReadLn:

	mov( _hla.get_Delimiters(), edx );
	xor( eax, eax );
	mov( InputIndex, ebx );
	mov( CharsInBuf, ecx );
	SkipDelimsLoop:
	
		mov( InputBuffer[ ebx ], al );
		cmp( al, '_' );
		je isDelim;
		
			bt( eax, (type dword [edx] ));	// Delimiters
			jnc NoMoreDelims;
			
		isDelim:
		inc( ebx );
		cmp( ebx, ecx );
		jb SkipDelimsLoop;
		
		// We are at the end of the line, so read a new line from the user.
		
		ReadLn();
		mov( InputIndex, ebx );
		mov( CharsInBuf, ecx );
		jmp SkipDelimsLoop;
		
	NoMoreDelims:

	// Point esi at the start of the text and call atoi to
	// convert this text to an integer.
	
	lea( esi, InputBuffer[ebx] );	
	try
	
		_atou64();		// Convert to an integer.

		// Verify that we end with a valid delimiter:

		push( eax );
		mov( _hla.get_Delimiters(), ebx );
		pop( eax );
		movzx( (type char [esi]), ecx );
		bt( ecx, [ebx] );		// Delimiters
		jc goodDelim;

			raise( ex.ConversionError );

		goodDelim:
		
	  anyexception
	
		mov( true, NeedsInput);
		reraise( eax );
				
	endtry;
	
	// Compute new InputIndex value.
	
	sub( &InputBuffer, esi );
	mov( esi, InputIndex );
	
	pop( esi );
	pop( ecx );
	pop( ebx );
	ret();
	
end _getu_;


end StdInput;




	

