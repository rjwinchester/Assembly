
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



#if( ! @defined( stderrUnit_hhf ))
?stderrUnit_hhf := true;
?@nodisplay := true;
?@nostackalign := true;

	#includeOnce( "hla.hhf" )
	#includeOnce( "stdio.hhf" )
	#includeOnce( "stderr.hhf" )
	#includeOnce( "fileio.hhf" )
	#includeOnce( "strings.hhf" )
	#includeOnce( "conv.hhf" )
	#includeOnce( "memory.hhf" )
	#includeOnce( "excepts.hhf" )
	#includeOnce( "os.hhf" )

	#if( os.linux | os.freeBSD | os.macOS )

		#macro ChkStdErr;
		
			// Expand to nothing for Linux/FreeBSD/Mac
			// because we always know the stderr handle.
			
		#endmacro
			

	
	#elseif( os.win32 )
		
		#macro ChkStdErr;
		
			#if( os.win32 )
				
				if( HasStdErrHandle = false ) then
				
					pushad();
					pushfd();
					cld();
					GetStdHandle( -12 );
					mov( eax, StdErrHandle );
					popfd();
					popad();
					
				endif;
				
			#endif
			
		#endmacro;
		
	#endif


	static

		align(4);
		StdErrHandle: dword;		external( "STDERRUNIT_STDERRHANDLE" );
		HasStdErrHandle: boolean;	external( "STDERRUNIT_HASSTDERRHANDLE" );

		#if( os.win32 )
			
			/*
			** Links to the Win32 API:
			*/

			WriteFile:procedure
			(
					overlapped:		dword;
				var	bytesWritten:	dword;
					len:			dword;
				var buffer:			byte;
					Handle:			dword
			); 
				external( "__imp__WriteFile@20" );


			GetStdHandle:procedure
			( 
				WhichHandle:int32 
			); 
				external( "__imp__GetStdHandle@4" );


		#endif
		
		




#endif
