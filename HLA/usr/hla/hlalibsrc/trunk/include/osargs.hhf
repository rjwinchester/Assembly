
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde




#includeOnce( "os.hhf" )
#includeOnce( "args.hhf" )
#includeOnce( "_hla.hhf" )



#if( os.win32 )

	static
		GetCmdLine:procedure; external( "__imp__GetCommandLineA@0" );
		
#endif

const
	MaxCmdLnParms := 256;
	
static

	#if( os.linux )

		_argc_Linux	:uns32; 			external( "_argc__hla_" );
		_argv_Linux	:dword; 			external( "_argv__hla_" );

	#elseif( os.freeBSD )

		_argc_BSD	:uns32; 			external( "_argc__hla_" );
		_argv_BSD	:dword; 			external( "_argv__hla_" );

	#elseif( os.macOS )

		_argc_MAC	:uns32; 			external( "_argc__hla_" );
		_argv_MAC	:dword; 			external( "_argv__hla_" );

	#elseif( os.win32 )
			
		
	#endif
	
	procedure BuildArgv; external( "ARGS_BUILDARGV" );
	
namespace arg;
	
	static
		
		// Command-line related variables:
										 
		NeedsCmdLn		:boolean;		@global:_hla._ext( "ARG_NEEDSCMDLN" );
		CommandLine		:string;		@global:_hla._ext( "ARG_COMMANDLINE" );
		_argc			:uns32;			@global:_hla._ext( "ARG__ARGC" );
		_argv			:string[ @global:MaxCmdLnParms ];
										@global:_hla._ext( "ARG__ARGV" );
		
		
end arg;
	
	


namespace _hla;


				
	// Command-line related functions:		
	
	procedure get_NeedsCmdLn;
		@returns( "al" );
		@global:_hla._ext( "HLA_GET_NEEDSCMDLN" );
		
	procedure get_CommandLine;
		@returns( "eax" );
		@global:_hla._ext( "HLA_GET_COMMANDLINE" );
		
	procedure get_argc;
		@returns( "eax" );
		@global:_hla._ext( "HLA_GET_ARGC" );
		
	procedure get_argv( index:uns32 );
		@returns( "eax" );
		@global:_hla._ext( "HLA_GET_ARGV" );
		
	
	procedure set_NeedsCmdLn( ncln:boolean );
		@global:_hla._ext( "HLA_SET_NEEDSCMDLN" );
		
	procedure set_CommandLine( cln:string );
		@global:_hla._ext( "HLA_SET_COMMANDLINE" );
		
	procedure set_argc( argc:uns32 );
		@global:_hla._ext( "HLA_SET_ARGC" );
		
	procedure set_argv( argvElement:string; index:dword );
		@global:_hla._ext( "HLA_SET_ARGV" );
			
		
	
end _hla;
