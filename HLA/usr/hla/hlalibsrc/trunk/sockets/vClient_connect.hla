// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/7/2008, by Randall Hyde


unit sockets;
?@nostackalign := true;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "excepts.hhf" )
#includeOnce( "sockets.hhf" )

method vClient_t.connect
( 
	adrs		:dword; 
	port		:word 
);
var
	sockDescr		:dword;
	timeout			:hla.timeval;
	net_fdset		:hla.fd_set_t;
	
begin connect;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	push( eax );
	
	// Set up the remote IP address:
	
	sock.zeroSockAddr( this.IPadrs );
	mov( sock.AF_INET, this.IPadrs.sa_family );
	
	mov( adrs, eax );
	bswap( eax );
	mov( eax, this.IPadrs.sin_addr );
	
	mov( port, ax );
	xchg( al, ah );
	mov( ax, this.IPadrs.sin_port );
	
	// The socket was opened for a client:
	
	mov( hla.client_c, this.mode );
	
	sock.socket( sock.AF_INET, sock.SOCK_STREAM, 0 );
	mov( eax, this.handle );
	
	sock.connect( eax, this.IPadrs, @size( hla.sockaddr ) );

	pop( eax );	
	leave();
	ret( _parms_ );	
		
end connect;


end sockets;
