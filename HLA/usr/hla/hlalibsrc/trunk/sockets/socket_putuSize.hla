
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit socketUnit;
		
#includeOnce( "sockets.hhf" )
#includeOnce( "hla.hhf" )

// baseSocketClass_t.putu8Size & baseSocketClass_t.putu16Size-
//
//	These procedures simply zero extend the actual data (b or w, respectively)
// to 32 bits (remember all parameters are multiples of dwords, but the H.O.
// bytes may be unused) in the stack and then jump (or fall through) to the
// putu32Size routine. Note that the stack frame built for each of these
// routines is passed on to putu32Size without building a new stack frame.	

procedure baseSocketClass_t.putu8Size( b:byte; width:int32; fill:char ); 
	@noframe; @nodisplay;
begin putu8Size;

	and( $ff, (type dword [esp+12]));	// Zero H.O. 3 bytes of b.
	jmp baseSocketClass_t.puti32Size;
	
end putu8Size;


// putu16Size falls through to putu32Size, so it must immediately precede
// putu32Size!

procedure baseSocketClass_t.putu16Size( w:word; width:int32; fill:char ); 
	@noframe; @nodisplay;
begin putu16Size;

	mov( 0, (type word [esp+14]));	// Zero extend w to 32 bits.
	jmp baseSocketClass_t.puti32Size;

end putu16Size;


procedure baseSocketClass_t.putu32Size( d:dword; width:int32; fill:char ); 
	@noframe; @nodisplay;
var
	eaxSave		:dword;
	ediSave		:dword;
	esiSave		:pointer to baseSocketClass_t;


	procedure putu32sizeThunk( thunksEBPval:dword ); @noframe; @nodisplay;
	begin putu32sizeThunk;
	
		push( ebp );			// Thunks always do this.
		mov( [esp+8], ebp );	// Retrieve EBP value passed as parameter
		
		mov( ebp::esiSave, esi );
		(type baseSocketClass_t [esi]).puts( (type string eax));
		
		pop( ebp );
		ret( _parms_ );
		
	end putu32sizeThunk;
	
begin putu32Size;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( esi, esiSave );
	mov( edi, ediSave );
	mov( eax, eaxSave );
	
	hla.putu32size
	( 
		#{	// Push thunk object on stack: 
			pushd( &putu32sizeThunk );
			push( ebp );
		}#, 
		d,
		width,
		fill 
	);

	mov( eaxSave, eax );
	mov( ediSave, edi );
	mov( esiSave, esi );
	leave();
	ret( _parms_ );
		
end putu32Size;
	
end socketUnit;

