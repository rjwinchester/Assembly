// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/7/2008, by Randall Hyde


unit sockets;
?@nostackalign := true;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "sockets.hhf" )
#includeOnce( "excepts.hhf" )

// poll-
//
//	Checks to see if input is available on an input socket.
//	Returns EAX=0 if no data is available, EAX=1 if data is available.

method vBaseSocketClass_t.poll;
var
	ebxSave	:dword;
	ecxSave	:dword;
	edxSave	:dword;
	esiSave	:dword;
	ediSave	:dword;
	timeout	:hla.timeval;
	fdset	:hla.fd_set_t;
	
	
begin poll;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	mov( edi, ediSave );		// We have to preserve the
	mov( esi, esiSave );		// register because we have
	mov( edx, edxSave );		// no idea what will happen to
	mov( ecx, ecxSave );		// them if there is an exception.
	mov( ebx, ebxSave );
	
	mov( 0, timeout.tv_sec );	// Just do a poll operation.
	mov( 0, timeout.tv_usec );
			
	sock.fd_zero( fdset );
	sock.fd_set( this.handle, fdset );
	lea( eax, timeout );
	sock.select( this.handle, fdset, NULL, NULL, [eax] );

	mov( ediSave, edi );
	mov( esiSave, esi );
	mov( edxSave, edx );
	mov( ecxSave, ecx );
	mov( ebxSave, ebx );
	leave();
	ret( _parms_ );
	
end poll;


end sockets;
