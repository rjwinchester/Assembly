
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit socketUnit;
?@nostackalign := true;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "sockets.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "hla.hhf" )



// baseSocketClass_t.getu32-
//
//	Reads an unsigned 32-bit integer from the specified socket.

procedure baseSocketClass_t.getu32; 
var
	obj		:dword;
	c		:char;
	
	
	
	// Low-level implementation of a thunk procedure:
	//
	// Thunk must return a single char in AL from the socket (with carry
	// flag clear) or return carry flag set if there was an EOF.
	
	procedure getu32Thunk( thunksEBPval:dword );
	begin getu32Thunk;
	
		push( ebp );			// Thunks always do this.
		mov( [esp+8], ebp );	// Retrieve EBP value passed as parameter

			mov( ebp::obj, esi );
			(type baseSocketClass_t [esi]).read( ebp::c, 1 );
			cmp( eax, 1 );		// C=1 if EOF (eax=0), 0 if not EOF
			movzx( ebp::c, eax );

		pop( ebp );				// Restore caller's EBP value
        ret( _parms_ );			// Return, removing local EBP parm value.

	end getu32Thunk;
	
begin getu32;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( esi, obj );
	
	pushd( &getu32Thunk );
	push( ebp );
	call hla.getu32;
	
	mov( obj,     esi );
	leave();
	ret( _parms_ );

end getu32;

	
end socketUnit;

