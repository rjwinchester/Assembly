
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit socketUnit;
		
#includeOnce( "sockets.hhf" )
#includeOnce( "hla.hhf" )

/********************************************************************/
/*                                                                  */
/* baseSocketClass_t.putlSize-                                      */
/* 	Prints a 128-bit number to the socket.                          */
/*                                                                  */
/* Inputs:                                                          */
/* 	Handle-                                                         */
/* 		File handle to write to.                                    */
/*                                                                  */
/* 	l-                                                              */
/* 		128-bit lword value to convert and write.                   */
/*                                                                  */
/* 	width-                                                          */
/* 		Minimum # of print positions to use when writing the value. */
/* 		If negative, value is left justified in field width, if     */
/* 		non-negative, value is right justified in width.            */
/*                                                                  */
/* 	fill-                                                           */
/* 		Padding character to use if width is greater than the       */
/* 		number of digits required to print the number.              */
/*                                                                  */
/********************************************************************/



method vBaseSocketClass_t.puth128Size( l:lword; width:int32; fill:char ); 
	@noframe;
	@nodisplay;
	@noalignstack;

var
	eaxSave		:dword;
	ediSave		:dword;
	esiSave		:pointer to vBaseSocketClass_t;


	procedure vputh128SizeThunk( thunksEBPval:dword ); @noframe; @nodisplay;
	begin vputh128SizeThunk;
	
		push( ebp );			// Thunks always do this.
		mov( [esp+8], ebp );	// Retrieve EBP value passed as parameter
		
		mov( ebp::esiSave, esi );
		(type vBaseSocketClass_t [esi]).puts( (type string eax));
		
		pop( ebp );
		ret( _parms_ );
		
	end vputh128SizeThunk;
	
begin puth128Size;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( esi, esiSave );
	mov( edi, ediSave );
	mov( eax, eaxSave );
	
	hla.puth128size
	( 
		#{	// Push thunk object on stack: 
			pushd( &vputh128SizeThunk );
			push( ebp );
		}#, 
		l,
		width,
		fill 
	);

	mov( eaxSave, eax );
	mov( ediSave, edi );
	mov( esiSave, esi );
	leave();
	ret( _parms_ );
		
end puth128Size;


end socketUnit;

