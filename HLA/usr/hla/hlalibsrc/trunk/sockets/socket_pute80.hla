
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit socketUnit;
		
#includeOnce( "sockets.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "conv.hhf" )



/**********************************************************/
/*                                                        */
/* baseSocketClass_t.pute80-                              */
/*                                                        */
/* Writes an 80-bit floating-point value to the specified */
/* socket using scientific format.                        */
/*                                                        */
/* Inputs-                                                */
/* 	e80		:80-bit value to print.                       */
/* 	width	:# of print positions to use.                 */
/* 	                                                      */
/**********************************************************/

procedure baseSocketClass_t.pute80
( 
	r		:real80; 
	width	:uns32 
);
	@noframe;
	@nodisplay;
	@noalignstack;

var
	eaxSave		:dword;
	ediSave		:dword;
	esiSave		:pointer to baseSocketClass_t;


	procedure pute80Thunk( thunksEBPval:dword ); @noframe;  @nodisplay;
	begin pute80Thunk;
	
		push( ebp );			// Thunks always do this.
		mov( [esp+8], ebp );	// Retrieve EBP value passed as parameter
		
		mov( ebp::esiSave, esi );
		(type baseSocketClass_t [esi]).puts( (type string eax));
		
		pop( ebp );
		ret( _parms_ );
		
	end pute80Thunk;
	
begin pute80;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( esi, esiSave );
	mov( edi, ediSave );
	mov( eax, eaxSave );
	
	hla.pute80
	( 
		#{	// Push thunk object on stack: 
			pushd( &pute80Thunk );
			push( ebp );
		}#, 
		r,
		width 
	);

	mov( eaxSave, eax );
	mov( ediSave, edi );
	mov( esiSave, esi );
	leave();
	ret( _parms_ );
	
end pute80;


	
end socketUnit;

