
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit hlaUnit;
#include( "hla.hhf" )
#include( "conv.hhf" )
#include( "excepts.hhf" )

procedure hla.getf( getc:thunk ); 
	@noframe;
	@nodisplay;
	@noalignstack;
	
var
	eaxSave		:dword;
	edxSave		:dword;
	esiSave		:dword;
	Delims		:cset;
	buffer		:byte[ 256 ];
		
begin getf;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( eax, eaxSave );
	mov( edx, edxSave );
	mov( esi, esiSave );
	
	conv.getDelimiters( Delims );
	
	// Skip over any leading delimiters:
	
	repeatUntilNotDelim:
	
		getc();
		cmp( eax, $80 );
		jae illegalChar;
		bt( eax, (type dword Delims) );
		jc repeatUntilNotDelim;
		
	
	// Grab all the input characters until we
	// encounter a delimiter or overrun the
	// buffer.
	
	mov( al, buffer[0] );
	mov( 1, edx );
	
	whileMoreChars:
			getc();
			jc noMoreChars;					// EOF is valid delimiter
			
			cmp( eax, $80 );
			jae illegalChar;
		
			bt( eax, (type dword Delims) );	// Check for delimiter
			jc noMoreChars;
		
			mov( al, buffer[edx] );
			add( 1, edx );
			cmp( edx, 254 );
			jae convErr;
			jmp whileMoreChars;
	
	noMoreChars:
	mov( 0, buffer[edx] );					// Provide a delimiter for atof.	
	lea( esi, buffer );
	conv.atof();	
	
	mov( eaxSave, eax );
	mov( edxSave, edx );
	mov( esiSave, esi );
	leave( );
	ret( _parms_ );
	
convErr:
	raise( ex.ConversionError );

illegalChar:
	raise( ex.IllegalChar );
	
end getf;
end hlaUnit;

