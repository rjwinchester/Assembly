
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit hlaUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "hla.hhf" );
#include( "strings.hhf" );
#include( "excepts.hhf" );
#include( "conv.hhf" );


// hla.putq-                                              
//                                                        
// Converts the hexadecimal representation of the "q"
// parameter to a string and calls putstr to emit it.        

procedure hla.putq( putstr:thunk; q:qword ); @noframe;
const
	MaxByteStrLen := 24;
	chars: text := "(type str.strRec chrs[8])";

var
	chrs:	byte[ MaxByteStrLen + 8];

begin putq;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	push( eax );

	// Initialize maximum string length

	mov( MaxByteStrLen, chars.maxlen );

	// Convert the dword to a string of hex digits and 
	// copy the string.

	push( (type dword q[4]) );
	push( (type dword q[0]) );
	lea( eax, chars );					// create pointer to string 'chars'
	push( eax ); 
	call( conv.qToStr );
	putstr();
	pop( eax );
	leave();
	ret( _parms_ );
	
end putq;

end hlaUnit;




	

