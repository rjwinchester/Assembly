
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit hlaUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "hla.hhf" )
#include( "excepts.hhf" )
#include( "conv.hhf" )
#include( "stdlibdata.hhf" )


procedure hla.geth32( getc:thunk ); @noframe;
var
	Delimiters	:cset;
			  
begin geth32;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	push( ecx );
	
	conv.getDelimiters( Delimiters );
	
	xor( eax, eax );
	xor( ecx, ecx );
	
	// Skip over any leading delimiters:
	
	repeatUntilNC:
		getc();
		jc convErr;
		movzx( al, eax );
		bt( eax, Delimiters );
		jc repeatUntilNC;


	// Okay, input the digits and convert to a number:
	
	repeatUntilC:
	
		// The character must be a numeric digit.
		// The following statement converts the character in
		// al to the range $00..$0F if it is
		// a hexadecimal character, to $FF if it is
		// not a legal hexadecimal character.
		
		movsx( stdlib.hexConvTbl[ eax ], eax );
		cmp( eax, -1 );
		je convErr;

		cmp( ecx, $1000_0000 );
		jae Overflow;
		
		shl( 4, ecx );		// Multiply ecx by 16, this is *2.
		
		// Add in the current character:
		
		add( eax, ecx );	// Never a carry!
			
		// Skip any underscores in the middle of the number.
		// (Technically, this allows underscores at the end
		// of the number too, but we'll ignore this issue).
		
		repeatUntilALne_:
			getc();
			jc EOF;				// This is okay, just ends the conversion.
			cmp( al, '_' );
			je repeatUntilALne_;
			
			cmp( al, $80 );
			jae illegalChar;
			movzx( al, eax );
			bt( eax, (type dword Delimiters ));
			jnc repeatUntilC;

	EOF:
	mov( ecx, eax );
	pop( ecx );
	leave( );
	ret();
	
convErr:
	raise( ex.ConversionError );

Overflow:
	raise( ex.ValueOutOfRange );
	
illegalChar:
	raise( ex.IllegalChar );
		
end geth32;


	
end hlaUnit;

