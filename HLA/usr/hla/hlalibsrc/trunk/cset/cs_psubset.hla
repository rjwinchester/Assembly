
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit charSets;

#include( "cset.hhf" );



/***************************************/
/*                                     */
/* psubset (proper subset)             */
/*                                     */
/* Returns true in EAX if src1 < src2. */
/*                                     */
/***************************************/

procedure cs.psubset( src1:cset; src2:cset ); @nodisplay; @noframe;
const
	_src1	:text := "(type dword [esp+20])";
	_src2	:text := "(type dword [esp+4])";

begin psubset;

		// Stack at this point:
		//
		//	esp+20	src1	:cset
		//	esp+4	src2	:cset
		//	esp		return address
	
		mov( _src1, eax );
		or( _src2, eax );
		cmp( eax, _src2 );
		jne NotpSubset;
		
		mov( _src1[4], eax );
		or( _src2[4], eax );
		cmp( eax, _src2[4] );
		jne NotpSubset;
		
		mov( _src1[8], eax );
		or( _src2[8], eax );
		cmp( eax, _src2[8] );
		jne NotpSubset;
		
		
		mov( _src1[12], eax );
		or( _src2[12], eax );
		cmp( eax, _src2[12] );
		jne NotpSubset;
		
		// Okay, they're <= at this point, now
		// check for equal:
		
		mov( _src1, eax );
		cmp( eax, _src2 );
		jne IspSubset;
		
		mov( _src1[4], eax );
		cmp( eax, _src2[4] );
		jne IspSubset;
		
		mov( _src1[8], eax );
		cmp( eax, _src2[8] );
		jne IspSubset;
		
		mov( _src1[12], eax );
		cmp( eax, _src2[12] );
		jne	IspSubset;
		
		// They're equal, so we've got to
		// return false in EAX.
		
		xor( eax, eax );
		ret( _parms_ );
		

	IspSubset:
		cmp( al, al );	// Force the zero bit on.
		
	NotpSubset:
	
		sete( al );
		movzx( al, eax );
		ret( _parms_ );		
		
end psubset;




end charSets;




	

