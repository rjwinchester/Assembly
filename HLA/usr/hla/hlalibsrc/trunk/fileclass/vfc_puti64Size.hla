
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileClass;

#includeonce( "fileclass.hhf" )
#includeonce( "conv.hhf" )

?@NoStackAlign := true;
?@NoDisplay := true;
?@NoFrame := true;		
		




method virtualFile_t.puti64Size
( 
	q:qword; 
	width:int32; 
	fill:char 
); 
var
	eaxSave		:dword;
	ecxSave		:dword;
	ediSave		:dword;
	numWidth	:uns32;
	buffer		:char[4096];
	
begin puti64Size;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( eax, eaxSave );
	mov( ecx, ecxSave );
	mov( edi, ediSave );


	// Compute the actual size of the number for later use:
	
	conv.i64Size( q );
	mov( eax, numWidth );
	lea( edi, buffer );
	movzx( fill, eax );
	conv._intToBuf64Size( q, width, numWidth, al, [edi], @size(buffer)-1 );	
	this.write( [edi], ecx );

	mov( eaxSave, eax );
	mov( ecxSave, ecx );
	mov( ediSave, edi );
	leave();
	ret( _parms_ );
	
end puti64Size;


end FileClass;
