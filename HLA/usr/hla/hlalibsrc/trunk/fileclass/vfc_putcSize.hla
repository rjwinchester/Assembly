
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileClass;

#include( "fileclass.hhf" )
#include( "fileio.hhf" )

?@NoStackAlign := true;
?@NoDisplay := true;
?@NoFrame := true;		
		




method virtualFile_t.putcSize( c:char; width:int32; fill:char );
begin putcSize;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( ecx );		

	// We only print pad characters if the absolute value of
	// the specified field width is greater than one.
	
	mov( width, ecx );
	cmp( ecx, 1 );
	jle noRightJustify;
	
	
		movzx( fill, eax );
		dec( ecx );			// Character takes up one position on it's own.
		this.sPutPad( al, ecx );
			
	noRightJustify:			
		
	// Okay, write the output character to the file.
	
	lea( eax, c );
	this.write( [eax], 1 );

	
	// If width was negative, write the pad characters
	// after the character (left justify the character).
	
	cmp( width, -1 );
	jge allDone;
	
		mov( width, ecx );
		add( 1, ecx );		// Char occupies one position.
		neg( ecx );
		this.sPutPad( fill, ecx );

	allDone:
	pop( ecx );
	pop( eax );
	pop( ebp );
	ret( _parms_ );

end putcSize;

end FileClass;
