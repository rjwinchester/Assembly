
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		

#include( "../include/fileiounit.hhf" )
	

/******************************************************************/
/*                                                                */
/* fread,                                                         */
/* fwrite-                                                        */
/*                                                                */
/* General purpose block data I/O routines.                       */
/* This routines read/write the specified number of bytes from/to */
/* the specified file.                                            */
/*																  */
/* fread returns the number of bytes read in EAX.                 */
/*                                                                */
/******************************************************************/


#if( os.linux )

	procedure fileio.read( Handle:dword; var buffer:var; count:uns32 ); 
		@nodisplay;
		@noframe;
		
	begin read;

		push( ebp );
		mov( esp, ebp );
		pushfd();
		cld();
		
		push( Handle );
		push( buffer );
		push( count );
		call linux.read;
		test( eax, eax );
		js FileReadError;
		
		popfd();
		pop( ebp );
		ret( _parms_ );
		
	FileReadError:
		raise( ex.FileReadError );
			
	end read;
			
#elseif( os.freeBSD )

	procedure fileio.read( Handle:dword; var buffer:var; count:uns32 ); 
		@nodisplay;
		@noframe;
		
	begin read;

		push( ebp );
		mov( esp, ebp );
		
		bsd.read( Handle, val buffer, count );
		jc FileReadError;
		
		pop( ebp );
		ret( _parms_ );
		
	FileReadError:
		raise( ex.FileReadError );
			
	end read;
			
#elseif( os.macOS )

	procedure fileio.read( Handle:dword; var buffer:var; count:uns32 ); 
		@nodisplay;
		@noframe;
		
	begin read;

		push( ebp );
		mov( esp, ebp );
		
		mac.read( Handle, val buffer, count );
		jc FileReadError;
		
		pop( ebp );
		ret( _parms_ );
		
	FileReadError:
		raise( ex.FileReadError );
			
	end read;
			
#elseif( os.win32 )

	procedure fileio.read( Handle:dword; var buffer:var; count:uns32 ); 
		@nodisplay;
		@noframe;
		
	var
		BytesRead: dword;
		
	begin read;

		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		push( ecx );
		push( edx );
		pushfd();
		cld();
		
		ReadFile( 0, BytesRead, count, buffer, Handle );
		test( eax, eax );
		jz FileReadError;

		mov( BytesRead, eax );
		popfd();
		pop( edx );
		pop( ecx );
		leave();
		ret( _parms_ );
		
	FileReadError:
		raise( ex.FileReadError );
		
	end read;
	
#else

	#print( "Unknown OS" )
		
#endif
	
end FileIOUnit;

