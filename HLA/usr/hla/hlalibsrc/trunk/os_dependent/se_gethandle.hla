
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit StdOutput;



#include( "../include/stderrunit.hhf" )
#include( "os.hhf" )


#if( os.win32 )

	/***********************************************************/
	/*                                                         */
	/* GetStdErrHandle-                                        */
	/*                                                         */
	/* Returns the Windows standard error device handle        */
	/* in the EAX register.                                    */
	/*                                                         */
	/* If this module has already called Windows to obtain     */
	/* the stdout handle, then this procedure simply returns   */
	/* the handle stored in the StdOutHandle variable.         */
	/* Otherwise, it calls Windows to obtain the handle and    */
	/* initializes the static variables above with appropriate */
	/* values and then returns the handle obtained from        */
	/* MS Windows.                                             */
	/*														   */
	/* Non-Windows versions: just return 2, which is the	   */
	/* stderr handle in *nix systems.						   */
	/*                                                         */
	/***********************************************************/


	procedure GetStdErrHandle;	@external( "STDERR_GETSTDERRHANDLE" );
	procedure GetStdErrHandle; @noframe;
	begin GetStdErrHandle;

		push( ecx );
		push( edx );
		pushfd();
		cld();

		cmp( HasStdErrHandle, false );
		jne hasHandle;
		
			GetStdHandle( -12 );
			mov( eax, StdErrHandle );
			mov( true, HasStdErrHandle );
			
		hasHandle:
		popfd();
		pop( edx );
		pop( ecx );
		mov( StdErrHandle, eax );
		ret();

	end GetStdErrHandle;
	
#elseif( os.linux | os.freeBSD | os.macOS )

	procedure GetStdErrHandle; @noframe;
	begin GetStdErrHandle;

		mov( 2, eax );
		mov( true, HasStdErrHandle );
		ret();

	end GetStdErrHandle;
	
#else

	#error( "Unknown OS!" )
	
#endif

end StdOutput;




	

