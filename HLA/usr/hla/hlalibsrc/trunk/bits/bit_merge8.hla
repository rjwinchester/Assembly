
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit bitsUnit;

#include( "bits.hhf" );


/****************************************************************/
/*                                                              */
/* bits.merge8-                                                 */
/*                                                              */
/* Given two 8-bit values (odd and even), this function merges  */
/* the two bytes to produce a word, with odd's bits in the odd- */
/* numbered bit positions and even's bits in the even-numbered  */
/* bit positions. Returns the result in AX (zero-extended into  */
/* EAX).                                                        */
/*                                                              */
/****************************************************************/

procedure bits.merge8( even:byte; odd:byte ); @nodisplay; @noframe;
const
	_even	:text := "esp+16";
	_odd	:text := "esp+12";
begin merge8;

	push( ebx );
	push( ecx );
	
	// Stack at this point:
	//
	// esp+16:	even
	// esp+12:	odd
	// esp+8:	return address
	// esp+4:	ebx
	// esp:		ecx
	
	movzx( (type byte [_odd]), ebx );
	movzx( (type byte [_even]), ecx );
	xor( eax, eax );
	movzx( bits.SpreadBitsOdd8 [ ebx*2 ], eax );
	or(  bits.SpreadBitsEven8[ ecx*2 ], ax );
	
	pop( ecx );
	pop( ebx );
	ret( _parms_ );
	
end merge8;
	
	
	
		
end bitsUnit;
