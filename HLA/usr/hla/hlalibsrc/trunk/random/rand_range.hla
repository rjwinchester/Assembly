
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit randomUnit;
#include( "../include/random.hhf" )


// range-	Returns a uniformly distributed random number between
//			startRange and endRange (inclusive) using the
//			rand.random random number generator as the base.

procedure rand.range( startRange:dword; endRange:dword ); 
	@nodisplay; 
	@noalignstack;
	@noframe;
	
begin range;

	push( ebp );
	mov( esp, ebp );
	
	push( ebx );
	push( edx );
	mov( endRange, ebx );
	sub( startRange, ebx );
	inc( ebx );
	jns gotABS;

		neg( ebx );

	gotABS:
	jz ValueOutOfRange;

	// Note: most random number generator's L.O. result bits
	// are not especially random.  For computing ranges, it is
	// better to use the H.O. bits.  This produces a more
	// random result.
	
	rand.random();
	bswap( eax );	

	// Okay, compute the range using the mod operation
	// and adding in the low end value of the range.

	xor( edx, edx );
	div( ebx );
	mov( edx, eax );
	add( startRange, eax );
	pop( edx );
	pop( ebx );
	pop( ebp );
	ret( _parms_ );

ValueOutOfRange:
	raise( ex.ValueOutOfRange );
	
end range;


end randomUnit;
