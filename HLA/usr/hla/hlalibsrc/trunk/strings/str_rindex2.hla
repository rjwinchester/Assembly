
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


/***********************************************************************/
/*                                                                     */
/* rindex2-                                                             */
/*                                                                     */
/* Similar to index above, except rindex searches the string backwards */
/* (from right to left) to find the *last* occurrence of src2 in       */
/* src1.                                                               */
/*                                                                     */
/***********************************************************************/

procedure str.rindex2( src1:string; src2:string ); @noframe;
begin rindex2;

	push( ebp );
	mov( esp, ebp );
	pushfd();
	push( ebx );
	push( ecx );
	push( edx );
	push( esi );
	push( edi );
	cld();
	
	mov( src2, edi );
	mov( src1, esi );
	
	test( edi, edi );
	je AttemptToDerefNULL;
	test( esi, esi );
	je AttemptToDerefNULL;
	
	mov( (type str.strRec [edi]).length, ebx );
	mov( (type str.strRec [esi]).length, edx );
	
	// If the length of src2 is zero, return failure.
	// If the length of src2 is greater than src1, return failure.
	
	mov( -1, eax ); // Assume failure
	test( ebx, ebx );
	jz FoundMatch;

	cmp( edx, ebx );
	jnae FoundMatch;
	
		sub( ebx, edx );
		add( edx, esi );		// Start at the end of the string.
		mov( edi, eax );		// Save ptr to src2 so we can reset.
		repeatUntilEDXlt0:
			
			mov( ebx, ecx );
			mov( eax, edi );
			push( esi );
			repe.cmpsb();	// See if the string is at the current
			jne NotFound;	// position.
			
				// We found the string, so compute the
				// index and exit the loop.
					
				pop( eax );			// Retrieve ptr into src1.				
				sub( src1, eax );	// Compute index.
				jmp FoundMatch;
				
			NotFound:
			
			// Okay, src2 didn't match at the current position,
			// try the previous character position in src1.
			
			pop( esi );			// Retrieve ptr into src1.
			dec( esi );			// Bump down by one character position.
			sub( 1, edx );		// Are we done yet?
			jns repeatUntilEDXlt0;
			
		// If we get down here, then src2 is not a substring of src1.
		
		mov( -1, eax );		// Deprecated!
			
		
	FoundMatch:
	pop( edi );
	pop( esi );
	pop( edx );
	pop( ecx );
	pop( ebx );
	popfd();
	cmp( eax, -1 );		// Set carry on success, clear if no match.
	pop( ebp );
	ret( _parms_ );
		
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end rindex2;

end stringUnit;




	

