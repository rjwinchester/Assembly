
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


/****************************************************/
/*                                                  */
/* eq,                                              */
/* ne,                                              */
/* lt,                                              */
/* gt,                                              */
/* le,                                              */
/* gt- These routines perform string comparisons.   */
/*     They compare the src1 string against the     */
/* 	src2 string and return true or false (1 or 0)   */
/* 	in the carry flag depending upon the result     */
/* 	of the comparison.                              */
/* 	                                                */
/****************************************************/


procedure str.ne( src1:string; src2:string ); @noframe;
begin ne;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	pushfd();
	push( esi );
	push( edi );
	push( ecx );
	cld();
	

	// Get the string pointers and make sure they are non-NULL.
	
	mov( src1, esi );
	mov( src2, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;
	test( esi, esi );
	jz AttemptToDerefNULL;

	mov( (type str.strRec [esi]).length, ecx );
	
	// If the lengths are not equal, the strings
	// cannot be equal; so do a quick check for that
	// first.

	cmp( ecx, (type str.strRec [edi]).length );
	jne StrCmp;
	
	// Okay, the lengths are equal, so compare the strings.
	//
	// repe.cmpsb(); -- This is slow, don't use it!
	
		test( ecx, ecx );
		jz StrCmp;			// If lengths are zero, they're equal.
		cmp( ecx, 4 );
		jb CmpLT4;
		
	whileGE4:
		mov( [esi+ecx-4], eax );
		cmp( eax, [edi+ecx-4] );
		jne StrCmp;
		
		sub( 4, ecx );
		ja whileGE4;
		jz StrCmp;
		add( 4, ecx );
				
	// Less than four bytes, but greater than zero, to compare here.
	
	CmpLT4:
		cmp( ecx, 1 );
		jb	StrCmp;
		je	Cmp1;
		cmp( ecx, 2 );
		ja	Cmp3;
		
		// Two extra bytes, compare them here:
		
		mov( [esi+ecx-2], ax );
		cmp( ax, [edi+ecx-2] );
		jmp StrCmp;
		
	Cmp1:
	
		// One extra pair of bytes, compare them here:
		
		mov( [esi+ecx-1], al );
		cmp( al, [edi+ecx-1] );
		jmp StrCmp;
		
	Cmp3:
	
		// Three extra bytes, compare them here:
		
		mov( [esi+ecx-2], ax );
		cmp( ax, [edi+ecx-2] );
		jne	StrCmp;
		mov( [esi+ecx-3], al );
		cmp( al, [edi+ecx-3] );


	// Set EAX according to the comparison result.
	
	StrCmp:
		mov( 0, eax );	// Clear H.O. three bytes of EAX.
		setne( al );
		
	pop( ecx );
	pop( edi );
	pop( esi );
	popfd();
	cmp( al, 1 );		// Set carry flag for return.
	cmc();
	pop( eax );
	pop( ebp );
	ret( _parms_ );
		
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end ne;


end stringUnit;




	

