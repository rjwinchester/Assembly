
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


/**********************************************************/
/*                                                        */
/* rchpos3-                                               */
/*                                                        */
/* Similar to rchpos2 except that this procedure provides */
/* an extra parameter to let you specify a starting index */
/* (at the end of the string) to start scanning backwards */
/* from.                                                  */
/*                                                        */
/**********************************************************/




procedure str.rchpos3( src1:string; offs:dword; src2:char ); 
	@noframe;
begin rchpos3;

	push( ebp );
	mov( esp, ebp );
	push( ecx );
	push( edi );
	pushfd();
	
	mov( src1, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;

	try		// Protect use of direction flag
	
			// If there are any characters in this string, scan from the
			// end of the string to the beginning of the string looking
			// for the specified character.
			
			mov( (type str.strRec [edi]).length, eax );
			mov( offs, ecx );
			cmp( ecx, eax );
			jae StringIndexError;
			
			test( eax, eax );
			jz notFound;
			
				add( eax, edi );			// Pt at end of string.
				neg( ecx );
				add( eax, ecx );			// Compute # of chars to scan.
				dec( edi );					// Back off from indexed char.
				mov( src2, al );
				std();		// Search backwards!
				repne.scasb();				// Do the search.
				jnz notFound;
				
					// Found the char in the string.

					sub( src1, edi );		// Compute index+1 (edi was dec'd!).
					lea( eax, [edi+1] );	// Return index in eax.
					jmp Found;
					
				
			notFound:		
			mov( -1, eax );		// Deprecated!
				

		Found:
		
	  anyexception
	  	popfd();
		reraise( eax );
		
	endtry;
	popfd();
	pop( edi );
	pop( ecx );
	pop( ebp );
	cmp( eax, -1 );		// Set carry on success, clear if no match.
	ret( _parms_ );	
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

StringIndexError:
	raise( ex.StringIndexError );

end rchpos3;

end stringUnit;




	

