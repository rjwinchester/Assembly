
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;
?@noframe := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


// zeroOrOneCset2-
// zeroOrOneCset3-
// zeroOrOneCset4-
//
//	Skips zero or one characters in a string that are members of
// the cst character set. Because this function can match zero
// characters, it always succeeds, even if the first character
// of the string is not a member of cst.
//
// zeroOrOneCset3-
//	Also returns the remainder string in the rem parameter.	 
// This function returns the entire src string as the remainder
// if the first character is not a member of cst.
//
// zeroOrOneCset4-
//	Returns an empty string or a string of length one in the mat
// parameter. Returns the remainder (which could be the whole string)
// in the rem parameter.
			

procedure str.zeroOrOneCset3( src:string; cst:cset; rem:string ); 
begin zeroOrOneCset3;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( esi );
	
	mov( src, esi );
	test( esi, esi );
	jz AttemptToDerefNULL;
	

	// If we don't match a character, then the index into src for the rem
	// string is zero, else it is one:
	
	movzx( (type char [esi]), eax );
	bt( eax, cst );
	
	// Compute the length of the remainder string. Note that carry=1
	// if we matched a char (in which case, rem's length is src's length
	// minus one).
	
	mov( 0, eax );
	adc( 0, eax );
	neg( eax );
	add( (type str.strRec [esi]).length, eax );
	
	cmp( esi, rem );
	je srcEQrem;
	
		str.last( (type string esi), eax, rem );
		jmp allDone;
		
	srcEQrem:
		str.last( (type string esi), eax );	

			
	allDone:	
	pop( esi );
	pop( eax );
	pop( ebp );
	stc();				// We always succeed.
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end zeroOrOneCset3;

end stringUnit;




	

