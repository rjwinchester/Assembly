
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


/***********************************************************/
/*                                                         */
/* insert3,                                                */
/* insert4,                                                */
/* a_insert-                                               */
/*                                                         */
/* Inserts a source string into a destination              */
/* string before a specified character position            */
/* in the destination string.                              */
/*                                                         */
/* insert inputs-                                          */
/*                                                         */
/* src:  Pointer to string to insert src into.             */
/*			(also destination string for insert3)		   */
/* start: Index into dest to begin insertion of src.       */
/* ins:   String to insert into src.                       */
/*                                                         */
/* insert outputs-                                         */
/*                                                         */
/* dest:  Modified string is stored into the dest address. */
/*			(insert4 only)								   */
/*                                                         */
/* Note:  insert will raise a "StringOverflow" exception   */
/*        if the dest maxlen value is too small to hold    */
/* 	      the original dest string and the inserted src    */
/* 	      string.                                          */
/* 	                                                       */
/* ainsert-                                                */
/*                                                         */
/* Similar to insert, except ainsert does not modify the   */
/* dest string; instead, it allocates storage for a new    */
/* string on the heap and builds the new string in the     */
/* allocated storage.  This routine returns a pointer to   */
/* the new string in the EAX register.                     */
/*														   */
/* If the start index is greater than the length of the	   */
/* destination string, these routines will simply append   */
/* the source string to the end of the dest string.        */
/* 	                                                       */
/***********************************************************/


procedure str.insert4
(
	ins		:string;
	start	:dword;
	src		:string;
	dest	:string
);  @noframe;  
begin insert4;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( ecx );
	push( esi );
	push( edi );
	
	// Get the string pointers and make sure they are non-NULL.
	
	mov( src, edi );
	mov( ins, esi );
	mov( dest, ecx );
	test( esi, esi );
	jz AttemptToDerefNULL;
	test( edi, edi );
	jz AttemptToDerefNULL;
	test( ecx, ecx );
	jz AttemptToDerefNULL;
	
	// See if the destination string is large enough to hold the result.
	
	mov( (type str.strRec [edi]).length, eax );
	add( (type str.strRec [esi]).length, eax );
	cmp( eax, (type str.strRec[ecx]).maxlen );
	ja StringOverflow;
	
	
	// Verify that the "start" value is less than the length of the
	// dest string.
	
	mov( start, eax );
	cmp( eax, (type str.strRec [edi]).length );
	jb startLTlength;
	
		mov( (type str.strRec [edi]).length, eax );
		
	startLTlength:
	
	// Okay, copy the beginning of the src string to the dest:
	
	str.substr( edi, 0, eax, ecx );
	
	// Now copy the ins string to the dest string:
	
	str.cat( ins, (type string ecx) );
	
	// If needed, copy the remaining characters from src to dest:
	
	cmp( eax, (type str.strRec [ecx]).length );
	jae noRemainingChars;
	
		str.catsub( src, eax, $FFFF_FFFF, (type string ecx) );
		
	noRemainingChars:	
		
	pop( edi );
	pop( esi );
	pop( ecx );
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
				 
StringOverflow:
	raise( ex.StringOverflow );
	
end insert4;

end stringUnit;




	

