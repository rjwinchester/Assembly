
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );
#include( "memory.hhf" );



/********************************************************/
/*                                                      */
/* delLeadingSpaces1,                                   */
/* delLeadingSpaces2,                                   */
/* a_delLeadingSpaces-                                  */
/*                                                      */
/* Deletes any leading spaces from a string.            */
/*                                                      */
/* delLeadingSpace1 is destructive, it modifies the     */
/* string passed as a  parameter.                       */
/*                                                      */
/* delLeadingSpace2 is nondestructive, it copies the    */
/* source to the dest string (w/o leading spaces).      */
/*                                                      */
/* a_delLeadingSpace makes a copy of the string before  */
/* trimming any leading spaces.                         */
/*                                                      */
/********************************************************/


procedure str.a_delLeadingSpaces( src: string ); @noframe;
begin a_delLeadingSpaces;

	push( ebp );
	mov( esp, ebp );
	push( edi );
	
	mov( src, edi );
	test( edi, edi );
	jz attemptToDerefNULL;
	mov( edi, eax );	// Save so we can compute index of 1st non-blank char.
	
	// Skip over all leading spaces.
	
	dec( edi );
	repeatWhlWS:
	
		inc( edi );
		cmp( (type char [edi]), ' ' );
		je repeatWhlWS;
		cmp( (type char [edi]), stdio.tab );
		je repeatWhlWS;
		
	
	// Create a new string that is the substring of the current string
	// without any leading spaces.
	
	sub( eax, edi );							// Index of 1st non-blank char.
	mov( (type str.strRec [eax]).length, eax );	// Length of old string.
	sub( edi, eax );							// Length of new string.
	str.a_substr( src, edi, eax );
	
	pop( edi );
	pop( ebp );
	ret( _parms_ );

attemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end a_delLeadingSpaces;

end stringUnit;




	

