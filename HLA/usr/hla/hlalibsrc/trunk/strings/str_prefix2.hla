
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


/***********************************************************/
/*                                                         */
/* str.prefix2-                                            */
/*                                                         */
/* Returns true in EAX if src1 begins with the string src2 */
/* (that is, if src2 is a prefix of src1).                 */
/*                                                         */
/***********************************************************/


procedure str.prefix2( src1:string; src2:string ); @noframe;
begin prefix2;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( esi );
	push( edi );
	push( ecx );
	pushfd();
	cld();
	xor( eax, eax );	// Assume it's not a prefix.
	
	
		// Get the string pointers and make sure they are non-NULL.
		
		mov( src1, esi );
		mov( src2, edi );
		
		test( esi, esi );
		jz AttemptToDerefNULL;
		
		test( edi, edi );
		jz AttemptToDerefNULL;
	
		mov( (type str.strRec [edi]).length, ecx );
		test( ecx, ecx );
		jz notAPrefix;	// Fail if src2's length is zero.
		
		// If src2's length is greater than src1's length,
		// then src2 cannot be a prefix of src1.

		cmp( ecx, (type str.strRec [esi]).length );
		ja notAPrefix;
					
		// Okay, length( src2 ) <= length( src1 ), so compare the 
		// strings up to the length of src2:
		//
		// TODO: Need to replace cmpsb instruction with
		// discrete instructions.
		
		repe.cmpsb();

		// Set EAX according to the comparison result.
		
		sete( al );
		
	notAPrefix:
	popfd();
	pop( ecx );
	pop( edi );
	pop( esi );
	cmp( al, 1 );		// Set carry flag for return.
	cmc();
	pop( eax );
	pop( ebp );
	ret( _parms_ );
		
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end prefix2;

end stringUnit;




	

