unit str_columnize_unit;

// synopsis:
//	take an array of strings, find length of longest string,
//	create a single string as the concatenation of each of
//	the strings in the array, with each string padded to 
//	"max-string-len+1" characters, with spaces added at the
//	end of each string.

//	Version History:
//
//	Revision:	3
//	Author:		Sevag Krikorian
//	Date:		Oct. 01, 2007
//	Note:		changed to library format, code improvement
//				now returns success/failure status in carry
//
//	Revision:	2
//	Author:		Sevag Krikorian
//	Date:		Sep. 06, 2007
//	Note:		removed some unnecessary instructions
//				fixed columnize4, updated with new zstr.cpySize

//	Revision:	1
//	Author:		Sevag Krikorian
//	Date:		Aug 21, 2007
//	Note:		1st release
//

	#includeonce ("strings.hhf")
	#includeonce ("excepts.hhf")
	#includeonce ("memory.hhf")


	procedure str.columnize4( var s:var; numStrs:dword; tabCols:dword; dest:string );
		@nodisplay; @noframe; @noalignstack;

		// s			array of strings
		// numStrs		number of strings in array
		// tabCols		width of padding
		// dest			concatenation destination
		//
		// create a contacenation of an array of strings into dest
		// all strings padded with spaces to width of 'tabCols'
		// if string length is longer than 'tabCols' then truncate
		// to tabCols -1
		//
		var
			saveEAX	:dword;
			saveEBX	:dword;
			saveECX	:dword;
			saveEDX	:dword;
			saveESI	:dword;
			saveEDI	:dword;
		
	begin columnize4;

		push( ebp );
		mov( esp, ebp );

		sub( _vars_, esp );

		mov( eax, saveEAX );
		mov( ebx, saveEBX );
		mov( ecx, saveECX );
		mov( edx, saveEDX );
		mov( esi, saveESI );
		mov( edi, saveEDI );
		
		mov( s, ebx );
		test( ebx, ebx );
		jz raiseDerefNULL;

		mov( dest, eax );
		test( eax, eax );
		jz raiseDerefNULL;

		mov( numStrs, eax );
		test( eax, eax );
		jz returnNULL;
		
		// if tabCols <= 1, then we can't do anything, return NULL?
		mov( tabCols, ecx );
		cmp( ecx, 1 );
		jbe returnNULL;
		
		// see if dest string has enough storage for all the strings
		mul( ecx );
		mov( dest, edi );
		cmp( eax, (type str.strRec[edi]).maxlen );
		ja raiseStringOverflow;
		
		// we know the length, so do it in advance
		mov( eax, (type str.strRec[edi]).length );

		// loop through the array
		// concatenate the strings with padding
		// edi = current dest position,
		// ecx = width (tabCols),
		// ebx = current source
		or( -1, eax );
		mov( s, esi );	// esi = pointer to array
		
		_arrayloop:
			add( 1, eax );
			cmp( eax, numStrs );
			je _doneloop;
			
			mov( [esi + eax*4], ebx );
			push( eax );
			zstr.cpySize( ebx, ecx, ' ', edi );
			mov( eax, edi );
			pop( eax );

			// if strlen ebx was  >= tabCols in ecx, then
			// truncate to tabCols-1
			cmp( ecx, (type str.strRec[ebx]).length );
			ja _arrayloop;
			mov( ' ', (type byte [edi-1]) );
			
			jmp _arrayloop;
			
		_doneloop:
		mov( #0, (type byte[edi]) );
		
		stc();		// set carry = success
		jmp done;


		returnNULL:
			xor( eax, eax );
			clc();	// clear carry = failure

		done:
		mov( saveEAX, eax );
		mov( saveEBX, ebx );
		mov( saveECX, ecx );
		mov( saveEDX, edx );
		mov( saveESI, esi );
		mov( saveEDI, edi );
		
		mov( ebp, esp );
		pop( ebp );
		ret( _parms_ );

		raiseDerefNULL:
			raise( ex.AttemptToDerefNULL );

		raiseStringOverflow:
			raise( ex.StringOverflow );


	end columnize4;





end str_columnize_unit;
