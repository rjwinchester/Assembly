
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );


/*******************************************************/
/*                                                     */
/* skipInCset2-                                        */
/*                                                     */
/* This routine skips over characters appearing in a   */
/* string until a character that is not a member       */
/* of a specified character set is encountered.        */
/*                                                     */
/* inputs:                                             */
/*                                                     */
/* src1- Input string to scan.                         */
/* src2- Character set holding character to skip       */
/*       in the src1 string.                           */
/* 	                                                   */
/* returns:                                            */
/*                                                     */
/* EAX-  Index of first character in src1 that is      */
/*       not a member of the character set src2.	   */
/*		 The length of the string is returned in EAX   */
/*       if all characters in the string are members   */
/*       of the src2 character set.                    */
/*                                                     */
/*******************************************************/



procedure str.skipInCset2( src1: string; src2:cset ); @noframe;
begin skipInCset2;

	push( ebp );
	mov( esp, ebp );
	push( ecx );
	push( edi );
	
	// Get the string address and verify that it is non-NULL.
	
	mov( src1, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;

	mov( (type str.strRec [edi]).length, ecx );	// Get length.
	test( ecx, ecx );
	jz allDone;					// Always fail if zero-length string
	add( edi, ecx );			// Point ECX at end of string.
	
	xor( eax, eax );			// Zero out H.O. three bytes of char-index.
	whlLoop:					// Repeat until we run of the start of the str.
	
		mov( [edi], al );				// Get the next char in string.
		bt( eax, (type dword src2) );	// See if a member of the set.
		jnc ExitWhlLoop;					// Exit loop if it isn't.
		inc( edi );						// Move to next character.
		cmp( edi, ecx );
		jb whlLoop;
		
	allDone:
	
		// If we hit the end of the string, adjust EDI so
		// we return -1 as the function's result:

		mov( src1, edi );
		dec( edi );
	 
	ExitWhlLoop:
	
	sub( src1, edi );		// Compute index of first char not in string
	mov( edi, eax );		//  and move index into EAX (string length if
	pop( edi );				//  all chars are members of src2).
	pop( ecx );
	pop( ebp );
	cmp( eax, -1 );			// Set carry on success, clear if no match.
	ret( _parms_ );	
		 
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
		 
end skipInCset2;

end stringUnit;




	

