unit srt_reverse_unit;

// synopsis
//	reverse characters in a string
//	Version History:
//
//	Revision:	3
//	Author:		Sevag Krikorian
//	Date:		Oct. 10, 2007
//	Note:		changed to library format, some code optimization
//
//	Revision:	2
//	Author:		Sevag Krikorian
//	Date:		Sep. 06, 2007
//	Note:		removed some unnecessary instructions
//
//	Revision:	1
//	Author:		Sevag Krikorian
//	Date:		Aug. 31, 2007
//	Note:		1st release
//				reversing an empty string returns an
//				empty string


	#includeOnce( "strings.hhf" )
	#includeOnce( "excepts.hhf" )
	#includeOnce( "memory.hhf" )

	procedure str.a_reverse( src:string );
		@nodisplay; @noframe; @noalignstack;
		
		// creates a string on the heap and copies
		// src in reverse order
		// returns string in EAX
		var
			saveEBX	:dword;
			saveECX	:dword;
			saveEDX	:dword;

		
	begin a_reverse;
		
		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		mov( ebx, saveEBX );
		mov( ecx, saveECX );
		mov( edx, saveEDX );
		
		mov( src, ebx );
		test( ebx, ebx );
		jz raiseDerefNULL;
		
		mov( (type str.strRec[ebx]).length, eax );
		str.alloc( eax );
		mov( eax, edx );
		push( edx ); // save a reference of allocated string
		
		// start at end of src
		mov( ebx, ecx );
		add( (type str.strRec[ebx]).length, ebx );
		
		// stop a 1 char before start of src
		sub( 1, ecx );
		sub( 1, edx );
		
		reverseLoop:

			add( 1, edx );
			sub( 1, ebx );
			cmp( ebx, ecx );
			je doneLoop;
			mov( [ebx], al );
			mov( al, [edx] );
			jmp reverseLoop;
			
		doneLoop:
		
		mov( #0, (type byte[edx]) );
		pop( eax ); // restore string pointer
		sub( eax, edx );
		mov( edx, (type str.strRec[eax]).length );
		
		mov( saveEBX, ebx );
		mov( saveECX, ecx );
		mov( saveEDX, edx );
		
		mov( ebp, esp );
		pop( ebp );
		ret( _parms_ );
		
		raiseDerefNULL:
			raise( ex.AttemptToDerefNULL );

	end a_reverse;

end srt_reverse_unit;
