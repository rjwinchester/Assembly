unit str_field_unit;

//	Synopsis:
//	A "field" in a string consists of a sequence of characters separated by
//	characters in some "delimiter set". This function uses a 'standard'
//	delimiter set (see str.tokenize) that is used to separate command-line
//	parameters. It returns the nth field of a string (n specified by the
//	field' parameter) as a string 
//	Note that the first field is field #0.


//	Version History:
//
//	Revision:	3
//	Author:		Sevag Krikorian
//	Date:		Oct 2, 2007
//	Note:		changed to library format, code improvement
//
//	Revision:	2
//	Author:		Sevag Krikorian
//	Date:		Sep. 02, 2007
//	Note:		separated engine for code reuse, completed  all functions

//	Revision:	1
//	Author:		Sevag Krikorian
//	Date:		July 30, 2007
//	Note:		1st release
//

	#includeonce ("strings.hhf")
	#includeonce ("excepts.hhf")
	#includeonce ("memory.hhf")

	procedure str._getFieldIndex( s:string; field:dword; var cst:cset );
		@noframe; @nodisplay; @noalignstack;

		// getField engine
		// this is a utility procedure not expected to be called outside
		// of the library
		//
		// Returns
		//			carry	= true/false on success/failure
		//			EBX = start of field
		//			ESI = end of field
		// calling procedure must preserve registers EBX, ESI, ECX, EDX

	begin _getFieldIndex;
		push( ebp );
		mov( esp, ebp );

		// #0 EOS must be enforced
		mov( cst, edx );
		or( 1, (type byte [edx]) );
		
		mov( s, esi );
		test( esi, esi );
		jz raiseDerefNull;
		
		xor( eax, eax );
		or (-1, ecx);	// ecx = current index
		sub( 1, esi );
		_getField_loop:
			add( 1, ecx );
			add( 1, esi );
			mov( esi, ebx );
			mov( [esi], al );

			cmp( al, #0 );
			je _gotField;
			
			// check for quotes
			cmp( al, '"' );
			jne _checkSingleQuote;
			mov( '"', ah );
			jmp _dequote;
			
			_checkSingleQuote:
			cmp( al, '''' );
			jne _checkDelims;
			mov( '''', ah );
			
			_dequote:
			add( 1, ebx ); // skip over quote
			_dequote_loop:
				add( 1, esi );
				mov( [esi], al );
				test( al, al );
				jz _gotField;  // should we force end quote?
				cmp( al, ah );
				jne _dequote_loop;
				
				// found matching quote, but we need to advance
				// to next delimiter

			
			_checkDelims:
			xor( eax, eax );	// to clear HO bit
			sub( 1, esi );
			_findField:
				add( 1, esi );
				mov( [esi], al );
				bt( eax, (type dword [edx]) );
				jnc _findField;
				

		_gotField:
			
			// check to see if this is the index we want
			
			cmp (ecx, field);
			je _returnString;
			
			// if al = 0 and no index match, we haven't found anything,
			// return zero
			test( al, al );
			jnz _getField_loop;
			
			clc();
			jmp done;
			
	
			_returnString:
			
			// if last charater of field is a quote,
			// adjust position to not copy the quote
			cmp( ebx, esi );
			je returnTrue;
			mov( [esi-1], al);
			cmp( al, '''' );
			je _subESI;
			cmp( al, '"' );
			jne returnTrue;
			
			_subESI:
			sub( 1, esi );

			returnTrue:
			stc();
			
		done:
		
		pop( ebp );
		ret( _parms_ );

		raiseDerefNull:
			raise( ex.AttemptToDerefNULL );
			
	end _getFieldIndex;

		


end str_field_unit;
