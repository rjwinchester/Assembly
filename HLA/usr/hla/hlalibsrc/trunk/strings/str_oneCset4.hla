
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit stringUnit;
?@nodisplay := true;
?@nostackalign := true;
?@noframe := true;

#include( "strings.hhf" );
#include( "excepts.hhf" );

/*************************************************************/
/*                                                           */
/* oneCset2-                                                 */
/* oneCset3-                                                 */
/* oneCset4-                                                 */
/*                                                           */
/* Returns true if the first character of the source string  */
/* is a member of the cst character set.                     */
/*                                                           */
/* oneCset3-	returns the remainder of the string in rem,  */
/* 			if the first char of src is a member of cst      */
/* 			(does not modify rem otherwise)                  */
/* 			                                                 */
/* oneCset4-	returns remainder and matched strings in the */
/* 			rem and mat parameter strings if the first       */
/* 			char of src is in cst. Does not modify           */
/* 			rem or mat otherwise.                            */
/* 			                                                 */
/*************************************************************/
			

procedure str.oneCset4( src:string; cst:cset; rem:string; mat:string ); 
begin oneCset4;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( esi );
	
	mov( src, esi );
	test( esi, esi );
	jz AttemptToDerefNULL;
	
	mov( (type str.strRec [esi]).length, eax );	// Fail if empty string
	test( eax, eax );							// Clears carry!
	jz allDone;

		movzx( (type char [esi]), eax );
		bt( eax, cst );
		jnc allDone;
		
		// Save the character we matched so we can return it.
		// Note that we don't store the character away just yet
		// because mat could be the same as src and we need to
		// preserve the src string until after we save the rem
		// string.
		
		push( (type dword [esi]) );
		
		// If we matched the char, then return the remainder of the
		// string in rem. We have to specially handle this operation
		// if src and rem are the same string.
		
		cmp( esi, rem );	// Special case if src==rem
		je specialCase;
		
			// src <> rem, so just do a substring operation
			// and copy the remainder of the string to rem.
			
			mov( (type str.strRec [esi]).length, eax );
			sub( 1, eax );
			str.substr( src, 1, eax, rem );
			jmp doMat;	// Return true, because we matched.
			
		
		// Note: if src and rem overlap, then we have to copy the
		// data a character at a time with the direction flag clear.
		
		specialCase:
			pushfd();
			cld();
			push( edi );
			push( ecx );
			mov( (type str.strRec [esi]).length, ecx );
			sub( 1, ecx );
			mov( ecx, (type str.strRec [esi]).length );
			mov( esi, edi );
			add( 1, esi );
			rep.movsb();
			mov( 0, (type byte [edi]) );
			pop( ecx );
			pop( edi );
			popfd();
		
		
		// Return the char we matched in mat:
		
	  doMat:
		pop( eax );
		mov( mat, esi );
		cmp( (type str.strRec [esi]).maxlen, 1 );
		jb StringOverflow;
		
		mov( al, [esi] );							// Save the char
		mov( 0, (type byte [esi+1]) );				// Zero terminate.
		mov( 1, (type str.strRec [esi]).length );	// Save the length
		stc();
		
	allDone:	
	pop( esi );
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
	
StringOverflow:
	raise( ex.StringOverflow );

end oneCset4;

end stringUnit;




	

