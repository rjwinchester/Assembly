
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit memory;


#include( "strings.hhf" )
#include( "../include/mem.hhf" )

// str.realloc:
//
//	Reallocates storage for an existing HLA string object.

procedure str.realloc( theStr:dword; size:dword ); 
	@nodisplay;
	@noframe;
begin realloc;

	push( ebp );
	mov( esp, ebp );
	
	// This is real easy.  Convert the string pointer to
	// a memory block pointer and then call realloc to do
	// all the hard work.

		
	mov( theStr, eax );
	test( eax, eax );
	jz AttemptToDerefNULL;
	
	sub( 8, eax );
	add( 9, size );		// Allow for string overhead.
	mem.realloc( eax, size );
	
	// Okay, now convert the memory pointer back to a string
	// pointer:
	
	add( 8, eax );
	
	// Set the new maxlen:
	
	mov( size, (type str.strRec [eax]).maxlen );
	pop( ebp );
	ret( _parms_ );		

AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end realloc;

end memory;




	

