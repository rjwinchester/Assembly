
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit memory;

#include( "strings.hhf" )
#include( "../include/mem.hhf" )


// alloc2:
//
//	Allocates a block.
//
// The callback thunk is passed the following:
//
//	EAX - pointer to the newly allocated block
//	ECX - block size
//
//	The callback thunk may freely use EBX, ECX, ESI, and EDI
//	as it sees fit. The direction flag will be clear.
//  alloc2 has already allocated an allocated memory
//	block for the data, and EAX points at this memory block.
//	The callback thunk must return EAX pointing at some memory
//	block of the specified size (presumably, but not necessarily
//	the one that mem.alloc allocated).  



procedure mem.alloc2
( 
	size:dword; 
	callback:thunk 
); 
	@nodisplay;
	@noframe;
	
begin alloc2;

	push( ebp );
	mov( esp, ebp );
	push( ebx );
	push( ecx );
	push( edx );
	push( edi );
	push( esi );
	pushfd();
	
	mem.alloc( size );
	cld();
	mov( size, ecx );
	callback();
	popfd();
	pop( esi );
	pop( edi );
	pop( edx );
	pop( ecx );
	pop( ebx );
	pop( ebp );
	ret( _parms_ );

end alloc2;
	
end memory;




	

