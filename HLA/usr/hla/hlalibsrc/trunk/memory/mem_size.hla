
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit memory;

#include( "strings.hhf" )
#include( "../include/mem.hhf" )

// mem.size:
//
//	Returns zero if memptr does not point within a valid, allocated,
// block on the heap. Otherwise, it returns the allocated size of the
// memory block. Note that this may not be the original requested size,
// rather, it is the actual allocation, including any padding bytes
// at the end of the allocation. This value does *not* include the
// size of the header information.




procedure mem.size( memptr: dword ); 
	@nodisplay;
	@noframe;
begin size;

	push( ebp );
	mov( esp, ebp );
	#if( @thread )
	
		_hla.memCSenter();
		
	#endif
	
	push( ebx );
	push( ecx );
	push( edx );
	mov( listHead, ebx );
	mov( memptr, edx );
	xor( eax, eax );		// Assume it's not an allocated block.
	whileEBXnotNULL:
		test( ebx, ebx );
		jz allDone;
		
	
		mov( (type memblock [ebx]).size, ecx );
		add( ebx, ecx );
		add( @size( memblock ), ebx );
		
		cmp( edx, ebx );	// edx >= ebx
		jnae nextBlock;		// &&
		cmp( edx, ecx );	// edx < ecx?
		jb checkInBlock;
		 
		nextBlock:
			// Move on to the next block:
			
			mov( (type memblock [ebx-@size( memblock )]).next, ebx );
			jmp whileEBXnotNULL;
		
	
		checkInBlock:
		
			// Pointer is within the current block,
			// return the size of the allocated block.
			
			cmp( (type memblock [ebx-@size( memblock )]).refCount, 0 );
			je allDone;
			
				mov( (type memblock [ebx-@size( memblock )]).size, eax );
						
	allDone:
	#if( @thread )
	
		_hla.memCSleave();
		
	#endif
	pop( edx );
	pop( ecx );
	pop( ebx );
	pop( ebp );
	ret( _parms_ );
		
end size;
	
end memory;




	

