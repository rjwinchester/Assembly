
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit memory;


#include( "strings.hhf" )
#include( "../include/mem.hhf" )

// str.newref:
//
//	"Duplicates" a string heap pointer by bumping up
// the reference count by one. This tells the
// system that two different pointers are referencing
// this block of memory and mem.free should not release
// the storage until called once for each mem.newref
// call and once for the original mem.alloc call.


procedure str.newref( memptr:dword ); 
	@nodisplay;
	@noframe;
begin newref;

	push( ebp );
	mov( esp, ebp );
	
	// First, make sure that this is a valid memory
	// block:
	
	push( eax );
	mov( memptr, eax );
	sub( 8, eax );			// Adjust for string meta data.
	mem.newref( eax );		// Let mem.newref handle the real work.
	pop( eax );
	pop( ebp );
	ret( _parms_ );

end newref;




end memory;




	

