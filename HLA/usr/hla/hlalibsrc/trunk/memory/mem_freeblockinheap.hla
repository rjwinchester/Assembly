
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit memory;


#include( "strings.hhf" )
#include( "../include/mem.hhf" )

// mem.freeBlockInHeap:
//
//	This is an iterator that returns the following
// information for each free block in the heap:
//
// EAX - size of the block.
// EBX - base address of data for block.


iterator mem.freeBlockInHeap; 
	@nodisplay;
	@noframe;
	
var
	curBlk	:dword;
	
begin freeBlockInHeap;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	mov( freeList, eax );
	mov( eax, curBlk );
	test( eax, eax );
	jz allDone;
	whileCurBlkNotNULL:
	
		mov( curBlk, eax );
		lea( ebx, [eax+@size( memblock )] );
		mov( memblkEAX.nextInList, curBlk );
		mov( memblkEAX.size, eax );
		yield();
		cmp( curBlk, NULL );
		jne whileCurBlkNotNULL;
		
	allDone:	
	leave();
	add( 4, esp );		// Remove ptr to foreach loop body.
	ret( _parms_ );

end freeBlockInHeap;


end memory;




	

