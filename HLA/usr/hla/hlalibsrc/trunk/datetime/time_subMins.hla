
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit DateTime;
#include( "datetime.hhf" )
#include( "excepts.hhf" )

	
// subMins-
//
//	This procedure subtracts an arbitrary number of
// minutes from a time. This function returns the
// number of "day crossings" (that is, the number of
// times the calculation would cross 00:00:00 to 23:59:59)
// in EAX.

procedure time.subMins( minutes:uns32; var HMS:time.timerec ); 
	@nodisplay; 
	@noframe;
begin subMins;

	push( ebp );
	mov( esp, ebp );
	push( ebx );
	push( edx );
	
	mov( HMS, ebx );
	movzx( (type time.timerec [ebx]).mins, eax );
	sub( minutes, eax );
	jns fastComputation;
	
		cmp( eax, -60 );
		jl slowComputation;
		
			// More than an hour, but less than two hours:
			
			add( 60, eax );
			sub( 1, (type time.timerec [ebx]).hours );
			jns fastComputation;
			
				// A day crossing has occurred.
				// Reset to hour 24 and return 1 in EAX:
				
				mov( 23, (type time.timerec [ebx]).hours );
				mov( al, (type time.timerec [ebx]).mins	);
				mov( 1, eax );
				pop( edx );
				pop( ebx );
				pop( ebp );
				ret( _parms_ );
		
	fastComputation:
		mov( al, (type time.timerec [ebx]).mins	);
		xor( eax, eax );
		pop( edx );
		pop( ebx );
		pop( ebp );
		ret( _parms_ );
	
	// Down here, we've got more than two hours. So compute everything
	// to minutes, do the subtraction, and then convert the result back to
	// a time.
	
	slowComputation:
		movzx( (type time.timerec [ebx]).mins, eax );
		movzx( (type time.timerec [ebx]).hours, edx );
		intmul( 60, edx );
		add( edx, eax );
		
		sub( minutes, eax );
		js dayCrossing; 
		
			// Convert time in minutes to time in HH:MM format:
			
			xor( edx, edx );
			div( 60, edx:eax );
			mov( dl, (type time.timerec [ebx]).mins );
			mov( ax, (type time.timerec[ebx]).hours );
			
			xor( eax, eax );	// No day crossing.
			pop( edx );
			pop( ebx );
			pop( ebp );
			ret( _parms_ );

		// Down here, we've crossed the 00:00:00 barrier one or more times
		
		dayCrossing:
			neg( eax );
			xor( edx, edx );
			div( 24*60, edx:eax );
			push( eax );
			
			mov( edx, eax );
			
			xor( edx, edx );
			div( 60, edx:eax );
			
			neg( edx );
			jz edxIs0;
			
				add( 60, edx );
				inc( eax );
				
			edxIs0:
			mov( dl, (type time.timerec [ebx]).mins );
			
			neg( eax );
			jz edxIs0_2;
			
				add( 24, eax );
			
			edxIs0_2:
			mov( ax, (type time.timerec [ebx]).hours );
						
			// Return day count in EAX
			
			pop( eax );
			inc( eax );
			
			pop( edx );
			pop( ebx );
			pop( ebp );
			ret( _parms_ );
					
end subMins;
	
end DateTime;			
