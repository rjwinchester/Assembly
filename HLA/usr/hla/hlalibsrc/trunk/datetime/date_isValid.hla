
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit DateTime;
#include( "datetime.hhf" )
#include( "excepts.hhf" )

	
// IsValid-
//
//	Returns false if the date passed as a parameter
//  is not a valid date, true if it is a valid date.

procedure date._isValid( dr:date.daterec ); @nodisplay; @noframe;
begin _isValid;

	push( ebp );
	mov( esp, ebp );
	
	push( ebx );
	movzx( dr.month, ebx );

	sub( 1, ebx );
	cmp( ebx, 12 );
	jae invalidDate;
	
			
		// Quick check for leap year (not a leap year, actually).
		// If the month is not Feb, don't bother checking because
		// it won't matter.  If the year is not divisible by four, 
		// don't bother calling date.IsLeapYear (because it can't 
		// be a leap year).	If it's Feb and the year is divisible
		// by four, call date.IsLeapYear to see if it really is
		// a leap year.  If so, set the days in the month to 29.
		
		mov( date.DaysInMonth[ ebx*4 + 4 ], ebx );
		cmp( dr.month, 2 );
		jne notFeb;
		
			test( %11, dr.year );
			jnz notFeb;
			
				date.isLeapYear( dr );
				cmp( al, true );
				jne notFeb;
				
					mov( 29, bl );
					
		notFeb:
		cmp( bl, dr.day );
		jb invalidDate;
		cmp( dr.day, 0 );
		je invalidDate;
		
		movzx( dr.year, eax );
		
		// The following is questionable.
		// Who knows what ranges we should check?
		// 1600 is probably a good starting year
		// since this was shortly after the advent
		// of the Gregorian calendar.  The upper
		// end should be reasonably small so as
		// to catch ridiculous dates, but large
		// enough so that we don't suffer from
		// the "Y2K Syndrome".  date.maxYear was
		// set to 3000 as this was being written
		// (because calendar will have to add
		// an extra leap year between 3000 & 4000
		// and the Julian day numbers reset
		// during this time), but smaller or larger
		// values could be argued for.
		
		sub( date.minYear, eax );
		cmp( eax, date.maxYear-date.minYear );
		ja invalidDate;

	mov( true, eax );							
	pop( ebx );
	pop( ebp );
	ret( _parms_ );
	
invalidDate:
	mov( false, eax );
	pop( ebx );
	pop( ebp );
	ret( _parms_ );

end _isValid;
		
end DateTime;			
