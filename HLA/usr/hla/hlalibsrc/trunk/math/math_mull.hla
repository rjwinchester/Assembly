
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit mathUnit;

#include( "math.hhf" )

/****************************************************/
/*                                                  */
/* mull( left, right, dest ) -                      */
/*                                                  */
/* Computes dest := left + right where the operands */
/* are all 128-bit operands.                        */
/*                                                  */
/* Sets the carry and overflow flags if there was   */
/* an unsigned overflow during the multiplication.  */
/*                                                  */
/****************************************************/



procedure math.mull( left:lword; right:lword; var dest:lword );
	@nodisplay;
	@noalignstack;
	@noframe;

var
	Overflow	:dword;
	
begin mull;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	push( eax );
	push( ebx );
	push( ecx );
	push( edx );
	
	mov( dest, ecx );
	
	// 128-bit unsigned multiplication algorithm:
	
	mov( (type dword left), eax );
	mov( eax, ebx );
	mul( (type dword right) );
	mov( eax, [ecx] );
	mov( edx, [ecx+4] );
	
	mov( ebx, eax );
	mul( (type dword right[4]) );
	add( eax, [ecx+4] );
	adc( 0, edx );
	mov( edx, [ecx+8] );
	
	mov( ebx, eax );
	mul( (type dword right[8]) );
	add( eax, [ecx+8] );
	adc( 0, edx );
	mov( edx, [ecx+12] );
	
	mov( ebx, eax );
	mul( (type dword right[12]) );
	add( eax, [ecx+12] );
	adc( 0, edx );
	mov( edx, Overflow );


	
	mov( (type dword left[4]), eax );
	mov( eax, ebx );
	mul( (type dword right) );
	add( eax, [ecx+4] );
	adc( edx, [ecx+8] );
	
	mov( ebx, eax );
	mul( (type dword right[4]) );
	add( eax, [ecx+8] );
	adc( edx, [ecx+12] );
	
	mov( ebx, eax );
	mul( (type dword right[8]) );
	add( eax, [ecx+12] );
	adc( 0, edx );
	or( edx, Overflow );
	
	mov( ebx, eax );
	mul( (type dword right[12]) );
	or( eax, Overflow);
	or( edx, Overflow);


	
	mov( (type dword left[8]), eax );
	mov( eax, ebx );
	mul( (type dword right) );
	add( eax, [ecx+8] );
	adc( edx, [ecx+12] );
	
	mov( ebx, eax );
	mul( (type dword right[4]) );
	add( eax, [ecx+12] );
	adc( 0, edx );
	or( edx, Overflow );
	
	mov( ebx, eax );
	mul( (type dword right[8]) );
	or( eax, Overflow);
	or( edx, Overflow);
	
	mov( ebx, eax );
	mul( (type dword right[12]) );
	or( eax, Overflow);
	or( edx, Overflow);


	
	mov( (type dword left[12]), eax );
	mov( eax, ebx );
	mul( (type dword right) );
	add( eax, [ecx+12] );
	adc( 0, edx );
	or( edx, Overflow);
	
	mov( ebx, eax );
	mul( (type dword right[4]) );
	or( eax, Overflow);
	or( edx, Overflow);
	
	mov( ebx, eax );
	mul( (type dword right[8]) );
	or( eax, Overflow);
	or( edx, Overflow);
	
	mov( ebx, eax );
	mul( (type dword right[12]) );
	or( edx, eax);
	or( Overflow, eax);
	jz noOverflow;

		// We've got overflow.  Set the carry flag and
		// the overflow flag to indicate this.
		
		mov( $7f, al );
		add( 1, al );		// Set overflow flag.
		stc();				// Set the carry flag.
		
	noOverflow:	
	pop( edx );
	pop( ecx );
	pop( ebx );
	pop( eax );
	leave();
	ret( _parms_ );
	
end mull;
	
                      







end mathUnit;
