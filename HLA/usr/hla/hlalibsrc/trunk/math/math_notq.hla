
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit mathUnit;

#include( "math.hhf" )

/****************************************************/
/*                                                  */
/* notq( source, dest ) -                           */
/*                                                  */
/* Computes dest := ~source where the operands      */
/* are all 64-bit operands.                         */
/*                                                  */
/****************************************************/


procedure math.notq( source:qword; var dest:qword );
	@nodisplay;
	@noalignstack;
	@noframe;
	
begin notq;

	push( ebp );
	mov( esp, ebp );
	
	push( eax );
	push( ebx );
	
	// Standard 64-bit not operation.  Would be better as a macro, but...
	
	mov( dest, ebx );
	mov( (type dword source), eax );
	not( eax );
	mov( eax, [ebx] );
	
	mov( (type dword source[4]), eax );
	not( eax );
	mov( eax, [ebx+4] );
	
	// Carry, sign, and overflow flags are set properly, but zero flag
	// is not.  The following gymnastics set the zero flag appropriately.
	
	pushfd();						// Save carry, sign, and overflow.
	and( $bf, (type byte [esp]));	// Clears ZF on stack.
	or( [ebx], eax );	   			// Check for a zero result.
	setz( al );
	shl( 6, al );					// Put ZF in Bit #6 of al.
	or( al, [esp] );				// Merge with flags on stack.
	popfd();
	
	
	pop( ebx );
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
end notq;

end mathUnit;
