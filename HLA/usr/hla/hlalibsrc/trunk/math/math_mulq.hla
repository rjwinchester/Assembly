
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit mathUnit;

#include( "math.hhf" )


/****************************************************/
/*                                                  */
/* mulq( left, right, dest ) -                      */
/*                                                  */
/* Computes dest := left + right where the operands */
/* are all 64-bit operands.                         */
/*                                                  */
/****************************************************/

procedure math.mulq( left:qword; right:qword; var dest:qword );
	@nodisplay;
	@noalignstack;
	@noframe;
	
begin mulq;

	push( ebp );
	mov( esp, ebp );
	
	push( eax );
	push( ebx );
	push( ecx );
	push( edx );
	mov( dest, ecx );
	
	// 64-bit unsigned multiplication algorithm:
	
	mov( (type dword left), eax );
	mul( (type dword right) );
	mov( eax, [ecx] );
	mov( edx, [ecx+4] );
	
	mov( (type dword left), eax );
	mul( (type dword right[4]) );
	add( eax, [ecx+4] );
	adc( 0, edx );
	mov( edx, ebx );		// Save to determine if overflow
	
	
	mov( (type dword left[4]), eax );
	mul( (type dword right) );
	add( eax, [ecx+4] );
	adc( 0, edx );
	or( edx, ebx );			// Save to determine if overflow
	
	mov( (type dword left[4]), eax );
	mul( (type dword right[4]) );
	or( ebx, eax );
	or( edx, eax );
	jz noOverflow;
	
		// We've got overflow.  Set the carry flag and
		// the overflow flag to indicate this.
		
		mov( $7f, al );
		add( 1, al );		// Set overflow flag.
		stc();				// Set the carry flag.
		
	noOverflow:
	pop( edx );
	pop( ecx );	
	pop( ebx );
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
end mulq;

end mathUnit;
