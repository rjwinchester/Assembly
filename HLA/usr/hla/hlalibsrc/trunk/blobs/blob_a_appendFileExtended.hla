
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#includeOnce( "blobs.hhf" );
#includeOnce( "fileio.hhf" );
#includeOnce( "filesys.hhf" );
#includeOnce( "excepts.hhf" );
#includeOnce( "memory.hhf" );
#includeOnce( "threads.hhf" );



// blob.a_append-
//
//	Creates a new blob on the heap by taking an existing blob, reading a file,
// and appending that file data to the existing blob.  Allocates "extend"
// additional bytes at the end of the blob on the heap. Returns a pointer to
// the new blob in the EAX register.

procedure blob.a_appendFileExtended( filename:string; b:blob.blob; extend:dword ); 
	@noframe;
	
var
	f			:dword;
	blobSize	:dword;
	fileSize	:dword;
	length		:dword;
	theBlob		:blob.blob;
	
	ecxSave		:dword;
	esiSave		:dword;
	ediSave		:dword;
	
begin a_appendFileExtended;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	pushfd();
	cld();
	
	mov( ecx, ecxSave );
	mov( esi, esiSave );
	mov( edi, ediSave );
	
	mov( b, esi );
	test( esi, esi );
	jz AttemptToDerefNULL;
	
	filesys.size( filename );
	mov( eax, fileSize );
	add( (type blob.blobRec [esi]).length, eax );
	jc BlobOverflow;
	mov( eax, length );		// Save for length and wcursor value
	
	add( extend, eax );
	jc BlobOverflow;
	
	add( 16, eax );			// 16 is the usual buffer added to a blob's size
	jc BlobOverflow;
	
	mov( eax, blobSize );
	blob.alloc( eax );
	mov( eax, theBlob );
	mov( eax, edi );
	
	#if( @thread )
	try
	
		thread.enterCriticalSection( (type blob.blobRec [esi]).criticalSection );
	
	#endif

		// Copy the source blob:
		
		mov( (type blob.blobRec [esi]).length, ecx );
		rep.movsb;
	
	#if( @thread )
	
	  anyexception
	  	mov( b, esi );
		thread.leaveCriticalSection( (type blob.blobRec [esi]).criticalSection );
		blob.free( theBlob );
		reraise( eax );
		
	endtry;
  	mov( b, esi );
	thread.leaveCriticalSection( (type blob.blobRec [esi]).criticalSection );
	#endif

	// Read the file:
	
	fileio.open( filename, fileio.r );
	mov( eax, f );
	fileio.read( eax, [edi], fileSize );
	fileio.close( f );
	
	// Return pointer in EAX.
	// Also set rcursor/wcursor/length fields:
	
	mov( theBlob, eax );
	mov( length, ecx );
	mov( 0, (type blob.blobRec [eax]).rcursor );
	mov( ecx, (type blob.blobRec [eax]).wcursor );
	mov( ecx, (type blob.blobRec [eax]).length );
	mov( blobSize, ecx );
	mov( ecx, (type blob.blobRec [eax]).maxlen );

	mov( ecxSave, ecx );
	mov( esiSave, esi );
	mov( ediSave, edi );
	popfd();
	leave();
	ret( _parms_ );

BlobOverflow:
	raise( ex.BlobOverflow );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
	
end a_appendFileExtended;

end blobUnit;




	

