
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" )
#include( "strings.hhf" )
#include( "excepts.hhf" )
#include( "memory.hhf" )
#include( "threads.hhf" )





// blob._catbuf-
//
//	Used to write a sequence of bytes to a blob at the blob's wcursor position.

procedure blob._catbuf( dest:blob.blob; var buf:var; len:dword ); 
	@noframe;
var
	saveEAX		:dword;
	saveECX		:dword;
	saveESI		:dword;
	saveEDI		:dword;
	saveFlags	:dword;
begin _catbuf;

	push( ebp );
	mov( esp, ebp );
	sub( (_vars_-4), esp );
	pushfd();	// Allocates and initializes saveFlags
	cld();
	
	mov( eax, saveEAX );
	mov( ecx, saveECX );
	mov( esi, saveESI );
	mov( edi, saveEDI );
	
	mov( dest, edi );
	
	#if( @thread )
	try
	
		thread.enterCriticalSection( (type blob.blobRec [edi]).criticalSection );
			
	#endif
	
		// Compute new length and verify that the destination blob
		// can hold the result.	 Note that we concatenate the string
		// to the blob starting at the wcursor position:
		
		mov( (type blob.blobRec [edi]).wcursor, ecx );
		mov( ecx, eax ); 							//Save for later.
		
		add( len, ecx );
		cmp(  ecx, (type blob.blobRec [edi]).maxlen );
		jna noBlobOverflow;
		
			raise( ex.BlobOverflow );

		noBlobOverflow:	
			
		// Set the new wcursor position to be the end of string we're about
		// to copy. If the new wcursor value is beyond the length of the blob,
		// then set the length to this value as well.
		
		mov( ecx, (type blob.blobRec [edi]).wcursor );
		cmp( ecx, (type blob.blobRec [edi]).length );
		jb noNewLen;
		
			mov( ecx, (type blob.blobRec [edi]).length );
			
		noNewLen:
			
		
		// Okay, the destination blob can hold the result.
		// Concatenate the source string to the end of the dest blob.
		// Note: unfortunately, we cannot copy DWORDs here because the
		// dynamic lengths of the source and destination strings could
		// cause an overflow.  Furthermore, we don't know if the dest
		// (concat) address is dword-aligned, so there may be little
		// benefit to this.  
		
		
		mov( len, ecx );
		add( eax, edi );		// Start storing source at wcursor.
		mov( buf, esi );
		rep.movsb();			// Copy source to the end of dest.
	
	#if( @thread )
	
	  anyexception
	
		mov( dest, edi );
		thread.leaveCriticalSection( (type blob.blobRec [edi]).criticalSection );
		push( saveFlags );
		popfd();
		reraise( eax );
		
	endtry;
	mov( dest, edi );
	thread.leaveCriticalSection( (type blob.blobRec [edi]).criticalSection );
	#endif
	
	mov( saveEAX, eax );
	mov( saveECX, ecx );
	mov( saveESI, esi );
	mov( saveEDI, edi );
	popfd();
	leave();
	ret( _parms_ );
	
end _catbuf;



// blob._cats-                                                       
//                                                             
// This is a pseudo-thunk that concatenates the source string (passed in
// EAX) to the end of the destination blob. This guy is called by the
// various blob.put***/blob.cat*** functions.

procedure blob._cats( dest:blob.blob  ); @noframe;
begin _cats;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	
	test( eax, eax );
	jz AttemptToDerefNULL;
	
	blob._catbuf( dest, [eax], (type str.strRec [eax]).length );
	
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end _cats;

end blobUnit;




	

