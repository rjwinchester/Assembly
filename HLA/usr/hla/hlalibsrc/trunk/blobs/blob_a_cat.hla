
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "excepts.hhf" );
#include( "memory.hhf" );
#include( "threads.hhf" );


// a_cat-
//
//	blob.a_cat- creates a new blob by concatenating two blobs and allocating
//	storage for the result on the heap.

procedure blob.a_cat( src1:blob.blob; src2:blob.blob ); 
	@noframe; 
	@nodisplay;
var
	saveECX		:dword;
	saveESI		:dword;
	saveEDI		:dword;
	saveFlags	:dword;
	
begin a_cat;

	push( ebp );
	mov( esp, ebp );
	sub( (_vars_-4), esp );
	pushfd();	// Allocates and initializes saveFlags
	cld();
	
	mov( ecx, saveECX );
	mov( esi, saveESI );
	mov( edi, saveEDI );
	

	// Compute the length of the new blob and allocate storage for it.
	
	mov( src2, edi );
	test( edi, edi );
	jz attemptToDerefNULL;
	
	mov( src1, esi );
	test( esi, esi );
	jz attemptToDerefNULL;

	#if( @thread )
	try
	
		thread.enterCriticalSection( (type blob.blobRec [edi]).criticalSection );
		cmp( esi, esi );
		je noEnter;
		
			thread.enterCriticalSection( (type blob.blobRec [esi]).criticalSection );
			
		noEnter:
		
	#endif

		mov( (type blob.blobRec [edi]).length, ecx );
		add( (type blob.blobRec [esi]).length, ecx );
		blob.alloc( ecx );
		mov( ecx, (type blob.blobRec[eax]).length );	// Set the string length.
		
		// Copy the first blob into the storage area:
		
		mov( eax, edi );
		mov( (type blob.blobRec [esi]).length, ecx );
		add( 3, ecx );		// Round length up to next even dword multiple
		shr( 2, ecx );		// Compute # of dwords to move.
		jz NoMove;
		
			rep.movsd();		// Copy the first source string.
			
		NoMove:
		
		// Since we copied dwords, we may have moved too many bytes.
		// So recompute the starting address for the second source blob here.
		
		mov( src1, esi );
		mov( eax, edi );
		add( (type blob.blobRec [esi]).length, edi );
		
		// Okay, now copy the second source blob to the end of the
		// first one.  The same efficency comments noted in "cat" apply here.
		
		mov( src2, esi );
		mov( (type blob.blobRec [esi]).length, ecx );
		rep.movsb();
		
		// Set the read cursor to the beginning of the new blob:
		
		mov( 0, (type blob.blobRec [eax]).rcursor );
		
		// Set the write cursor to the end of the new blob:
		
		mov( (type blob.blobRec [eax]).length, ecx );
		mov( ecx,  (type blob.blobRec [eax]).wcursor );
	
	#if( @thread )
	
	  anyexception
	  
	  	pushad();
		mov( src1, esi );
		mov( src2, edi );
		thread.leaveCriticalSection( (type blob.blobRec [esi]).criticalSection );
		cmp( esi, edi );
		je noLeave1;
		
			thread.leaveCriticalSection( (type blob.blobRec [edi]).criticalSection );
	  	
		noLeave1:
		popad();
		reraise( eax );
		
	endtry;
	mov( src1, esi );
	mov( src2, edi );
	thread.leaveCriticalSection( (type blob.blobRec [esi]).criticalSection );
	cmp( esi, edi );
	je noLeave2;
	
		thread.leaveCriticalSection( (type blob.blobRec [edi]).criticalSection );
	
	noLeave2:
		
	#endif
	mov( saveECX, ecx );
	mov( saveESI, esi );
	mov( saveEDI, edi );
	popfd();
	leave();
	ret( _parms_ );
	
attemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end a_cat;

end blobUnit;




	

