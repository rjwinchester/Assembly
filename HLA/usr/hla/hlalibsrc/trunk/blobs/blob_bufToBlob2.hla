
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "excepts.hhf" );
#includeOnce( "threads.hhf" );

// blob.bufToBlob2-
//
//	Fill a blob object with data from a buffer.

procedure blob.bufToBlob3
( 
	startBuf	:dword; 
	endBuf		:dword;
	b			:blob.blob 
); @noframe;
var
	saveECX		:dword;
	saveESI		:dword;
	saveEDI		:dword;
	saveFlags	:dword;
 
begin bufToBlob3;

	push( ebp );
	mov( esp, ebp );
	sub( (_vars_-4), esp );
	pushfd();	// Allocates and initializes saveFlags
	
	mov( ecx, saveECX );
	mov( esi, saveESI );
	mov( edi, saveEDI );
	cld();
	
	// Verify that parameters are non-NULL.
		
	mov( startBuf, esi );
	test( esi, esi );
	jz AttemptToDerefNULL;
	
	mov( endBuf, ecx );
	test( ecx, ecx );
	jz AttemptToDerefNULL;
	
	mov( b, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;
		
	#if( @thread )
	try
	
		thread.enterCriticalSection( (type blob.blobRec [edi]).criticalSection );
	
	#endif

		// See if the blob is large enough to hold the data.
		
		sub( esi, ecx );
		cmp( ecx, (type blob.blobRec [edi]).maxlen );
		jna noBlobOverflow;
		
			raise( ex.BlobOverflow );
		
		noBlobOverflow:
		
		mov( ecx, (type blob.blobRec [edi]).length );
		mov( 0, (type blob.blobRec [edi]).wcursor );
		mov( 0, (type blob.blobRec [edi]).rcursor );
		
		// Copy the data from the buffer to the blob:
		
		rep.movsb();
	
	#if( @thread )
	
	  anyexception
	
		mov( b, edx );
		thread.leaveCriticalSection( (type blob.blobRec [edx]).criticalSection );
		push( saveFlags );
		popfd();
		reraise( eax );
		
	endtry;
	mov( b, edi );
	thread.leaveCriticalSection( (type blob.blobRec [edi]).criticalSection );
		
	#endif
	popfd();
	mov( saveECX, ecx );
	mov( saveESI, esi );
	mov( saveEDI, edi );
	leave();
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end bufToBlob3;


end blobUnit;




	

