
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#includeOnce( "blobs.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "memory.hhf" )
#includeOnce( "strings.hhf" )
#includeOnce( "threads.hhf" )
#includeOnce( "threads.hhf" );

//  catbuf3b( buffer:buf_t; src:string; dest:blob );
//  catbuf4( startBuf:dword; endBuf:dword; src:string; dest:string );
//
//  These two functions are the same. They are just different prototypes
//  for the exact same code (the buf_t data type maps to the two dword
//  arguments for catbuf4).
//
//  This function copies the string src to blob dest and then
//	concatenates the sequence of characters of length
//  (endBuf-startBuf) starting at memory address startBuf to the
//  end of the blob dest. 


 
procedure blob.catbuf4
(
	startBuf	:dword; 
	endBuf		:dword;
	src2		:string;
	dest		:blob.blob 
); @noframe;

	
begin catbuf4;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( edi );

	mov( startBuf, eax );
	test( eax, eax );
	jz AttemptToDerefNULL;

	mov( endBuf, eax );
	test( eax, eax );
	jz AttemptToDerefNULL;

	mov( src2, eax );
	test( eax, eax );
	jz AttemptToDerefNULL;

	mov( dest, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;
	
	#if( @thread )
	try
	
		thread.enterCriticalSection( (type blob.blobRec [edi]).criticalSection );
			
	#endif
	
		mov( 0, (type blob.blobRec [edi]).wcursor );
		mov( 0, (type blob.blobRec [edi]).rcursor );
		mov( 0, (type blob.blobRec [edi]).length );
		
		// Copy the buffer to the blob:
		
		// Append the string to the blob:

		mov( endBuf, eax );
		sub( startBuf, eax );
		blob.__catbuf( dest, startBuf, eax  );

		mov( src2, eax );
		blob.__catbuf( dest, eax, (type str.strRec [eax]).length );
		
	#if( @thread )
	
	  anyexception
	  
		mov( dest, edx );
		thread.leaveCriticalSection( (type blob.blobRec [edx]).criticalSection );
		reraise( eax );
		
	endtry;
	mov( dest, edi );
	thread.leaveCriticalSection( (type blob.blobRec [edi]).criticalSection );
		
	#endif

	pop( edi );
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end catbuf4;

end blobUnit;




	

