
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "excepts.hhf" );
#include( "threads.hhf" )


// blob.a_bufToBlob2-
//
//	Allocates storage for a blob on the heap and then copies the
// data from a buffer to the blob.  Returns a pointer to the blob
// on the heap in the EAX register.

procedure blob.a_bufToBlob2( startBuf:dword; endBuf:dword ); @noframe; 
begin a_bufToBlob2;

	push( ebp );
	mov( esp, ebp );
	push( ecx );
	push( esi );
	push( edi );
	pushfd();
	cld();
	
	// Verify that parameters are non-NULL.
		
	mov( startBuf, esi );
	test( esi, esi );
	jz AttemptToDerefNULL;
	
	mov( endBuf, ecx );
	test( ecx, ecx );
	jz AttemptToDerefNULL;
		
	
	// Allocate sufficient storage for the blob on the heap.
	
	sub( esi, ecx );
	blob.alloc( ecx );
	
	// Copy the data from the buffer to the blob:
	
	mov( eax, edi );
	mov( ecx, (type blob.blobRec [edi]).length );
	rep.movsb();
	
	popfd();
	pop( edi );
	pop( esi );
	pop( ecx );
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end a_bufToBlob2;


end blobUnit;




	

