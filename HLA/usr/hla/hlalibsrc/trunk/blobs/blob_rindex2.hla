
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "excepts.hhf" );
#includeOnce( "threads.hhf" )


// rindex2-                                                          
//                                                                   
// Similar to blob.index, except rindex searches the blob backwards 
// (from right to left) to find the *last* occurrence of src2 in     
// src1.                                                             





procedure blob.rindex2( src1:blob.blob; src2:blob.blob ); 
	@noframe;
var
	saveEBX		:dword;
	saveECX		:dword;
	saveEDX		:dword;
	saveESI		:dword;
	saveEDI		:dword;
	saveFlags	:dword;

begin rindex2;

	push( ebp );
	mov( esp, ebp );
	sub( (_vars_-4) , esp );
	pushfd();		// Allocates and initializes saveFlags
	mov( ebx, saveEBX );
	mov( ecx, saveECX );
	mov( edx, saveEDX );
	mov( esi, saveESI );
	mov( edi, saveEDI );
	cld();
	
	mov( src2, edi );
	mov( src1, esi );
	
	test( edi, edi );
	je AttemptToDerefNULL;
	test( esi, esi );
	je AttemptToDerefNULL;
	
	#if( @thread )
	
	try
	
		thread.enterCriticalSection( (type blob.blobRec [esi]).criticalSection );
		cmp( esi, edi );
		je noEnter;
		
			thread.enterCriticalSection( (type blob.blobRec [edi]).criticalSection );
			
		noEnter:
	
	#endif
	
		mov( (type blob.blobRec [edi]).length, ebx );
		mov( (type blob.blobRec [esi]).length, edx );
		
		// If the length of src2 is zero, return failure.
		// If the length of src2 is greater than src1, return failure.
		
		mov( -1, eax ); // Assume failure
		test( ebx, ebx );
		jz FoundMatch;

		cmp( edx, ebx );
		jnae FoundMatch;
		
			sub( ebx, edx );
			add( edx, esi );		// Start at the end of the blob.
			mov( edi, eax );		// Save ptr to src2 so we can reset.
			repeatUntilEDXlt0:
				
				mov( ebx, ecx );
				mov( eax, edi );
				push( esi );
				repe.cmpsb();	// See if the blob is at the current
				jne NotFound;	// position.
				
					// We found the blob, so compute the
					// index and exit the loop.
						
					pop( eax );			// Retrieve ptr into src1.				
					sub( src1, eax );	// Compute index.
					jmp FoundMatch;
					
				NotFound:
				
				// Okay, src2 didn't match at the current position,
				// try the previous character position in src1.
				
				pop( esi );			// Retrieve ptr into src1.
				dec( esi );			// Bump down by one character position.
				sub( 1, edx );		// Are we done yet?
				jns repeatUntilEDXlt0;
				
			// If we get down here, then src2 is not a subblob of src1.
			
			mov( -1, eax );		// Deprecated!
				
			
		FoundMatch:
		
	#if( @thread )
	
	  anyexception
	
		mov( src2, edx );
		thread.leaveCriticalSection( (type blob.blobRec [edx]).criticalSection );
		cmp( edx, src1 );
		je noLeave1;
			
			mov( src1, edx );
			thread.leaveCriticalSection( (type blob.blobRec [edx]).criticalSection );
		
		noLeave1:
		push( saveFlags );
		popfd();
		reraise( eax );
		
	endtry;
	mov( src2, ecx );
	thread.leaveCriticalSection( (type blob.blobRec [ecx]).criticalSection );
	cmp( ecx, src1 );
	je noLeave2;
		
		mov( src1, ecx );
		thread.leaveCriticalSection( (type blob.blobRec [ecx]).criticalSection );
	
	noLeave2:
		
	#endif

	mov( saveEBX, ebx );
	mov( saveECX, ecx );
	mov( saveEDX, edx );
	mov( saveESI, esi );
	mov( saveEDI, edi );
	popfd();
	leave();
	cmp( eax, -1 );		// Set carry on success, clear if no match.
	ret( _parms_ );
		
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end rindex2;

end blobUnit;




	

