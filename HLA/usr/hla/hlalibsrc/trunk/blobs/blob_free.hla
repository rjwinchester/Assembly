
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" )
#include( "memory.hhf" )
#include( "excepts.hhf" )
#includeOnce( "threads.hhf" );

// blob.free:
//
//	Deallocates storage allocated via blob.alloc.




procedure blob.free( theBlob:blob.blob ); 
	@nodisplay;
	@noframe;
begin free;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	mov( theBlob, eax );
	test( eax, eax );
	jz AttemptToFreeNULL;
	
	#if( @thread )
	
	try
	
		thread.enterCriticalSection( (type blob.blobRec[eax]).criticalSection );
	
	#endif
	
			// If allocPtr is zero, this means that we're attempting
			// to free a blob that was not allocated on the heap (it's
			// either static or automatic):
			 
			mov( (type blob.blobRec [eax]).allocPtr, eax );
			test( eax, eax );
			jz noFree;
			
			// Okay, free the storage associated with this blob:
			
			mem.free( eax );
			
		noFree:
		
	#if( @thread )
	  anyexception
		
		mov( theBlob, edx ); 
		thread.leaveCriticalSection( (type blob.blobRec[edx]).criticalSection );
		reraise( eax );
	
	endtry;
	mov( theBlob, eax ); 
	thread.leaveCriticalSection( (type blob.blobRec[eax]).criticalSection );
	thread.deleteCriticalSection( (type blob.blobRec[eax]).criticalSection );
	
	#endif

	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
AttemptToFreeNULL:
	raise( ex.AttemptToFreeNULL );

	
end free;
	
end blobUnit;




	

