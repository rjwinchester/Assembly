
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "excepts.hhf" );
#includeOnce( "threads.hhf" );

/**********************************************************/
/*                                                        */
/* chpos2-                                                */
/*                                                        */
/* Similar to index2, except this procedure searches      */
/* for the first occurrence of a *character* within       */
/* a blob.  Returns the index in EAX. Returns carry=1     */
/* if there was a match, carry=0 if no match.             */
/*                                                        */
/**********************************************************/


procedure blob.chpos2( src1:blob.blob; src2:char ); 
	@noframe;
var
	ecxSave		:dword;
	ediSave		:dword;
	saveFlags	:dword;
	
begin chpos2;

	push( ebp );
	mov( esp, ebp );
	sub( (_vars_-4), esp );
	pushfd();	// Allocate and initialize saveFlags
	cld();
	
	mov( ecx, ecxSave );
	mov( edi, ediSave );
	
	mov( src1, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;	
	
	#if( @thread )
	try
	
		thread.enterCriticalSection( (type blob.blobRec [edi]).criticalSection );
	
	#endif
	
		mov( (type blob.blobRec [edi]).length, ecx );
		test( ecx, ecx );
		jz NotFound;

			mov( src2, al );
			repne.scasb();		// Slow! Should replace this someday.
			jne NotFound;
			
				sub( src1, edi );		// Compute index+1 (edi was inc'd!).
				lea( eax, [edi-1] );	// Return index in eax.
				jmp Found;

		NotFound:		
		mov( -1, eax );		// Deprecated-- Return -1 if no match.
		
	Found:
	
	#if( @thread )
	
	  anyexception
	
		mov( src1, edx );
		thread.leaveCriticalSection( (type blob.blobRec [edx]).criticalSection );
		push( saveFlags );
		popfd();
		reraise( eax );
	
	endtry;
	mov( src1, ecx );
	thread.leaveCriticalSection( (type blob.blobRec [ecx]).criticalSection );
		
	#endif
	mov( ecxSave, ecx );
	mov( ediSave, edi );
	popfd();
	leave();
	cmp( eax, -1 );		// Set carry if EAX <> -1 (matched char).
	ret( _parms_ );	
	
AttemptToDerefNULL:	
	raise( ex.AttemptToDerefNULL );

end chpos2;

end blobUnit;




	

