
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "excepts.hhf" );
#includeOnce( "threads.hhf" )



// setMaxlen-
//
//	Sets the maximum length field (maxlen) of a blob value.

procedure blob.setMaxlen( b:blob.blob; newLen:dword ); @noframe;
begin setMaxlen;

	push( ebp );
	mov( esp, ebp );
	push( ebx );
	push( eax );
	
	mov( b, ebx );
	test( ebx, ebx );
	jz AttemptToDerefNULL;

	#if( @thread )
	
		try
		
			thread.enterCriticalSection
			( 
				(type blob.blobRec [ebx]).criticalSection 
			);
			mov( newLen, eax );
			mov( eax, (type blob.blobRec [ebx]).maxlen );
			
		  anyexception
		
			mov( b, edx );
			thread.leaveCriticalSection
			( 
				(type blob.blobRec [edx]).criticalSection 
			);
			reraise( eax );
			
		endtry;
		thread.leaveCriticalSection( (type blob.blobRec [ebx]).criticalSection );
	
	#else
	
		mov( newLen, eax );
		mov( eax, (type blob.blobRec [ebx]).maxlen );
			
	#endif

		
	pop( eax );
	pop( ebx );
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );

end setMaxlen;



end blobUnit;




	

