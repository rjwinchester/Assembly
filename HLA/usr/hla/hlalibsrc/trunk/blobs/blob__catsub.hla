
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobUnit;
?@nodisplay := true;
?@nostackalign := true;

#include( "blobs.hhf" );
#include( "strings.hhf" );
#include( "excepts.hhf" );


// _catsub-                                                
//                                                         
// Extracts a substring from the first string operand and  
// concatentates it to the end of the blob specified by  
// the last blob operand.
//
// This is a special version that does not enter the
// blob critical section (called by other functions that
// do enter and leave the critical section).                              

 
procedure blob._catsub
(
	src		:string; 
	start	:dword; 
	len		:dword; 
	dest	:blob.blob 
); @noframe;
begin _catsub;

	push( ebp );
	mov( esp, ebp );
	pushfd();
	push( eax );
	push( ecx );
	push( esi );
	push( edi );
	cld();
	
	// Get the string pointers and make sure they are non-NULL.
	
	mov( src, esi );
	mov( dest, edi );
	test( edi, edi );
	jz AttemptToDerefNULL;
	test( esi, esi );
	jz AttemptToDerefNULL;


	// Make sure the destination can hold the result.
	
	mov( len, eax );
	add( start, eax );
	jc useLength;
		cmp( eax, (type str.strRec [esi]).length );
		jb lenOK;
		
	useLength:
		mov( (type str.strRec [esi]).length, eax );
		
	lenOK:
	sub( start, eax );								// remove ADD from above
	mov( eax, ecx );								// Save for later use.
	add( (type blob.blobRec [edi]).wcursor, eax );	// Include dest blob length.
	cmp( eax, (type blob.blobRec [edi]).maxlen );	// Will result fit?
	ja BlobOverflow;
	
	// If the last position is beyond the current blob length,
	// then extend the length.
	
	cmp( eax, (type blob.blobRec [edi]).length );
	jb noNewLen;
	
		mov( eax, (type blob.blobRec [edi]).length );
		
	noNewLen:
	
	// Make sure the starting index is within the limits of
	// the source string.
	
	mov( (type str.strRec [esi]).length, eax );
	cmp( eax, start );
	jb StringIndexError;
		
	// Compute the number of characters to copy.  This is either
	// "len" if (start+len) is less than or equal to src.len, or
	// it is len - (start+len-src.len) if (start+len) is greater
	// than src.len.
	//
	// Note: len is in ECX, as computed above.
	 
	mov( start, eax );
	add( ecx, eax );
	cmp( eax, (type str.strRec [esi]).length );
	jna fullLength;
	
		sub( (type str.strRec [esi]).length, eax );
		sub( eax, ecx );
		
	fullLength:

	
	// Okay, copy the characters.
	
	add( start, esi );								// SUBSTRING STARTING LOCATION.
	add( (type blob.blobRec [edi]).wcursor, edi );	// Point at dest location.
	test( ecx, ecx );
	jz noMove;
	
		rep.movsb();
		
	noMove:

	
	// Compute the new wcursor value:
	
	mov( dest, eax );
	sub( eax, edi );
	mov( edi, (type blob.blobRec [eax]).wcursor );
	
	// Clean up and leave.
	
	pop( edi );
	pop( esi );
	pop( ecx );
	pop( eax );
	popfd();
	pop( ebp );
	ret( _parms_ );
	
AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
	
BlobOverflow:
	raise( ex.BlobOverflow );
		 
StringIndexError:
	raise( ex.StringIndexError );

end _catsub;

end blobUnit;


	

