
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit blobClass;
?@NoStackAlign := true;
?@NoDisplay := true;
?@NoFrame := true;		

#includeOnce( "excepts.hhf" )
#includeOnce( "hla.hhf" )
#includeOnce( "blobs.hhf" )
#includeOnce( "strings.hhf" )
#includeOnce( "stdio.hhf" )
#includeOnce( "threads.hhf" )


procedure blob.write( b:blob.blob; var src:var; len:dword );
var
	saveEBX		:dword;
	saveECX		:dword;
	saveESI		:dword;
	saveEDI		:dword;
	saveFlags	:dword;
	 
begin write;

	push( ebp );
	mov( esp, ebp );
	sub( (_vars_-4), esp );
	pushfd();		// Allocates and initializes saveFlags;
	
	mov( ebx, saveEBX );
	mov( ecx, saveECX );
	mov( esi, saveESI );
	mov( edi, saveEDI );
	cld();
	
	mov( b, ebx );
	test( ebx, ebx );
	jz AttemptToDerefNULL;
	
	mov( src, esi );
	test( esi, esi );
	jz AttemptToDerefNULL;

	#if( @thread )
	try
	
		thread.enterCriticalSection
		( 
			(type blob.blobRec [ebx]).criticalSection 
		);
	
	#endif
	
		
		mov( len, ecx );
		
		// Compute the start of the data transfer:
		
		mov( (type blob.blobRec [ebx]).wcursor, edi );
		mov( edi, eax );
		add( ebx, edi );
		
		// See if we will overflow the blob:
		
		add( len, eax );
		cmp( eax, (type blob.blobRec [ebx]).maxlen );
		jbe noBlobOverflow;

			raise( ex.BlobOverflow );

	   	noBlobOverflow:
		
		mov( ecx, eax );		// Bytes transferred is returned in EAX.
		jecxz noBytesCopied;	 
		
			
			// Okay, copy ECX characters from the blob to the
			// destination buffer.
			
			rep.movsb();
			
			// Set wcursor to the next position in the blob.
			
			mov( (type blob.blobRec [ebx]).wcursor, esi );
			add( eax, esi );
			mov( esi, (type blob.blobRec [ebx]).wcursor );
			
			// If we extended the length of the blob, update the
			// length field:
			
			cmp( esi, (type blob.blobRec [ebx]).length );
			jbe noBytesCopied;
			
				mov( esi, (type blob.blobRec [ebx]).length ); 
			
		noBytesCopied:
	
	#if( @thread )
	
	  anyexception
	
		mov( b, edx );
		thread.leaveCriticalSection( (type blob.blobRec [edx]).criticalSection );
		push( saveFlags );
		popfd();
		reraise( eax );
		
	endtry;
	thread.leaveCriticalSection( (type blob.blobRec [ebx]).criticalSection );
		
	#endif
	
	popfd();
	mov( saveEBX, ebx );
	mov( saveECX, ecx );
	mov( saveESI, esi );
	mov( saveEDI, edi );
	leave();
	ret( _parms_ );

AttemptToDerefNULL:
	raise( ex.AttemptToDerefNULL );
	
end write;

end blobClass;
