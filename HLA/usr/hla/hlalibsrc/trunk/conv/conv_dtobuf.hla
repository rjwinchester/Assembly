
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "stdlibdata.hhf" );
#includeOnce( "conv.hhf" )



	
/************************************************************************/
/* 	                                                                    */
/* dToBuf,                                                              */
/*                                                                      */
/* This routine converts the value passed in EAX to a sequence of       */
/* characters that form the hexadecimal representation of the value.    */
/* It stores the  character output starting at the location specified   */
/* by the EDI register.  Note that the buffer pointed at by EDI must be */
/* large enough to hold the result (8 or 9 bytes depending on the value */
/* of outputUnderscores), no checking is done.                          */
/*                                                                      */
/* This routine preserves EAX and ECX and leaves EDI pointing at        */
/* the first byte position beyond the last converted character.         */
/* 															            */
/************************************************************************/

procedure conv.dToBuf( d:dword in eax; var buffer:var in edi );  
	@nodisplay; 
	@noalignstack;
	@noframe; 
begin dToBuf;

	push( eax );
	movzx( (type byte [esp+3]), eax );
	mov( (type word stdlib.hexTbl[eax*2]), ax );
	mov( ax, [edi] );

	movzx( (type byte [esp+2]), eax );
	mov( (type word stdlib.hexTbl[eax*2]), ax );
	mov( ax, [edi+2] );
	add( 4, edi );
	Output_();

	movzx( (type byte [esp+1]), eax );
	mov( (type word stdlib.hexTbl[eax*2]), ax );
	mov( ax, [edi] );

	movzx( (type byte [esp]), eax );
	mov( (type word stdlib.hexTbl[eax*2]), ax );
	mov( ax, [edi+2] );
	add( 4, edi );
	pop( eax );
	ret();
		
end dToBuf;


end ConvUnit;
