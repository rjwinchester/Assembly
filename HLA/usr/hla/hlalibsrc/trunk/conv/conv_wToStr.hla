
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "conv.hhf" )
#includeOnce( "stdlibdata.hhf" )
#includeOnce( "strings.hhf" )
#includeOnce( "excepts.hhf" )


/************************************************************/
/*                                                          */
/* wToStr-                                                  */
/*                                                          */
/* Converts a word value to a string of hexadecimal digits. */
/*                                                          */
/* Inputs:                                                  */
/* 	w-	                                                    */
/* 		contains the word to convert.                       */
/* 		                                                    */
/* 	buffer-                                                 */
/* 		points at an HLA string that will hold              */
/* 		the converted result.                               */
/*                                                          */
/************************************************************/


procedure conv.wToStr( w:word; buffer:string ); 
	@nodisplay;
	@noframe;
	@noalignstack;
	
begin wToStr;

	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( edi );
	
	mov( buffer, edi );
	test( edi, edi );
	jz refNULL;
	
	cmp( (type str.strRec [edi]).maxlen, 4 );
	jb strOvfl;
	
	// Create the four-character string from the hex value:
	
	mov( 4, (type str.strRec [edi]).length );

	movzx( (type byte w[1]), eax );
	mov( (type word stdlib.hexTbl[eax*2]), ax );
	mov( ax, [edi] );

	movzx( (type byte w), eax );
	mov( (type word stdlib.hexTbl[eax*2]), ax );
	mov( ax, [edi+2] );
	mov( 0, (type byte [edi+4]));
	
	pop( edi );
	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
strOvfl:
	raise( ex.StringOverflow );
	
refNULL:
	raise( ex.AttemptToDerefNULL );
	
end wToStr;

end ConvUnit;
