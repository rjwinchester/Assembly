
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "conv.hhf" )


/**********************************************************/
/*                                                        */
/* i16Size                                                */
/*                                                        */
/* This routine computes the minimum number of print      */
/* positions needed to display an int16 value. The        */
/* size, in digits, is returned in the EAX register.      */
/*                                                        */
/* Input:                                                 */
/* 	iValue parameter contains int16 value                 */
/* 	                                                      */
/* Returns:                                               */
/* 	Number of digits in EAX.                              */
/*                                                        */
/**********************************************************/


procedure conv.i16Size( iValue:word in ax ); @nodisplay; @noframe;
begin i16Size;

	// Handle negative and non-negative values separately.

	cmp( ax, 0 );
	jl negativeValue;
		
		cmp( ax, 10 );			// Determine the # of digits
		jb one;					// this number requires.
		cmp( ax, 100 );
		jb two;
		cmp( ax, 1_000 );
		jb three;
		cmp( ax, 10_000 );
		jb fourOrFive;

	_5or6:
			mov( 5, eax );
			jmp TestOU;

		fourOrFive:
			mov( 4, eax );

		TestOU:
			_hla.test_OutputUnderscores();
			je AllDone;

				add( 1, eax );

			AllDone:
				ret();

		three:
			mov( 3, eax );
			ret();

		one:
			mov( 1, eax );
			ret();

		two:
			mov( 2, eax );
			ret();



	negativeValue:
		cmp( ax, -10 );
		jg two;
		cmp( ax, -100 );
		jg three;
		cmp( ax, -1_000 );
		jg _4;
		cmp( ax, -10_000 );
		jg _5or6;

		mov( 6, eax );
		jmp TestOU;

	_4:
		mov( 4, eax );
		ret();

end i16Size;

end ConvUnit;
