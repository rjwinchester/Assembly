
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "conv.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "strings.hhf" )

/*************************************************************/
/*                                                           */
/* h128Size                                                  */
/*                                                           */
/* This routine computes the minimum number of print         */
/* positions needed to display an lword value  The size,     */
/* in digits, is returned in the                             */
/* EAX register.                                             */
/*                                                           */
/* Input (lsize):                                            */
/* 	lVal-		Contains the value to compute the size of.   */
/* 	                                                         */
/* Returns:                                                  */
/* 	EAX-	1..32 denoting the number of hexadecimal digits  */
/* 			needed to represent this value.                  */
/*                                                           */
/*************************************************************/



procedure conv.h128Size( _lVal: lword); 
	 @nodisplay; 
	 @noframe;

const
	lVal	:text := "(type dword [esp+4])";

begin h128Size;

	bsr( lVal[12], eax );
	jz TryByte8;
	
		add( 96, eax );			// H.O. dword has at least 24 digits, round
		shr( 2, eax );			// up to the next full hex digit (99=24*4+3).
		jmp chkUnderScores;
		
	TryByte8:
		bsr( lVal[8], eax );
		jz	TryByte4;

			add( 64, eax );	// Dword #2 has at least 16 digits.
			shr( 2, eax );	// (67 = 16*4+3).
			jmp chkUnderScores;
			
	
	TryByte4:
		bsr( lVal[4], eax );
		jz TryByte0;

			add( 32, eax );	// Dword #1 has at least 8 digits.
			shr( 2, eax );	// (35 = 8*4+3).
			jmp chkUnderScores;
				
	TryByte0:
		bsr( lVal, eax );
		jz isZero;
				
			shr( 2, eax );	// (0 = 0*4+3).
			jmp chkUnderScores;
					
	isZero:
		xor( eax, eax );
  	

// For each 4 characters (plus one) in the number, add an extra
// character position for the underscore, but only if the global
// boolean "OutputUnderscores" is true.

chkUnderScores:
	push( eax );
	cmp( _hla.get_OutputUnderscores(), false );
	pop( eax );
	je noExtraCharPositions;

		push( ecx );
		mov( eax, ecx );
		shr( 2, ecx );
		add( ecx, eax );
		pop( ecx );

noExtraCharPositions:
	add( 1, eax );		// Because even single digit values have one digit.
	ret( _parms_ );
	

end h128Size;

end ConvUnit;
