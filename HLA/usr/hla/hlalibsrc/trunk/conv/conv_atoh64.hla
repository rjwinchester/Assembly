
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "stdlibdata.hhf" )		
#includeOnce( "conv.hhf" )
#includeOnce( "excepts.hhf" )


/**************************************************************/
/*                                                            */
/* atoh64-                                                    */
/*                                                            */
/* ESI points at a sequence of characters that represent      */
/* a hexadecimal value.  This function converts that sequence */
/* to the numeric equivalent and returns the result in        */
/* EDX:EAX.  ESI is left pointing at the first non-hex        */
/* character.  See atou and atoi for more details on this     */
/* routine.                                                   */
/*                                                            */
/**************************************************************/



procedure conv.atoh64( var buffer:var in esi ); 
	@nodisplay; 
	@noframe;
			
begin atoh64;

	push( ebx );
	push( ecx );

	mov( _hla.get_Delimiters(), ebx );
	
	xor( eax, eax );	// Init H.O. three bytes of EAX to zero.
	mov( eax, edx );	// Initialize EDX:ECX with zero.
	mov( eax, ecx );
	
	// Skip over any delimiter characters at the beginning
	// of the string.
	
	sub( 1, esi );
	whileDelimLoop:
	
		NextChar;
		cmp( eax, $80 );
		jae IllegalChar;
		bt( eax, (type dword [ebx]) );
		jc whileDelimLoop;
	
	// Do the actual numeric conversion:

	_atoh();

	// Verify that we've ended with a delimiter char:
	
	movzx( (type byte [esi]), ecx );
	bt( ecx, (type dword [ebx]) );	// Delimiters
	jnc convError;

	pop( ecx );
	pop( ebx );
	ret();
	
convError:
	raise( ex.ConversionError );
	
Overflow:
	raise( ex.ValueOutOfRange );
	
IllegalChar:
	raise( ex.IllegalChar );

end atoh64;


end ConvUnit;
