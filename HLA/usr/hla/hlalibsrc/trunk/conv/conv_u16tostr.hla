
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "conv.hhf" )


/********************************************************/
/*                                                      */
/* u16ToStr-                                            */
/*                                                      */
/* Zero extends a word value to 64 bits and then calls  */
/* the i64ToStr routine above to convert the 16-bit     */
/* integer into a string of decimal digits.             */
/*                                                      */
/********************************************************/

procedure conv.u16ToStr( w:word; width:int32; f:char; buf:string ); 
	 @nodisplay; 
	 @noalignstack;
	 @noframe;
begin u16ToStr;

	// Parameters are always multiples of 32 bits. Zero out the
	// H.O. (indeterminate) value of w and then call u32ToStr
	// to do the real work.
	//
	// stk+16:	w
	// stk+12:	width
	// stk+8:	f
	// stk+4:	buf
	// stk+0:	return address

	mov( 0, (type word [esp+18]));
	jmp conv.u32ToStr;
		
end u16ToStr;
	


end ConvUnit;
