
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "conv.hhf" )


/**************************************************************/
/* 	                                                          */
/* tbToBuf-													  */
/*                                                            */
/* This routine converts the value passed in the tb parameter */
/* to a sequence of characters that form the hexadecimal      */
/* representation of the value.  It stores the character      */
/* output starting at the location specified by the EDI       */
/* register.  Note that the buffer pointed at by EDI must be  */
/* large enough to hold the result, no checking is done.      */
/*                                                            */
/*                                                            */
/* This routine leaves EDI pointing at the first byte         */
/* position beyond the last converted character.              */
/*                                                            */
/**************************************************************/
															 


procedure conv.tbToBuf( tb:tbyte; var buffer:var in edi );
	@nodisplay; 
	@noalignstack;
	@noframe; 
begin tbToBuf;

	push( ebp );
	mov( esp, ebp );
	push( eax );

	mov( (type word tb[8]), ax );
	conv.wToBuf( ax, [edi] );
	Output_();

	mov( (type dword tb[4]), eax );
	conv.dToBuf( eax, [edi] );
	Output_();

	mov( (type dword tb), eax );
	conv.dToBuf( eax, [edi] );

	pop( eax );
	pop( ebp );
	ret( _parms_ );
	
end tbToBuf;





end ConvUnit;
