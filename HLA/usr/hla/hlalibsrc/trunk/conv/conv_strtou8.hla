
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "conv.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "strings.hhf" )


/********************************************************/
/*                                                      */
/* strTou8-                                             */
/* strTou16-                                            */
/* strTou32-                                            */
/* strTou64-                                            */
/*                                                      */
/* These routines are nearly identical to the strToiXXX */
/* routines except they deal with unsigned, rather than */
/* signed, values.		                                */
/*                                                      */
/********************************************************/
		

procedure conv.strTou8( s:string; index:dword );  
	@nodisplay;
	@noframe; 
	@noalignstack;
begin strTou8;

	push( ebp );
	mov( esp, ebp );
	push( esi );
	
	// Get the string pointer and make sure it's valid.
	
	mov( s, esi );
	test( esi, esi );
	jz refNULL;
	
	// Get the starting index and make sure it does not
	// exceed the string length.
	
	mov( index, eax );
	cmp( eax, (type str.strRec [esi]).length );
	ja strIndexErr;
	
	add( eax, esi );		// Point at start of integer string.
	conv.atou8( [esi] );	// Convert to an integer.
	
	// Okay, check to see if the converted value is within the
	// proper range.  For this function, the value must be in the range
	// 0..255.
	
	cmp( eax, 255 );
	ja voor;
	
	// Return the result in EAX.
	
	pop( esi );
	pop( ebp );
	ret( _parms_ );

refNULL:
	raise( ex.AttemptToDerefNULL );

strIndexErr:
	raise( ex.StringIndexError );

voor:
	raise( ex.ValueOutOfRange );

	
end strTou8;

end ConvUnit;
