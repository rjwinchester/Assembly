
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ConvUnit;

#includeOnce( "../include/conversions.hhf" )
#includeOnce( "stdlibdata.hhf" )		
#includeOnce( "conv.hhf" )
#includeOnce( "excepts.hhf" )


/**************************************************************/
/*                                                            */
/* atoh80-                                                    */
/*                                                            */
/* ESI points at a sequence of characters that represent      */
/* a hexadecimal value.  This function converts that sequence */
/* to the numeric equivalent and returns the result in        */
/* tb.  ESI is left pointing at the first non-hex             */
/* character.  See atou and atoi for more details on this     */
/* routine.                                                   */
/*                                                            */
/**************************************************************/



procedure conv.atoh80( var buffer:var in esi; var tb:tbyte ); 
	@nodisplay; 
	@noframe;
			
var
	ediSave	:dword;
	edxSave	:dword;
	ecxSave	:dword;
	ebxSave :dword;
	eaxSave	:dword;

begin atoh80;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( eax, eaxSave );
	mov( ebx, ebxSave );
	mov( ecx, ecxSave );
	mov( edx, edxSave );
	mov( edi, ediSave );
	
	mov( _hla.get_Delimiters(), edi );

	xor( eax, eax );	// Init H.O. three bytes of EAX to zero.
	mov( eax, edx );	// Initialize EDX:ECX with zero.
	mov( eax, ecx );
	
	// Skip over any delimiter characters at the beginning
	// of the string.
	
	sub( 1, esi );
	whileDelimLoop:
	
		NextChar;
		cmp( eax, $80 );
		jae IllegalChar;
		bt( eax, (type dword [edi]) );
		jc whileDelimLoop;
	
	// Do the actual numeric conversion:

	xor( eax, eax );	// Init H.O. three bytes of EAX to zero.
	mov( eax, ebx );	// Initialize EDX:ECX:EBX with zero.
	mov( eax, ecx );
	mov( eax, edx );
	
	// Skip over any delimiter characters at the beginning
	// of the string.
	
	sub( 1, esi );
	whileDelimLoop_2:
	
		NextChar;
		cmp( eax, $80 );
		jae IllegalChar;
		bt( eax, (type dword [edi] ));
		jc whileDelimLoop_2;
	
	// The first (non-delimiter) character *must* be a legal hex digit.
	
	movzx( (type byte [esi]), eax );
	movsx( stdlib.hexConvTbl[eax], eax );
	test( eax, eax );
	js convError;
	
	
	// For each legal character that ESI points at, repeat
	// the following until we encounter a delimiter or
	// illegal character.
	
	whileAHexDigit:
		
		// Okay, we've got a hex digit, so add it into EDX:ECX.
		
		cmp( edx, $1000 );
		jae Overflow;
		shl( 28, eax );
		shld( 4, ecx, edx );
		shld( 4, ebx, ecx );
		shld( 4, eax, ebx );
			
		// Move on to the next character:
		
		NextChar;
		movsx( stdlib.hexConvTbl[eax], eax );	// $ff if not a hex digit
		test( eax, eax );
		jns whileAHexDigit;


	// Verify that we've ended with a delimiter char:
	
	movzx( (type byte [esi]), eax );
	bt( eax, [edi] );		// Delimiters
	jnc convError;

	// Store away the result:

	mov( tb, eax );
	mov( ebx, [eax] );
	mov( ecx, [eax+4] );
	mov( dx, [eax+8] );

	mov( eaxSave, eax );
	mov( ebxSave, ebx );
	mov( ecxSave, ecx );
	mov( edxSave, edx );
	mov( ediSave, edi );
	leave();
	ret( _parms_ );
	
convError:
	raise( ex.ConversionError );
	
Overflow:
	raise( ex.ValueOutOfRange );
	
IllegalChar:
	raise( ex.IllegalChar );

end atoh80;


end ConvUnit;
