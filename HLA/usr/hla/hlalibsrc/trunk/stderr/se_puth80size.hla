
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit StdErrOutput;



#include( "../include/stderrunit.hhf" );


/*****************************************************/
/*                                                   */
/* puth80size-                                       */
/*                                                   */
/* Outputs a 80-bit hexadecimal value to the         */
/* standard output device.  Lets the caller          */
/* specify a minimum field width and a padding       */
/* character (usually a space).                      */
/*                                                   */
/* The width parameter specifies the minimum field   */
/* width for the output.  If the number requires     */
/* more print positions than the specified value,    */
/* puth80size will use however many are necessary.   */
/*                                                   */
/* If the specified width is larger than the number  */
/* of print positions, then puth80size will "pad"    */
/* the output with the "fill" character (also passed */
/* as a parameter).  If the width value is positive, */
/* then the numeric output will be right justified   */
/* in the print field;  if the width value is        */
/* negative, then the number will be left justified  */
/* in the print field.                               */
/*                                                   */
/*****************************************************/


procedure stderr.puth80Size( tb:tbyte; width:int32;	fill:char ); @nodisplay; @noframe;
begin puth80Size;

	push( ebp );
	mov( esp, ebp );
	ChkStdErr;
	fileio.puth80Size( StdErrHandle, tb, width, fill );
	pop( ebp );
	ret( _parms_ );
	
end puth80Size;




end StdErrOutput;




	

