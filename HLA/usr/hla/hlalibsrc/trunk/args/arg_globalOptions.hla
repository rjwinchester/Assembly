
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde




unit argsUnit;

#includeOnce( "../include/osargs.hhf" )




/********************************************************/
/*                                                      */
/* GlobalOptions-                                       */
/*                                                      */
/* This iterator steps through each of the command line */
/* parameters and yields a pointer to each of the       */
/* parameters that begins with a "-" or "/" character,  */
/* assuming the character immediately after the "-"     */
/* or "/" is in the "options" character set.            */
/*                                                      */
/********************************************************/

iterator arg.globalOptions( options:cset );
	@frame;
	@nodisplay;
	@nostackalign;
	
var
	argc	:dword;
	eaxSave	:dword;
	ebxSave	:dword;
	ecxSave	:dword;
	 
begin globalOptions;

	mov( ecx, ecxSave );
	mov( ebx, ebxSave );
	mov( eax, eaxSave );
	
	_hla.get_NeedsCmdLn();	
	cmp( al, false );
	je hasCmdLn;

		arg.cmdLn();
		
	hasCmdLn:
	
	_hla.get_argc();
	mov( eax, argc );
	mov( 0, ebx );
	cmp( ebx, eax );
	jnb noMoreArgs;
	whileMoreArgs:
	
		mov( _hla.get_argv( ebx ), ecx );
		cmp( (type char [ecx]), '-' );
		jne notOpt;
		
			movzx( (type byte [ecx+1]), eax );
			bt( eax, options );
			jnc notOpt;
			
				push( ebx );
				mov( ecx, eax );
				mov( ebxSave, ebx );
				mov( ecxSave, ecx );
				yield();
				mov( ebx, ebxSave );
				mov( ecx, ecxSave );
				pop( ebx );
								
		notOpt:
		inc( ebx );
		cmp( ebx, argc );
		jb whileMoreArgs;
		
	noMoreArgs:
	mov( ecxSave, ecx );
	mov( ebxSave, ebx );
	mov( eaxSave, eax );
				
end globalOptions;





end argsUnit;
