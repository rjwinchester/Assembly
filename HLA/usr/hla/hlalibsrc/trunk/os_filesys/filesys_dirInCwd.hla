
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		
#include( "excepts.hhf" )
#include( "../include/fileiounit.hhf" )
#include( "os.hhf" )

/****************************************************************/
/*                                                              */
/* dirInCwd-                                                    */
/*                                                              */
/* Returns all the directories in the current working directory.*/
/*                                                              */
/****************************************************************/



#if( os.win32 )

	iterator filesys.dirInCwd; @nodisplay;
	var
		eaxSave		:dword;
		ecxSave		:dword;
		edxSave		:dword;
		handle		:dword;
		filename	:string;
		FileData	:win.Win32FindData;
		
	begin dirInCwd;

		mov( edx, edxSave );
		mov( ecx, ecxSave );
		mov( eax, eaxSave );
		
		 
		// Find the first matching file (if one exists).
		// Save the handle for use by FindNextFile.
		
		win.FindFirstFile( "*", FileData );
		mov( eax, handle );
		
		// If we matched at least one filename, return
		// the corresponding string and call the
		// FindNextFile routine to match any additional
		// filenames.
		
		cmp( eax, win.INVALID_HANDLE_VALUE );
		je allDone;
		
			repeatUntilNoMore:
			
				mov( FileData.FileAttributes, eax );
				and( win.FILE_ATTRIBUTE_DIRECTORY, eax );
				jz notADir;
			
				
					// FindFirstFile & FindNextFile return
					// zero-terminated strings.  Convert these
					// to HLA compatible strings and return
					// the converted string:
					
					lea( eax, FileData.FileName );
					str.a_cpyz( eax );
					mov( eax, filename );
					cmp( (type byte [eax]), 0 );	// Shouldn't happen, but...
					je notADir2;
					
						// Don't return '.' and '..':
					
						cmp( (type byte [eax]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+1]), 0 );
						je notADir2;
						cmp( (type byte [eax+1]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+2]), 0 );
						je notADir2;
						

						yieldFile:
						
							// Return the converted string to the FOREACH
							// loop and then free the storage associated
							// with the string.
							
							mov( ecxSave, ecx );
							mov( edxSave, edx );
							yield();		// Return string to FOREACH loop.
							mov( edx, edxSave );
							mov( ecx, ecxSave );
							jmp notADir;
							
					notADir2:
						str.free( filename );
				
				notADir:
				
				// Get the next filename in the list:
				
				win.FindNextFile( handle, FileData );
				cmp( al, false );
				jne repeatUntilNoMore;

			
			// When we've processed all the filenames in the list,
			// call FindClose to free the handle and other resources.
			
			win.FindClose( handle );
			
		allDone:
		mov( edxSave, edx );
		mov( ecxSave, ecx );
		mov( eaxSave, eax );

	end dirInCwd;
	
#elseif( os.linux )

	iterator filesys.dirInCwd; @nodisplay;
	var
		handle		:dword;
		filename	:string;
		eaxSave		:dword;
		ebxSave		:dword;
		ecxSave		:dword;
		edxSave		:dword;
		ediSave		:dword;
		esiSave		:dword;
		s			:linux.stat64_t;
		stringBuf	:char[1024];
		dBuf		:byte[4096];
		
		
	begin dirInCwd;

		mov( esi, esiSave );
		mov( edi, ediSave );
		mov( edx, edxSave );
		mov( ecx, ecxSave );
		mov( ebx, ebxSave );
		mov( eax, eaxSave );
		pushfd();
		
		// Initialize string that will hold the retrieved filename:
		
		str.init( stringBuf, 1024 );
		mov( eax, filename );
		
		linux.open( ".", linux.o_rdonly, linux.s_irwxu );
		mov( eax, handle );
		test( eax, eax );
		jz noDirEntries;

			forAllDirEntries:

				linux.getdents
				( 
					handle, 
					(type linux.dirent64 dBuf), 
					@size(dBuf) 
				);
				cmp( eax, 0 );
				jle noDirEntries;
				mov( eax, ecx );
				lea( ebx, dBuf );
				repeatUntilDirEntDone:

					lea( eax, (type linux.dirent64 [ebx]).d_name );
					str.a_cpyz( eax );
					mov( eax, filename );
					
					lea( edx, s );
					linux.stat( eax, [edx] );
					mov( s.st_mode, eax );
					and( linux.s_ifdir, eax );
					jz notADir;
						
					mov( filename, eax );
					cmp( (type byte [eax]), 0 );	// Shouldn't happen, but...
					je notADir;
					
						// Don't return '.' and '..':
					
						cmp( (type byte [eax]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+1]), 0 );
						je notADir;
						cmp( (type byte [eax+1]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+2]), 0 );
						je notADir;
						


						yieldFile:
							push( ecx );
							push( ebx );
							mov( esiSave, esi );
							mov( ediSave, edi );
							mov( edxSave, edx );
							mov( ecxSave, ecx );
							mov( ebxSave, ebx );
							mov( filename, eax );
							yield();
							mov( esi, esiSave );
							mov( edi, ediSave );
							mov( edx, edxSave );
							mov( ecx, ecxSave );
							mov( ebx, ebxSave );
							pop( ebx );
							pop( ecx );
							jmp wasADir;
						
					notADir:
						str.free( filename );
						
					wasADir:
					movzx( (type linux.dirent64 [ebx]).d_reclen, edx );
					add( edx, ebx );
					sub( edx, ecx );
					cmp( ecx, 0 );
					jg repeatUntilDirEntDone;
					
			jmp forAllDirEntries;

		noDirEntries:
		linux.close(handle);
		mov( esiSave, esi );
		mov( ediSave, edi );
		mov( edxSave, edx );
		mov( ecxSave, ecx );
		mov( ebxSave, ebx );
		mov( eaxSave, eax );
		popfd();

	end dirInCwd;

#elseif( os.freeBSD )

	iterator filesys.dirInCwd; @nodisplay;
	var
		handle		:dword;
		filename	:string;
		eaxSave		:dword;
		ebxSave		:dword;
		ecxSave		:dword;
		edxSave		:dword;
		ediSave		:dword;
		esiSave		:dword;
		s			:bsd.stat_t;
		stringBuf	:char[1024];
		dBuf		:byte[4096];
		
		
	begin dirInCwd;

		mov( esi, esiSave );
		mov( edi, ediSave );
		mov( edx, edxSave );
		mov( ecx, ecxSave );
		mov( ebx, ebxSave );
		mov( eax, eaxSave );
		pushfd();
		
		// Initialize string that will hold the retrieved filename:
		
		str.init( stringBuf, 1024 );
		mov( eax, filename );
		
		bsd.open( ".", bsd.O_RDONLY, bsd.S_IRWXU );
		mov( eax, handle );
		jc openFailed;

			forAllDirEntries:

				bsd.getdents
				( 
					handle, 
					(type bsd.dirent dBuf), 
					@size(dBuf) 
				);
				jc noDirEntries;
				cmp( eax, 0 );
				jle noDirEntries;
				mov( eax, ecx );
				lea( ebx, dBuf );
				repeatUntilDirEntDone:

					lea( eax, (type bsd.dirent [ebx]).d_name );
					str.a_cpyz( eax );
					mov( eax, filename );
					
					lea( edx, s );
					bsd.stat( eax, [edx] );
					jc noDirEntries;
					movzx( s.st_mode, eax );
					and( bsd.S_IFDIR, eax );
					jz notADir;
						
					mov( filename, eax );
					cmp( (type byte [eax]), 0 );	// Shouldn't happen, but...
					je notADir;
					
						// Don't return '.' and '..':
					
						cmp( (type byte [eax]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+1]), 0 );
						je notADir;
						cmp( (type byte [eax+1]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+2]), 0 );
						je notADir;
						


						yieldFile:
							push( ecx );
							push( ebx );
							mov( esiSave, esi );
							mov( ediSave, edi );
							mov( edxSave, edx );
							mov( ecxSave, ecx );
							mov( ebxSave, ebx );
							mov( filename, eax );
							yield();
							mov( esi, esiSave );
							mov( edi, ediSave );
							mov( edx, edxSave );
							mov( ecx, ecxSave );
							mov( ebx, ebxSave );
							pop( ebx );
							pop( ecx );
							jmp wasADir;
						
					notADir:	
						str.free( filename );
					wasADir:
					movzx( (type bsd.dirent [ebx]).d_reclen, edx );
					add( edx, ebx );
					sub( edx, ecx );
					cmp( ecx, 0 );
					jg repeatUntilDirEntDone;
					
			jmp forAllDirEntries;

		  noDirEntries:
		    bsd.close(handle);
		    
		openFailed:
		mov( esiSave, esi );
		mov( ediSave, edi );
		mov( edxSave, edx );
		mov( ecxSave, ecx );
		mov( ebxSave, ebx );
		mov( eaxSave, eax );
		popfd();

	end dirInCwd;

#elseif( os.macOS )

	iterator filesys.dirInCwd; @nodisplay;
	var
		handle		:dword;
		filename	:string;
		eaxSave		:dword;
		ebxSave		:dword;
		ecxSave		:dword;
		edxSave		:dword;
		ediSave		:dword;
		esiSave		:dword;
		s			:mac.stat_t;
		stringBuf	:char[1024];
		dBuf		:byte[4096];
		
		
	begin dirInCwd;

		mov( esi, esiSave );
		mov( edi, ediSave );
		mov( edx, edxSave );
		mov( ecx, ecxSave );
		mov( ebx, ebxSave );
		mov( eax, eaxSave );
		pushfd();
		
		// Initialize string that will hold the retrieved filename:
		
		str.init( stringBuf, 1024 );
		mov( eax, filename );
		
		mac.open( ".", mac.O_RDONLY, mac.S_IRWXU );
		mov( eax, handle );
		jc openFailed;

			forAllDirEntries:

				mac.getdents
				( 
					handle, 
					(type mac.dirent dBuf), 
					@size(dBuf) 
				);
				jc noDirEntries;
				cmp( eax, 0 );
				jle noDirEntries;
				mov( eax, ecx );
				lea( ebx, dBuf );
				repeatUntilDirEntDone:

					lea( eax, (type mac.dirent [ebx]).d_name );
					str.a_cpyz( eax );
					mov( eax, filename );
					
					lea( edx, s );
					mac.stat( eax, [edx] );
					jc noDirEntries;
					movzx( s.st_mode, eax );
					and( mac.S_IFDIR, eax );
					jz notADir;
						
					mov( filename, eax );
					cmp( (type byte [eax]), 0 );	// Shouldn't happen, but...
					je notADir;
					
						// Don't return '.' and '..':
					
						cmp( (type byte [eax]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+1]), 0 );
						je notADir;
						cmp( (type byte [eax+1]), '.' );
						jne yieldFile;
						cmp( (type byte [eax+2]), 0 );
						je notADir;
						


						yieldFile:
							push( ecx );
							push( ebx );
							mov( esiSave, esi );
							mov( ediSave, edi );
							mov( edxSave, edx );
							mov( ecxSave, ecx );
							mov( ebxSave, ebx );
							mov( filename, eax );
							yield();
							mov( esi, esiSave );
							mov( edi, ediSave );
							mov( edx, edxSave );
							mov( ecx, ecxSave );
							mov( ebx, ebxSave );
							pop( ebx );
							pop( ecx );
							jmp wasADir;
						
					notADir:	
						str.free( filename );
					wasADir:
					movzx( (type mac.dirent [ebx]).d_reclen, edx );
					add( edx, ebx );
					sub( edx, ecx );
					cmp( ecx, 0 );
					jg repeatUntilDirEntDone;
					
			jmp forAllDirEntries;

		  noDirEntries:
		    mac.close(handle);
		    
		openFailed:
		mov( esiSave, esi );
		mov( ediSave, edi );
		mov( edxSave, edx );
		mov( ecxSave, ecx );
		mov( ebxSave, ebx );
		mov( eaxSave, eax );
		popfd();

	end dirInCwd;

#else 

	#print( "Unknown OS!" )

#endif

end FileIOUnit;

