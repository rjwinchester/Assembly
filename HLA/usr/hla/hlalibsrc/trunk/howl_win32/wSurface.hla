unit wSurface_u;
?@NoDisplay := true;
?@NoStackAlign := true;

#include( "howl.hhf" )
#include( "excepts.hhf" )
#include( "strings.hhf" )
#include( "memory.hhf" )

#includeOnce( "../include/howlunit.hhf" )		
#includeOnce( "stdio.hhf" )
#includeOnce( "stdout.hhf" )

readonly
	align( 4 );		
	vmt( wSurface_t );



/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// wSurface_t objects:


procedure wSurface_t.create_wSurface
(
	wsName		:string;
	exStyle		:dword;
	style		:dword; 
	parent		:dword; 									
	x			:dword; 
	y			:dword;
	width		:dword;
	height		:dword;
	bkgColor	:dword;
	visible		:boolean 
);;
	
_begin( wSurface_t, create_wSurface );

	push( eax );
	push( ecx );
	push( edx );
	
	// This is an abstract class, so ESI cannot be NULL
	
	assert( esi <> NULL );
	
	// Create the underlying HOWL object:
	
	(type wClickable_t [esi]).create_wClickable
	(
		wsName,
		parent,									
		x,	  
		y,	  
		width, 
		height,
		NULL
	);
	mov( cl, this.wBase_private.onHeap );
	howl.setType( wSurface_c );
	mov( &wSurface_t._VMT_, this._pVMT_ );
	this.set_bkgColor( bkgColor );
	mov( style, eax );
	mov( eax, this.wVisual_private.style );
	mov( exStyle, eax );
	mov( eax, this.wVisual_private.exStyle );
	
	
	// Create the window:
	
	w.CreateWindowEx
	( 
		exStyle, 
		howl.Window_t_ClassName, 
		NULL, 
		style,
		x,
		y,
		width,
		height,
		parent,
		NULL,
		howl.howlInstance,
		NULL
	);
	mov( eax, this.handle );
	w.SetWindowLong( eax, w.GWL_USERDATA, esi );
	
	mov( NULL, this.wSurface_private.onPaint );
	
	if( visible ) then
	
		w.ShowWindow( this.handle, w.SW_SHOWNORMAL );
		w.UpdateWindow( this.handle );
		
	else
		
		w.ShowWindow( this.handle, w.SW_HIDE );

	endif;
	
	pop( edx );
	pop( ecx );
	pop( eax );	
	

_end( wSurface_t, create_wSurface );


// destroy-
//
//	Deallocates storage for the window and all the windows on
// the widgets on the window.

method wSurface_t.destroy;;
_begin( wSurface_t, destroy );

	push( eax );
	push( ecx );
	push( edx );
	
	w.DestroyWindow( this.handle );
	
	// Delete the container objects and the storage
	// associated with this wSurface_t object:
	
	super.destroy();
		
	pop( edx );
	pop( ecx );
	pop( eax );

_end( wSurface_t, destroy );

// Empty methods for onCreate and onClose.

method wSurface_t.onCreate;;
_begin( wSurface_t, onCreate );
_end( wSurface_t, onCreate );

method wSurface_t.onClose;;
_begin( wSurface_t, onClose );
_end( wSurface_t, onClose );


// Retrieve the onPaint pointer for the window.

method wSurface_t.get_onPaint;;
_begin( wSurface_t, get_onPaint );

	mov( this.wSurface_private.onPaint, eax );
	
_end( wSurface_t, get_onPaint );



// Set the onPaint pointer for the window.

method wSurface_t.set_onPaint( onPaint:widgetProc );;
_begin( wSurface_t, set_onPaint );

	mov( onPaint, eax );
	mov( eax, this.wSurface_private.onPaint ) ;
	
_end( wSurface_t, set_onPaint );


// Generic wSurface_t processMessage method.
//
//	Handles the following messages:
//
//	w.WM_ERASEBKGND:
//		Draws the background of a window.
//
//	Any Other Message-
//		Calls the default message handler for the wContainer_t class (which
//		probably means we're calling the default Windows message handler).			

method wSurface_t.processMessage
( 
	hwnd	:dword; 
	uMsg	:dword; 
	wParam	:dword; 
	lParam	:dword 
);
var
	r			:w.RECT;

_begin( wSurface_t, processMessage );

	mov( uMsg, eax );
	if( eax = w.WM_ERASEBKGND ) then
	
		w.GetClientRect( hwnd, r );
		w.FillRect( wParam, r, this.wVisual_private.bkgBrush );
		mov( true, eax );
		exit processMessage;
		
	elseif( eax = w.WM_PAINT ) then
	
		if( this.wSurface_private.onPaint <> NULL ) then
		
			this.wSurface_private.onPaint( esi, wParam, lParam );
			exit processMessage;
		
		endif;
		
	endif;
	
	// Some generic message that the default handler must
	// process.
	
	super.processMessage( hwnd, uMsg, wParam, lParam );
		
_end( wSurface_t, processMessage );

end	wSurface_u;