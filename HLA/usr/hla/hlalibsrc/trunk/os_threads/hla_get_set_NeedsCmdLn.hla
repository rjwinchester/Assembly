
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit ThreadUnit;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "../include/thread_private.hhf" )
#includeOnce( "../include/osargs.hhf" )
#includeOnce( "threads.hhf" )
#includeOnce( "excepts.hhf" )


namespace arg;
	
	static
		align(4);
		
		// Command-line related variables:
										 
		CommandLine			:string := NULL;
		_argc				:uns32 := 0;
		_argv				:string[ @global:MaxCmdLnParms ];
		
		NeedsCmdLn			:boolean := @global:true;
		
end arg;


#if( @thread )

	procedure _hla.get_NeedsCmdLn;
	begin get_NeedsCmdLn;

		#if( os.win32 )
		
			push( ecx );
			push( edx );
			TlsGetValue( thread.threadContext );
			test( eax, eax );
			jz ThreadError;
			pop( edx );
			pop( ecx );
			
		#elseif( os.linux | os.freeBSD | os.macOS )
		
			pthread_getspecific( thread.threadContext );
			test( eax, eax );
			jz ThreadError;
			
		#else
		
			#error( "Unknown OS!" )
			
		#endif
		movzx( (type _hla.stdlib_tls_t [eax]).cl_NeedsCmdLn, eax );
		ret(); 
		
	ThreadError:
		raise( ex.ThreadError );
				
	end get_NeedsCmdLn;
	

	procedure _hla.set_NeedsCmdLn( ncln:boolean );
	begin set_NeedsCmdLn;

		push( ebp );
		mov( esp, ebp );
		push( eax );
		push( ecx );
		push( edx );
		#if( os.win32 )
		
			TlsGetValue( thread.threadContext );
			test( eax, eax );
			jz ThreadError;
			
		#elseif( os.linux | os.freeBSD | os.macOS )
		
			pthread_getspecific( thread.threadContext );
			test( eax, eax );
			jz ThreadError;
			
		#else
		
			#error( "Unknown OS!" )
			
		#endif
		mov( ncln, cl );
		mov( cl, (type _hla.stdlib_tls_t [eax]).cl_NeedsCmdLn );
		pop( edx );
		pop( ecx );
		pop( eax );
		pop( ebp );
		ret( _parms_ ); 
		
	ThreadError:
		raise( ex.ThreadError );
		
	end set_NeedsCmdLn;
		



#else

	procedure _hla.get_NeedsCmdLn;
	begin get_NeedsCmdLn;

		movzx( arg.NeedsCmdLn, eax );
		ret();
		
	end get_NeedsCmdLn;


	procedure _hla.set_NeedsCmdLn( ncln:boolean );
	begin set_NeedsCmdLn;

		push( ebp );
		mov( esp, ebp );
		push( eax );
		mov( ncln, al );
		mov( al, arg.NeedsCmdLn );
		pop( eax );
		pop( ebp );
		ret( _parms_ );
		
	end set_NeedsCmdLn;
	
#endif
	


end ThreadUnit;
