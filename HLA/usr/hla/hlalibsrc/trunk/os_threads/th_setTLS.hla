// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/7/2008, by Randall Hyde


unit threads;
?@nostackalign := true;
?@noframe := true;
?@nodisplay := true;

#includeOnce( "os.hhf" )
#includeOnce( "threads.hhf" )
#includeOnce( "excepts.hhf" )
#includeOnce( "../include/thread_private.hhf" )

#if( os.win32 )
	#include( "w.hhf" )
#elseif( os.linux )
	#include( "linux.hhf" )
#elseif( os.freeBSD )
	#include( "bsd.hhf" )
#elseif( os.macOS )
	#include( "mac.hhf" )
#else
	#error( "Unsupported OS" )
#endif

// thread.getTLS-
//
//	Retrieves the per-thread data object specified by the handle parameter.

#if( os.win32 )

	procedure thread.setTLS( context:dword; valueToSet:dword );
	begin setTLS;

		push( ebp );
		mov( esp, ebp );
		
		push( eax );
		push( ecx );
		push( edx );
		
		w.TlsSetValue( context, valueToSet );

		pop( edx );
		pop( ecx );
		pop( eax );
		leave();
		ret( _parms_ );
		
	end setTLS;


#elseif( os.linux | os.freeBSD | os.macOS )
	

	procedure thread.setTLS( context:dword; valueToSet:dword );
	begin setTLS;

		push( ebp );
		mov( esp, ebp );
		
		push( eax );
		push( ecx );
		push( edx );
		
		pthread_setspecific( context, valueToSet );

		pop( edx );
		pop( ecx );
		pop( eax );
		leave();
		ret( _parms_ );
		
	end setTLS;


	
#else

	#error( "Unknown OS!" )
	
#endif


end threads;
