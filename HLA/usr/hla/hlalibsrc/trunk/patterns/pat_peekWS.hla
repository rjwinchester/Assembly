
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit patterns;
#includeOnce( "../include/pat.hhf" )
#includeOnce( "patterns.hhf" )
#include( "chars.hhf" )

	
	

/************************************************************/
/*                                                          */
/* PeekWS-                                                  */
/*                                                          */
/* Checks to see if the next character is a whitespace      */
/* character.  Does not consume the character.				*/
/*                                                          */
/* Disposition:		Eager                                   */
/* BackTrackable:	Yes                                     */
/*                                                          */
/* Entry Parameters:                                        */
/*                                                          */
/* 	ESI:	Pointer to sequence of characters to match.     */
/* 	EDI:	Pointer to byte beyond last char to match.      */
/*                                                          */
/* Exit Parameters (if success):                            */
/*                                                          */
/*  EBX:	Points at the start of matched sequence.		*/
/* 	ESI:	Unchanged.										*/
/*															*/
/* 	EDI:	Unchanged from entry value.                     */
/*                                                          */
/* Exit Parameters (if failure):                            */
/*															*/
/*	EDI:	Unchanged from original entry value.			*/
/*	ESI:	Unchanged from original entry value.			*/
/*                                                          */
/* Unless noted, assume all other registers can be modified */
/* by this code.                                            */
/*                                                          */
/************************************************************/

		
procedure pat.peekWS; @nodisplay; @noframe;
begin peekWS;

	
	// Fail if we're at the end of the string.

	cmp( esi, edi );
	jae fail1;
	
	// Peek ahead to see if we've got a whitespace char.
	
	push( ebp );		// pat.peekCset requires an activation record!
	mov( esp, ebp );
	pat.peekCset( chars.WhiteSpaceCset );
	mov( [ebp+4], eax );
	mov( [ebp], ebp );
	jmp( eax );
	
	
fail1:
	pat._fail_( pat.FailTo );		

end peekWS;

end patterns;
