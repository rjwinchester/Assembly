
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit patterns;
#includeOnce( "patterns.hhf" )
#includeOnce( "misctypes.hhf" )
#includeOnce( "../include/pat.hhf" )

	
	

/**************************************************************/
/*                                                            */
/* arb-			                                              */
/*                                                            */
/* Agressively (eagerly) matches all the remaining characters */
/* in a string.  Relies on backtracking for any following     */
/* patterns to match.                                         */
/* 							                                  */
/*                                                            */
/* Disposition:		Eager                                     */
/* BackTrackable:	Yes                                       */
/*                                                            */
/* Entry Parameters:                                          */
/*                                                            */
/* 	ESI:	Pointer to sequence of characters to match.       */
/* 	EDI:	Pointer to byte beyond last char to match.        */
/*                                                            */
/* Exit Parameters (if success):                              */
/*                                                            */
/*  EBX:	Points at the start of matched sequence.		  */
/* 	ESI:	Unchanged.										  */
/* 														      */
/* 	EDI:	Unchanged from entry value.                       */
/*                                                            */
/* Exit Parameters (if failure):                              */
/* 														      */
/* EDI:	Unchanged from original entry value.			      */
/* ESI:	Unchanged from original entry value.			      */
/*                                                            */
/* Unless noted, assume all other registers can be modified   */
/* by this code.                                              */
/*                                                            */
/**************************************************************/


		
procedure pat.arb; @nodisplay; @noalignstack; @noframe;
var
	startPosn:	misc.pChar; 	// Save start of str here.
	endStr:		misc.pChar;		// End of string we're processing.
	cursor:		misc.pChar;		// Last position we matched.
	espSave:	dword;			// To clean stk after back trk.
	FailToSave:	pat.FailRec;	// Save global FailTo value here.
	
begin arb;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	// If some routine after this one fails and transfers
	// control via backtracking to this code, the stack
	// will be a mess.  So save esp so we can clean up
	// the stack if backtracking is necessary.
	
	mov( esp, espSave );

	// Save pointer to end of string to match.
	// This is needed to restore this value when
	// backtracking occurs.

	mov( edi, endStr );

	// Save pointer to start of string.

	mov( esi, startPosn );
	mov( esi, ebx );
	
	// Automatically match everything and succeed.
	
	mov( edi, esi );
	mov( edi, cursor );
	pat._success_( FailToSave, FailToHere );




	// If someone after us fails and invokes
	// backtracking, control is transfered to
	// this point.  First, we need to restore
	// ESP to clean up the junk on the stack.
	// Then we back up one character, failing
	// if we move beyond the beginning of the
	// string.  If we don't fail, we jump to
	// the code following the call to this
	// routine (having backtracked one character).
	
	FailToHere:

		mov( espSave, esp );	// Clean up stack.
		
		mov( cursor, esi );		// Get last posn we matched.
		dec( esi );				// Back up to prev matched char.
		mov( endStr, edi );
		if( esi < startPosn ) then
		
			// We've backed up before the nth char of
		    // the string.  So fail.		

			mov( startPosn, esi );
			mov( FailToSave.ebpSave, pat.FailTo.ebpSave );
			mov( FailToSave.jmpAdrs, pat.FailTo.jmpAdrs );
			pat._fail_( pat.FailTo );
			
		endif;
	
		// If we drop down here, we haven't backed up
		// over the front of the string, so succeed.
		
		mov( startPosn, ebx );
		mov( esi, cursor );
		mov( [ebp+4], eax );
		mov( [ebp], ebp );
		jmp( eax );
	
end arb;

end patterns;
