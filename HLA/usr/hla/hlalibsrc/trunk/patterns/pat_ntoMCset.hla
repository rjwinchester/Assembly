
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit patterns;
#includeOnce( "../include/pat.hhf" )
#includeOnce( "patterns.hhf" )
#includeOnce( "misctypes.hhf" )

	
	
/****************************************************************/
/*                                                              */
/* NtoMCset-                                                    */
/*                                                              */
/* Matches between "n" and "m" characters from a character set. */
/* Does not process more than "m" characters even if additional */
/* characters are in the character set.  Succeeds even if       */
/* additional chars are in the set.                             */
/*                                                              */
/*                                                              */
/* Disposition:		Eager                                       */
/* BackTrackable:	Yes                                         */
/*                                                              */
/* Entry Parameters:                                            */
/*                                                              */
/* 	ESI:	Pointer to sequence of characters to match.         */
/* 	EDI:	Pointer to byte beyond last char to match.          */
/* 	cst:	Character set to match with.                        */
/*                                                              */
/* Exit Parameters (if success):                                */
/*                                                              */
/*  EBX:	Points at the start of matched sequence.			*/
/* 	ESI:	Points at first character not in cst.               */
/* 	EDI:	Unchanged from entry value.                         */
/*                                                              */
/* Exit Parameters (if failure):                                */
/* 														        */
/* EDI:	Unchanged from original entry value.			        */
/* ESI:	Unchanged from original entry value.			        */
/*                                                              */
/* Unless noted, assume all other registers can be modified     */
/* by this code.                                                */
/*                                                              */
/****************************************************************/



		
procedure pat.ntoMCset( cst:cset; n:uns32; m:uns32 ); 
	@nodisplay; 
	@noalignstack;
	@noframe;
	
var
	cursor: 	misc.pChar;		// Save last matched posn here.
	startPosn:	misc.pChar; 	// Save start of str here.
	startMatch:	misc.pChar;		// Start of matched chars.
	endPosn:	misc.pChar;		// Save last possible posn to match here.
	endStr:		misc.pChar;		// End of string goes here.
	espSave:	dword;			// To clean stk after back trk.
	FailToSave:	pat.FailRec;	// Save global FailTo value here.
	
begin ntoMCset;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	// If n > m, then fail.

	mov( n, eax );
	cmp( eax, m );
	ja fail1;

	// If some routine after this one fails and transfers
	// control via backtracking to this code, the stack
	// will be a mess.  So save esp so we can clean up
	// the stack if backtracking is necessary.
	
	mov( esp, espSave );

	// Save pointer to end of string to match.
	// This is needed to restore this value when
	// backtracking occurs.

	mov( edi, endStr );

	// Save ptr to start of string here.

	mov( esi, startPosn );
	mov( esi, ebx );

	
	// Compute the address of the character position
	// we must match to in order to succeed.
	
	mov( esi, eax );
	add( n, eax );

	// If we must match to a position beyond the
	// end of the current string, then fail immediately.

	cmp( eax, edi );
	ja fail1;
	mov( eax, startMatch );

	// Compute that last address we can match.

	mov( esi, eax );
	add( m, eax );
	cmp( eax, edi );
	cmovae( edi, eax );
	mov( eax, endPosn );


	// Okay, eagerly match as many characters in
	// the character set as possible (up to the
	// address in edi).
	
	xor( eax, eax );
	dec( esi );
	repeatUntilNC:
	
		inc( esi );					// Move to next char in string.
		cmp( esi, endPosn );		// Stop at m chars.
		jae repeatDone;
		mov( [esi], al );			// Get the char to test.
		bt( eax, (type dword cst));	// See if in cst.
		jc repeatUntilNC;
		
	repeatDone:	
	
	// So we can easily back track, save a pointer
	// to the first non-matching character.
	
	mov( esi, cursor );

	// If we haven't matched at least "n" characters,
	// then fail;  otherwise return success.

	cmp( esi, startMatch );
	jb fail2;
	pat._success_( FailToSave, FailToHere );




	// If someone after us fails and invokes
	// backtracking, control is transfered to
	// this point.  First, we need to restore
	// ESP to clean up the junk on the stack.
	// Then we back up one character, failing
	// if we move beyond the beginning of the
	// string.  If we don't fail, we jump to
	// the code following the call to this
	// routine (having backtracked one character).
	
	FailToHere:

		mov( espSave, esp );	// Clean up stack.
		
		mov( cursor, esi );		// Get last posn we matched.
		dec( esi );				// Back up to prev matched char.
		mov( endStr, edi );
		
		// If we've backed up before the nth char of
	    // the string.  So we won't be able to
		// match at least n characters.		

		cmp( esi, startMatch );
		jb fail3;
	
		// If we drop down here, there is at least n
		// characters left in the string that we've
		// matched, so call the next matching routine
		// (by jumping to the return address) to continue
		// the pattern match.
		
		mov( startPosn, ebx );
		mov( esi, cursor );
		mov( [ebp+4], eax );
		mov( [ebp], ebp );
		jmp( eax );
	
	
fail2:	
	mov( ebx, esi );
fail1:
	pat._fail_( pat.FailTo );

fail3:

	// Need to restore FailTo address because it
	// currently points at us.  We want to jump
	// to the correct location.

	mov( startPosn, esi );
	mov( FailToSave.ebpSave, pat.FailTo.ebpSave );
	mov( FailToSave.jmpAdrs, pat.FailTo.jmpAdrs );
	pat._fail_( pat.FailTo );

end ntoMCset;


end patterns;
