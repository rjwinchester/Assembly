
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit patterns;
#include( "../include/pat.hhf" )

	
	
/******************************************************************/
/*                                                                */
/* ExactlyNCset-                                                  */
/*                                                                */
/* Matches exactly "n" characters in the specified character set. */
/* The character following these "n" character must not be in     */
/* the set, or the characters matched have to appear at the       */
/* end of the string for this routine to succeed.                 */
/*                                                                */
/* Disposition:	Eager/lazy abivalent                              */
/* BackTrackable:	No.                                           */
/*                                                                */
/* Entry Parameters:                                              */
/*                                                                */
/* 	ESI:	Pointer to sequence of characters to match.           */
/* 	EDI:	Pointer to byte beyond last char to match.            */
/* 	cst:	Character set to match with.                          */
/*                                                                */
/* Exit Parameters (if success):                                  */
/*                                                                */
/*  EBX:	Points at the start of matched sequence.			  */
/* 	ESI:	Points at char beyond matched char.                   */
/* 	EDI:	Unchanged from entry value.                           */
/*                                                                */
/* Exit Parameters (if failure):                                  */
/* 														          */
/* EDI:	Unchanged from original entry value.			          */
/* ESI:	Unchanged from original entry value.			          */
/*                                                                */
/*                                                                */
/* Unless noted, assume all other registers can be modified       */
/* by this code.                                                  */
/*                                                                */
/******************************************************************/


procedure pat.exactlyNCset( cst:cset; n:uns32 ); @nodisplay; @noframe;
begin exactlyNCset;

	push( ebp );		// must do this ourselves since noframe
	mov( esp, ebp );	// is specified as an option.
	
	mov( esi, ebx );
	
	// Are there at least "n" characters left in the string?

	mov( edi, eax );	// Note: edi is one position beyond the
	sub( esi, eax );	// last char we can match.
	cmp( eax, n );
	jb pat_fail_;

	// Okay, if possible match "n" characters.

	xor( eax, eax );
	mov( n, ecx );
	test( ecx, ecx );
	jz whileDone;
	
		whileECXne0:

			mov( [esi], al );
			bt( eax, (type dword cst) );
			jnc pat_fail_2;
			inc( esi );
			dec( ecx );
			jnz whileECXne0;

	whileDone:
	
	// Okay, we've matched "n" characters, now check
	// to make sure that the next char is not in the
	// character set or that we're at the end of the
	// string.

	cmp( esi, edi );
	jae success;
	
		mov( [esi], al );
		bt( eax, (type dword cst) );
		jc pat_fail_2;
	
	success:
	
	// Since this routine doesn't have to handle backtracking,
	// a simple return indicates success.

	pop( ebp );
	ret( _parms_ );

pat_fail_2:
		mov( ebx, esi );
pat_fail_:
		pat._fail_( pat.FailTo );
		
end exactlyNCset;


end patterns;
