
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		

#include( "../include/fileiounit.hhf" )



/***********************************************************/
/*                                                         */
/* fputzsize-                                              */
/*                                                         */
/* This routine writes a zstring to the file               */
/* specified by the file handle passed as a parameter.     */
/* The caller gets to specify a minimum field width        */
/* and a padding character.                                */
/*                                                         */
/***********************************************************/




procedure fileio.putzSize( Handle:dword; zs:zstring; width:int32; fill:char );
	@nodisplay; 

const
	ClrLO2:dword := $FFFF_FFFC;
var
	zlen		:dword;
	bytesWritten:dword;
begin putzSize;


	push( ebp );
	mov( esp, ebp );
	push( eax );
	push( ecx );
	
	
	mov( width, ecx );
	test( ecx, ecx );
	js dontRightJustify;
	
	
		// We only print pad characters if the absolute value of
		// the specified field width is greater than the length
		// of the string.
		
		mov( zs, eax );
		sub( (type str.strRec [eax]).length, ecx );
		js dontRightJustify;
		jz dontRightJustify;
		
			movzx( fill, eax );
			fPutPad( Handle, al, ecx );
		
	dontRightJustify:

	// Write the characters in the string to the file.
		
	mov( zs, ecx );	// Get the address of the string.
	zstr.len( ecx );
	fileio.write( Handle, [ecx], eax );




	// If the width is negative, right-justify the string in
	// the field width by printing the padding characters after the string.
	
	mov( width, ecx );
	test( ecx, ecx );
	jns allDone;
	
	
		// We only print pad characters if the absolute value of
		// the specified field width is greater than the length
		// of the string.
		
		neg( ecx );
		mov( zs, eax );
		sub( (type str.strRec [eax]).length, ecx );
		js allDone;
		jz allDone;
		
			movzx( fill, eax );
			fPutPad( Handle, al, ecx );
		
		
	allDone:
	pop( ecx );
	pop( eax );
	pop( ebp );
	ret( _parms_ );

end putzSize;
		
	
end FileIOUnit;

