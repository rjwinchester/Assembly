
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		



#include( "../include/fileiounit.hhf" )



/*********************************************************/
/*                                                       */
/* fgetu32-                                              */
/*                                                       */
/* Reads an unsigned integer from the specified file.    */
/*                                                       */
/* Inputs:                                               */
/*                                                       */
/* 	_Handle (in EAX)	-Handle of file to access.       */
/* 	                                                     */
/* Returns                                               */
/*                                                       */
/* 	EAX					- Unsigned value read from file. */
/* 	                                                     */
/*********************************************************/
	



procedure fileio.getu32( _Handle:dword in eax ); 
	@noframe; 
	@nodisplay;

var
	Handle		:dword;
	Delimiters	:cset;
	
begin getu32;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	mov( eax, Handle );
	push( edx );
	
	conv.getDelimiters( Delimiters );
	xor( eax, eax );
	xor( edx, edx );
	
	// Skip over any leading delimiters:
	
	repeatUntilNC:
	
		fileio.getc( Handle );
		bt( eax, (type dword Delimiters ));
		jc repeatUntilNC;
		
	
	
	// Okay, input the digits and convert to a number:
	
	
	repeatUntilC:
	
		// The character must be a numeric digit.
		
		cmp( al, '0' );
		jb converr;
		cmp( al, '9' );
		ja converr;


		shl( 1, edx );	// Multiply edx by 10.
		jc Overflow;
			
		push( edx );	// Save *2.
		shl( 1, edx );
		jc Overflow;
		
		shl( 1, edx );	// This is *8.
		jc Overflow;
		
		and( $f, eax );	// Add in current digit.
		add( eax, edx );
		jc Overflow;
		
		pop( eax );		// Add in *2.
		add( eax, edx );
		jc Overflow;
		
		
		// Skip underscores in the middle of the number.
		
		repeatUntilALne_:
			
			fileio.eof( Handle );
			cmp( al, false );
			jne exitIfEOF;

			fileio.getc( Handle );
			cmp( al, '_' );
			je repeatUntilALne_;
			
		movzx( al, eax );
		bt( eax, (type dword Delimiters ));
		jnc repeatUntilC;
		
		
	exitIfEOF:
		mov( edx, eax );
		pop( edx );
		leave();
		ret( _parms_ );
	
converr:
	raise( ex.ConversionError );

Overflow:
	raise( ex.ValueOutOfRange );
		
end getu32;

	
end FileIOUnit;

