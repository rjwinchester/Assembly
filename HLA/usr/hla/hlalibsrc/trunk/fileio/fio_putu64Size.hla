
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		

#include( "../include/fileiounit.hhf" )


// putuSize64-
//	Prints the 64-bit unsigned value passed as a parameter using
// the specified field width and padding character. 

procedure fileio.putu64Size( Handle:dword; q:qword; width:int32; fill:char ); 
	@noframe;
	@nodisplay; 
	@noalignstack;

var
	eaxSave		:dword;
	ecxSave		:dword;
	edxSave		:dword;
	ediSave		:dword;
	numWidth	:uns32;
	buffer		:char[4096];
	
begin putu64Size;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( eax, eaxSave );
	mov( ecx, ecxSave );
	mov( edx, edxSave );
	mov( edi, ediSave );


	// Compute the actual size of the number for later use:
	
	conv.u64Size( q );
	mov( eax, numWidth );
	lea( edi, buffer );
	movzx( fill, eax );
	conv._unsToBuf64Size( q, width, numWidth, al, [edi], @size(buffer)-1 );	
	fileio.write( Handle, [edi], ecx );

	mov( eaxSave, eax );
	mov( ecxSave, ecx );
	mov( edxSave, edx );
	mov( ediSave, edi );
	leave();
	ret( _parms_ );
		
	
end putu64Size;


	
end FileIOUnit;

