
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		



#include( "../include/fileiounit.hhf" )



/*****************************************************/
/*                                                   */
/* fgeti128-                                         */
/*                                                   */
/* Reads a 128-bit signed integer from the input     */
/* file and returns it in [dest].                    */
/*                                                   */
/*****************************************************/

// Modified 2-1-2003 to allow the presence of EOF for use
// as a delimiter character.


procedure fileio.geti128( Handle:dword; var dest:lword ); 
	@noframe; @nodisplay;

var
	Delimiters	:cset;
	IsNeg		:boolean;
	
begin geti128;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	
	push( eax );
	push( ebx );
	push( ecx );
	push( edx );
	push( edi );

	conv.getDelimiters( Delimiters );

	xor( eax, eax );
	xor( edi, edi );
	xor( edx, edx );
	xor( ecx, ecx );
	xor( ebx, ebx );
	
	// Skip over any leading delimiters:
	
	skipDelims:
	
		fileio.getc( Handle );
		bt( eax, (type dword Delimiters ));
		jc skipDelims;
		
	
	
	// Process a possible leading minus sign:
	
	mov( false, IsNeg );
	cmp( al, '-' );
	jne notNegative;
	
		mov( true, IsNeg );
		fileio.getc( Handle );
		
	notNegative:
	
		
	// Okay, input the digits and convert to a number:
	
	
	whileADigit:
	
		// The character must be a numeric digit.
		
		cmp( al, '0' );
		jb convErr;
		cmp( al, '9' );
		ja convErr;			


		shl( 1, ebx );	// Multiply edi:edx:ecx:ebx by 10.
		rcl( 1, ecx );
		rcl( 1, edx );
		rcl( 1, edi );
		jc Overflow;
			
		push( edi );
		push( edx );	// Save *2.
		push( ecx );
		push( ebx );
		
		shl( 1, ebx );	// Compute *4
		rcl( 1, ecx );
		rcl( 1, edx );
		rcl( 1, edi );
		jc Overflow;
		
		shl( 1, ebx );	// Compute *8
		rcl( 1, ecx );
		rcl( 1, edx );
		rcl( 1, edi );
		jc Overflow;
		
		and( $f, eax );	// Add in current digit.
		add( eax, ebx );
		adc( 0, ecx );
		adc( 0, edx );
		adc( 0, edi );
		jc Overflow;
		
		add( [esp], ebx );
		adc( [esp+4], ecx );
		adc( [esp+8], edx );
		adc( [esp+12], edi );
		jc Overflow;
		
		add( 16, esp );		// Remove *2 from stack.
		
		// Skip any underscores in the middle of the number.
		// (Technically, this allows underscores at the end
		// of the number too, but we'll ignore this issue).
		
		whileUnderscore:
		
			fileio.eof( Handle );
			cmp( al, false );
			jne exitIfEOF;
			
			fileio.getc( Handle );
			cmp( al, '_' );
			je whileUnderscore;
			
		movzx( al, eax );
		bt( eax, (type dword Delimiters ));
		jnc whileADigit;
		
	
	exitIfEOF:
	
	// Up to this point, we've only checked for unsigned overflow.
	// We couldn't check for signed overflow because they may be entering
	// the minimum negative # that has no positive counterpart. So at this
	// point we've got to check for signed overflow.
	
	cmp( edi, $8000_0000 );
	ja Overflow;
	jb noOverflow;
	
		mov( edx, eax );
		or( ecx, eax );
		or( ebx, eax );
		jnz Overflow;

		// At this point, the value is $8000_0000_0000_0000_0000_0000_0000_0000
		// which is valid only if the number is negative.
		
		cmp( IsNeg, false );
		je Overflow;	
	
	noOverflow:
	
	// Okay, overflow has not occured, so let's negate the number if there
	// was a sign.
	
	mov( ecx, eax );
	cmp( IsNeg, false );
	je DontNegate;
	
		// IsNeg is true, so negate the 128-bit value:
			
		xor( eax, eax );
		sub( ebx, eax );
		
		mov( 0, ebx );
		sbb( ecx, ebx );
		
		mov( 0, ecx );
		sbb( edx, ecx );
		
		mov( 0, edx );
		sbb( edi, edx );
		
		mov( dest, edi );
		mov( eax, [edi] );
		mov( ebx, [edi+4] );
		mov( ecx, [edi+8] );
		mov( edx, [edi+12] );
		jmp negationDone;
		
	DontNegate:
	
		mov( dest, eax );
		mov( ebx, [eax] );
		mov( ecx, [eax+4] );
		mov( edx, [eax+8] );
		mov( edi, [eax+12] );
		
	negationDone:
	
	pop( edi );
	pop( edx ); 
	pop( ecx );
	pop( ebx );
	pop( eax );
	leave();
	ret( _parms_ );

convErr:
	raise( ex.ConversionError );

Overflow:
	raise( ex.ValueOutOfRange );
		
end geti128;
	
end FileIOUnit;

