
// I, Randall Hyde, hereby agree to waive all claim of copyright (economic
// and moral) in all content contributed by me, the user, and immediately
// place any and all contributions by me into the public domain; I grant
// anyone the right to use my work for any purpose, without any
// conditions, to be changed or destroyed in any manner whatsoever
// without any attribution or notice to the creator.  I also absolve myself
// of any responsibility for the use of this code, the user assumes all
// responsibilities for using this software in an appropriate manner.
//
// Notice of declaration of public domain, 7/12/2006, by Randall Hyde



unit FileIOUnit;
		

#include( "../include/fileiounit.hhf" )
#include( "../include/conversions.hhf" )

/****************************************************************/
/*                                                              */
/* puth32Size-                                                  */
/*                                                              */
/* Outputs a 32-bit value as a hexadecimal string to some file. */
/*                                                              */
/* Inputs:                                                      */
/*                                                              */
/* 	Handle-		Handle of file to receive output.               */
/* 	d-			32-bit value to convert and output              */
/* 	width-		Minimum field width for output (max 4095)       */
/* 	fill-		Padding character                               */
/*                                                              */
/****************************************************************/


procedure fileio.puth32Size( Handle:dword; d:dword; width:dword; fill:char ); 
	@noframe;
	@nodisplay;
	@noalignstack;

var
	eaxSave		:dword;
	ecxSave		:dword;
	ediSave		:dword;
	numWidth	:uns32;
	buffer		:char[4096];
	
begin puth32Size;

	push( ebp );
	mov( esp, ebp );
	sub( _vars_, esp );
	mov( eax, eaxSave );
	mov( ecx, ecxSave );
	mov( edi, ediSave );


	// Compute the actual size of the number for later use:
	
	conv.h32Size( d );
	mov( eax, numWidth );
	lea( edi, buffer );
	movzx( fill, eax );
	conv._hexToBuf32Size( d, width, numWidth, al, [edi], @size( buffer )-1 );	
	fileio.write( Handle, [edi], ecx );

	mov( eaxSave, eax );
	mov( ecxSave, ecx );
	mov( ediSave, edi );
	leave();
	ret( _parms_ );
		
end puth32Size;

end FileIOUnit;

