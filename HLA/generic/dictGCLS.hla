// dictGCLS-
//
// This program demonstrates a simple "dictionary" program written 
// in assembly language (HLA). It is a similar to the "spellcheck.gcc" 
// program provided with the examples in "The Great Computer Language 
// Shoot-out".
// "The Great Computer Language Shoot-out" is found at
//
//		http://www.bagley.org/~doug/shootout/
//
// The purpose of that web page is to demonstrate several
// applications written in various languages. Although one
// of the primary purposes of that web site is to demonstrate
// the different run-time efficiencies of various languages,
// this HLA implementation was not created to demonstrate
// that assembly code is faster or smaller (everyone pretty
// much accepts the fact that the fastest and/or smallest
// example of a program will be written in assembly language).
// Instead, this example demonstrates that with the use of
// a high level assembler (e.g., HLA), it's also possible to
// write code almost as easily as in a high level language
// like C. As such, this example freely sacrifices efficiency
// for readability.


#if( false )

/* -*- mode: c -*-
 * $Id: spellcheck.gcc,v 1.7 2001/07/26 14:52:16 doug Exp $
 * http://www.bagley.org/~doug/shootout/
 * with help from Brad Knotwell
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "simple_hash.h"

#define MAXLINELEN 128

struct ht_ht *dict = NULL;

int handleInput(FILE *input,void (*hashManipFn)(char *))
{
    int wordbufsize = 80,i = 0;
    char *cp, *wordbuf = (char *)malloc(wordbufsize + 1);
    char line[MAXLINELEN];
    
    if((wordbuf = malloc(wordbufsize+1)) == NULL) 
        return(fprintf(stderr,"malloc\n"),0);

    while (fgets(line, MAXLINELEN, input))
	{
		for (cp=line; *cp > 0; cp++) 
		{
		    if (isspace(*cp)) 
		    {
				if (i) 
				{
				    wordbuf[i] = '\0';
		            hashManipFn(wordbuf);
				    i = 0;
				}
		    } 
		    else 
		    {
				wordbuf[i++] = *cp;
				if (i == wordbufsize) 
				{
				    wordbufsize *= 2;
				    if((wordbuf = realloc(wordbuf, wordbufsize + 1)) == NULL)
		              return(fprintf(stderr, "realloc\n"), 0);
				}
	    	}
        }
	}
    free(wordbuf);
    return(1);
}

void spellCheck(char *key) 
{ 
    if (ht_find_new(dict,key)->val != 1) printf("%s\n",key);
}

void hashLoad(char *key) 
{ 
	ht_find_new(dict,key)->val = 1; 
}
 
int main(int argc, char *argv[]) 
{
    FILE *fh;
    int rc;

    /*  
        ht_create doesn't handle malloc and calloc failures 
        so this is superfluous 
    */
    if((dict = ht_create(40000)) == NULL)
        return(fprintf(stderr,"hash creation failed\n"),EXIT_FAILURE);
    
    if ((fh = fopen("Usr.Dict.Words", "r")) == NULL) 
        return(fprintf(stderr,"couldn't open dictionary\n"),EXIT_FAILURE);

    rc = ((handleInput(fh,hashLoad) && handleInput(stdin,spellCheck)) ? EXIT_SUCCESS : EXIT_FAILURE);

    ht_destroy(dict);
    return(rc);
}

#endif

// This simple version of the associate array benchmark
// uses the HLA Standard Library "tables" module to do
// a fairly straight-forward conversion of the above code.

program spellingChecker;
#include( "stdlib.hhf" )

static
	notFound	:uns32 := 0;
	f			:dword;
	entry		:str.strvar(256);
	filename	:str.strvar(256);
	input		:str.strvar(256);
	ht			:table;

	// Dummy routine to clean up table when we're done:

	procedure cleanup; @noframe;
	begin cleanup;

		ret();

	end cleanup;

begin spellingChecker;

	if( arg.c() != 2 ) then

		stdout.put( "Usage: dictGCLS <file>" nl );
		exit spellingChecker;

	endif;
	mov( arg.v( 1 ), filename );

	ht.create( 1024 );	// Allocate and initialize the table.

	// Read the dictionary file into memory and build the
	// hash table:

	mov( fileio.open( "dictionary.txt", fileio.r ), f );
	while( !fileio.eof( f ) ) do

		fileio.gets( f, input );
		ht.getNode( input );

	endwhile;
	fileio.close( f );

	mov( fileio.open( filename, fileio.r ), f );
	while( !fileio.eof( f )) do

		fileio.gets( f, input );
		if( ht.lookup( input ) = NULL ) then

			stdout.put( "Mispelling: ", input, nl );
			inc( notFound );

		endif;

	endwhile;
	ht.destroy(	&cleanup );
	stdout.put( nl nl "Words not found: ", notFound, nl );


end spellingChecker;
