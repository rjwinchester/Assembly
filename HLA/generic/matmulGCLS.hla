// matmul
//
//	This program demonstrates matrix multiplication in
// assembly language. It is conversion of
// the "matrix.c" program that is part of "The Great Computer
// Language Shoot-out" found at
//
//		http://www.bagley.org/~doug/shootout/
//
// The purpose of that web page is to demonstrate several
// applications written in various languages. Although one
// of the primary purposes of that web site is to demonstrate
// the different run-time efficiencies of various languages,
// this HLA implementation was not created to demonstrate
// that assembly code is faster or smaller (everyone pretty
// much accepts the fact that the fastest and/or smallest
// example of a program will be written in assembly language).
// Instead, this example demonstrates that with the use of
// a high level assembler (e.g., HLA), it's also possible to
// write code almost as easily as in a high level language
// like C. As such, this example freely sacrifices efficiency
// for readability.

#if( false )

/* -*- mode: c -*-
 * $Id: matrix.gcc,v 1.6 2001/03/31 15:52:48 doug Exp $
 * http://www.bagley.org/~doug/shootout/
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define SIZE 30

int **mkmatrix(int rows, int cols) {
    int i, j, count = 1;
    int **m = (int **) malloc(rows * sizeof(int *));
    for (i=0; i<rows; i++) {
	m[i] = (int *) malloc(cols * sizeof(int));
	for (j=0; j<cols; j++) {
	    m[i][j] = count++;
	}
    }
    return(m);
}

void zeromatrix(int rows, int cols, int **m) {
    int i, j;
    for (i=0; i<rows; i++)
	for (j=0; j<cols; j++)
	    m[i][j] = 0;
}

void freematrix(int rows, int **m) {
    while (--rows > -1) { free(m[rows]); }
    free(m);
}

int **mmult(int rows, int cols, int **m1, int **m2, int **m3) {
    int i, j, k, val;
    for (i=0; i<rows; i++) {
	for (j=0; j<cols; j++) {
	    val = 0;
	    for (k=0; k<cols; k++) {
		val += m1[i][k] * m2[k][j];
	    }
	    m3[i][j] = val;
	}
    }
    return(m3);
}

int main(int argc, char *argv[]) {
    int i, n = ((argc == 2) ? atoi(argv[1]) : 1);
	
    int **m1 = mkmatrix(SIZE, SIZE);
    int **m2 = mkmatrix(SIZE, SIZE);
    int **mm = mkmatrix(SIZE, SIZE);

    for (i=0; i<n; i++) {
	mm = mmult(SIZE, SIZE, m1, m2, mm);
    }
    printf("%d %d %d %d\n", mm[0][0], mm[2][3], mm[3][2], mm[4][4]);

    freematrix(SIZE, m1);
    freematrix(SIZE, m2);
    freematrix(SIZE, mm);
    return(0);
}


#endif


// Conversion of the "matrix" program in "The Great Computer
// Language Shootout" from C to HLA. This conversion was done
// to demonstrate that writing assembly code isn't a whole lot
// more work that writing C; no attempt was made to optimize
// this code to make it smaller or faster than the corresponding
// C program - this program was written with "ease of writing/reading"
// in mind. 

program matrixMultiplication;
#include( "stdlib.hhf" )

const
	size := 30;

type
	da2d	:array.dArray( int32, 2 ); // 2D dynamic array of int32's.

static
	m1	:da2d;
	m2	:da2d;
	m3	:da2d;
	
begin matrixMultiplication;

	// Allocate storage for the arrays:

	array.daAlloc( m1, size, size );
	array.daAlloc( m2, size, size );
	array.daAlloc( m3, size, size );

	// Initialize m1 and m2 with the values [1,2,3,...,30]x30:
	 
	mov( 1, eax );
	for( mov( 0, ebx ); ebx < size; inc( ebx )) do

		for( mov( 0, ecx ); ecx < size; inc( ecx )) do

			array.index( edx, m1, ebx, ecx );
			mov( eax, [edx] );

			array.index( edx, m2, ebx, ecx );
			mov( eax, [edx] );

			inc( eax );

		endfor;

	endfor;

	// Do the matrix multiplication:

	for( mov( 0, ebx ); ebx < size; inc( ebx )) do

		for( mov( 0, ecx ); ecx < size; inc( ecx )) do

			mov( 0, esi );	// Accumulate row product in ESI
			for( mov( 0, edx ); edx < size; inc( edx )) do

				// esi = esi + m1[ebx][edx] * m2[edx][ecx]:

				array.index( edi, m1, ebx, edx );
				mov( [edi], eax );
				array.index( edi, m2, edx, ecx );
				intmul( [edi], eax );
				add( eax, esi );
				
			endfor;

			// m3[ebx][ecx] = esi:

			array.index( edi, m3, ebx, ecx );
			mov( esi, [edi] );
			
		endfor;
		
	endfor; 

	// Display m3 elements [0,0], [2,3], [3,2], and [4,4]"

	array.index( edi, m3, 0, 0 );
	mov( [edi], eax );
	add( (size*2+3)*4, edi );
	mov( [edi], ebx );
	add( (size-1)*4, edi );
	mov( [edi], ecx );
	add( (size+2)*4, edi );
	mov( [edi], edx );
	stdout.put
	( 
		(type int32 eax), ' ',
		(type int32 ebx), ' ',
		(type int32 ecx), ' ',
		(type int32 edx), nl
	);

	array.daFree( m1 );
	array.daFree( m2 );
	array.daFree( m3 );

end matrixMultiplication;
