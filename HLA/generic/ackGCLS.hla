// Example of "Ackerman's Function" program taken from
// "The Great Computer Language Shootout" as a way of
// demonstrating HLA (assembly) code vs. other HLLs.
// See:
// http://www.bagley.org/~doug/shootout/
//
// Warning: the purpose of this example is to demonstrate
// that writing assembly language isn't a whole lot more
// difficult to write than writing in some HLL like C.
// The HLA code in this example was designed to be readable
// (and easy to write), not specifically efficient (space
// or speed). Optimizing code is a different animal completely
// and optimization is a difficult process, regardless of the
// language. This program is one of a series that demonstrates
// that writing code in assembly isn't all that difficult.


#if( false )
	/* -*- mode: c -*-
	 * $Id: ackermann.gcc,v 1.6 2001/07/15 03:36:59 doug Exp $
	 * http://www.bagley.org/~doug/shootout/
	 */

	#include <stdio.h>
	#include <stdlib.h>
	#include <unistd.h>

	int Ack(int M, int N) 
	{ 
		return(M ? (Ack(M-1,N ? Ack(M,(N-1)) : 1)) : N+1); 
	}

	int main(int argc, char *argv[]) 
	{
	    int n = ((argc == 2) ? atoi(argv[1]) : 1);

	    printf("Ack(3,%d): %d\n", n, Ack(3, n));
	    /* sleep long enough so we can measure memory usage */
	    sleep(1);
	    return(0);
	}
#endif

// Conversion of the above to assembly language.
// Note that I'm not attempting to reduce the number
// of lines of code here. The point is to produce code
// that is readable and maintainable, not to produce
// the fewest lines of code. The example above (a typical
// "explosion in an alphabet soup factor" style C program)
// demonstrates the problem with trying to "prove" one
// language is better than another because of minimal line
// counts - proponents of a language rely on *bad* programming
// practice in an effort to "optimize" the line counts for
// the code to somehow show that one language is better than
// another. The sad part is that they are demonstrating just
// the opposite!

program ackermann;
#include( "stdlib.hhf" )

	procedure Ack( m:int32; n:int32 ); @returns( "eax" );
	begin Ack;
	
		push( ecx );
		mov( m, ecx );
		if( ecx <> 0 ) then
		
			// if( n <> 0 ) then Ack( m-1, ack( m, n-1))
			// else Ack( m-1, 1 ):
			
			mov( n, eax );
			if( eax <> 0 ) then
			
				dec( eax );
				Ack( ecx, eax );
				
			else
			
				mov( 1, eax );
				
			endif;
			dec( ecx );
			Ack( ecx, eax );
			
		else
		
			inc( eax );
			
		endif;
		pop( ecx );			
			
	end Ack;
	
static
	n:int32;
		    
begin ackermann;

    mov( conv.strToi32( arg.v( 1 ), 0 ), n );
	Ack( 3, n);
	stdout.put
	( 
		"Ack(3,", 
		n, 
		"): ",
		(type int32 eax),
		nl
	);
            
end ackermann;
