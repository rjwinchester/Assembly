// fibGCLS
//
//	This program demonstrates a quick and dirty "fibonacci" in
// assembly language. This is based on the "fibo.g++" 
// program that is part of "The Great Computer
// Language Shoot-out" found at
//
//		http://www.bagley.org/~doug/shootout/
//
// The purpose of that web page is to demonstrate several
// applications written in various languages. Although one
// of the primary purposes of that web site is to demonstrate
// the different run-time efficiencies of various languages,
// this HLA implementation was not created to demonstrate
// that assembly code is faster or smaller (everyone pretty
// much accepts the fact that the fastest and/or smallest
// example of a program will be written in assembly language).
// Instead, this example demonstrates that with the use of
// a high level assembler (e.g., HLA), it's also possible to
// write code almost as easily as in a high level language
// like C. As such, this example freely sacrifices efficiency
// for readability.

#if( false )
	// -*- mode: c++ -*-
	// $Id: fibo.g++,v 1.3 2001/06/20 03:20:02 doug Exp $
	// http://www.bagley.org/~doug/shootout/

	#include <iostream>
	#include <stdlib.h>

	using namespace std;

	unsigned long fib(unsigned long n) {
	    if (n < 2)
		return(1);
	    else
		return(fib(n-2) + fib(n-1));
	}

	int main(int argc, char *argv[]) {
	    int n = ((argc == 2) ? atoi(argv[1]) : 1);

	    cout << fib(n) << endl;
	    return(0);
	}
#endif

// This code is a faithful translation of the algorithm
// presented by "The Great Computer Language Shoot-out".
// This is, however, an extremely inefficient way to
// compute Fibonacci numbers. For a much better algorithm
// (linear execution time rather than exponential), please
// check out the discussion of "THUNKS" in "The Art of
// Assembly Language" (this code also appears in the
// "Examples" directory of the HLA distribution).

program fibonacci;
#include( "stdlib.hhf" )

	procedure fib( n:uns32 ); @returns( "eax" );
	begin fib;

		mov( 1, eax );
		if( n >= 2 ) then

			dec( n );
			push( fib( n ) );
			dec( n );
			fib( n );
			add( [esp], eax );
			// add( 4, esp ); // Not really needed, ret cleans up stack.

		endif;

	end fib;

static
	n	:uns32;

begin fibonacci;

	if( arg.c() <> 2 ) then

		stdout.put( "Usage: fib n" nl );
		exit fibonacci;

	endif;
	mov( conv.strToi32( arg.v( 1 ), 0 ), n );
	fib( eax );
	stdout.put( "fib(", n, ")=", (type uns32 eax), nl );

end fibonacci;
